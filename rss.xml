<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2019-02-04T17:52:39+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">How to Deploy Maven Artifacts to CloudRepo via Rultor</title><link href="https://www.yegor256.com/2019/02/03/cloudrepo.html" rel="alternate" type="text/html" title="How to Deploy Maven Artifacts to CloudRepo via Rultor" /><published>2019-02-03T00:00:00+00:00</published><updated>2019-02-03T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/02/03/cloudrepo</id><content type="html" xml:base="https://www.yegor256.com/2019/02/03/cloudrepo.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;http://www.rultor.com&quot;&gt;&lt;img src=&quot;http://doc.rultor.com/images/logo.svg&quot; style=&quot;width:100px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;In my &lt;a href=&quot;/2015/09/07/maven-repository-amazon-s3.html&quot;&gt;previous article&lt;/a&gt;,
I described how to
set up a private Maven repository in Amazon S3 and deploy there via &lt;a href=&quot;http://www.rultor.com&quot;&gt;Rultor&lt;/a&gt;.
This is a great solution if you’re familiar with managing Amazon Web Services (AWS),
&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;S3&lt;/a&gt;, and &lt;a href=&quot;https://aws.amazon.com/iam/&quot;&gt;AWS Identity and Access Management (IAM)&lt;/a&gt;.
However, if you’re not comfortable administering an AWS account and
all the related permissions, you may want to store your Apache Maven Artifacts
in some cloud based repository manager instead.
Here is how you make Rultor deploy your Maven dependencies to &lt;a href=&quot;https://www.cloudrepo.io/&quot;&gt;CloudRepo&lt;/a&gt;.
I wrote this blog post together with &lt;a href=&quot;https://www.linkedin.com/in/chrisshellenbarger&quot;&gt;Chris Shellenbarger&lt;/a&gt;,
their founder.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Both repository managers and S3 will allow your build tools
to store and retrieve your software libraries in a remote
repository or bucket.
However, repository managers take care of a lot of the work
that you’d have to manage yourself with the S3 solution.&lt;/p&gt;

&lt;p&gt;While AWS is quite robust and can be configured to do everything
a repository manager can, there are use cases that work directly
out of the box when you choose a fully managed solution, like:
User/Group Administration, Maven Specific Views, Webhooks, Notifications,
Access and Audit Logs, Fully Managed Security, etc.
Simply put, they are not just storages of JAR files, but Maven repositories
in cloud.&lt;/p&gt;

&lt;p&gt;A fully managed, cloud hosted solution will cost you a monthly subscription
fee of some sort. At the moment of writing they charge $9 per month
&lt;a href=&quot;https://www.cloudrepo.io/pricing.html&quot;&gt;and up&lt;/a&gt;. They are free for open source,
but I don’t see why you would need them if you can use
&lt;a href=&quot;/2014/08/19/how-to-release-to-maven-central.html&quot;&gt;Maven Central&lt;/a&gt;.
The good news is that they are offering a special discount for my readers:
the first 90 days are free, versus the standard 14. This is effectively
a 25% discount off of your first year.
Simply &lt;a href=&quot;mailto:support@cloudrepo.io&quot;&gt;shoot them an email&lt;/a&gt; when your account is created
and they’ll take care of you (don’t forget to mention me, to get the discount).&lt;/p&gt;

&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;http://www.cloudrepo.io&quot;&gt;&lt;img src=&quot;https://www.yegor256.com/images/2019/02/cloudrepo.png&quot; style=&quot;width:100px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Assuming you have created an account with
CloudRepo and &lt;a href=&quot;https://www.cloudrepo.io/docs/maven.html#pre-requisites&quot;&gt;setup both a user and maven repository&lt;/a&gt;,
deploying to CloudRepo requires two steps on the client side:
1) Configure a &lt;code&gt;settings.xml&lt;/code&gt; file with credentials, and
2) Add your repository to your &lt;code&gt;pom.xml&lt;/code&gt; file’s &lt;code&gt;&amp;lt;distributionManagement&amp;gt;&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;The default location for the &lt;code&gt;settings.xml&lt;/code&gt; file is in your
&lt;code&gt;~/.m2&lt;/code&gt; directory.  Edit this file and ensure that you have
a &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; entry as seen below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;settings&amp;gt;
  &amp;lt;servers&amp;gt;
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;io.cloudrepo&amp;lt;/id&amp;gt;
      &amp;lt;username&amp;gt;yegor256@gmail.com&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;my-secret&amp;lt;/password&amp;gt;
    &amp;lt;/server&amp;gt;
  &amp;lt;/servers&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By declaring a &lt;code&gt;server&lt;/code&gt; and specifying an &lt;code&gt;id&lt;/code&gt;, you can reference the &lt;code&gt;id&lt;/code&gt;
from within your Maven POM files.  When Maven attempts to
authenticate against a server it will look for a corresponding
key in the &lt;code&gt;settings.xml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If you’re worried about storing your password in plaintext
on your filesystem, check how Maven &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-encryption.html&quot;&gt;recommends&lt;/a&gt;
fixing that.&lt;/p&gt;

&lt;p&gt;Now that your credentials have been set, you must
point your &lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-the-pom.html&quot;&gt;&lt;code&gt;pom.xml&lt;/code&gt;&lt;/a&gt;
at your CloudRepo repository.
Add a new &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; element to the &lt;code&gt;&amp;lt;distributionManagement&amp;gt;&lt;/code&gt; (to upload them) section of your &lt;code&gt;pom.xml&lt;/code&gt;
and to the &lt;code&gt;&amp;lt;repositories&amp;gt;&lt;/code&gt; (to download them):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;project&amp;gt;
  [...]
  &amp;lt;repositories&amp;gt;
    &amp;lt;repository&amp;gt;
      &amp;lt;id&amp;gt;io.cloudrepo&amp;lt;/id&amp;gt;
      &amp;lt;url&amp;gt;https://[your-org-name].mycloudrepo.io/repositories/[your-repository-name]&amp;lt;/url&amp;gt;
    &amp;lt;/repository&amp;gt;
  &amp;lt;/repositories&amp;gt;
  [...]
  &amp;lt;distributionManagement&amp;gt;
    &amp;lt;repository&amp;gt;
      &amp;lt;id&amp;gt;io.cloudrepo&amp;lt;/id&amp;gt;
      &amp;lt;name&amp;gt;CloudRepo Maven Repository&amp;lt;/name&amp;gt;
      &amp;lt;url&amp;gt;https://[your-org-name].mycloudrepo.io/repositories/[your-repository-name]&amp;lt;/url&amp;gt;
    &amp;lt;/repository&amp;gt;
  &amp;lt;/distributionManagement&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have a build working in your local environment, you need to
deploy it to production with Rultor.
First, you’ll need to store your credentials in Git so that Rultor
can access them at build and deploy time.   However, it
is very important to &lt;em&gt;never&lt;/em&gt; store your credentials in plaintext in version control
(substitute the name of your GitHub project with &lt;code&gt;my/project&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gem install rultor
$ rultor encrypt -p my/project settings.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates an encrypted version of your settings file with
the name &lt;code&gt;settings.xml.asc&lt;/code&gt;.  Add this file to the root directory
of your project, then commit and push. It is safe.
Only Rultor has the keys to decrypt this file so even if your source
code is exposed to others, your credentials will be kept safe.&lt;/p&gt;

&lt;p&gt;To enable Rultor, add a &lt;code&gt;.rultor.yml&lt;/code&gt; file to the root directory
of your project with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;decrypt:
  settings.xml: &quot;repo/settings.xml.asc&quot;
deploy:
  script: |
    mvn clean deploy --settings ../settings.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on the &lt;code&gt;.rultor.yml&lt;/code&gt; file,
check the &lt;a href=&quot;http://doc.rultor.com/reference.html&quot;&gt;Rultor Reference Page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that everything is configured you should be able to deploy to
CloudRepo with Rultor by executing the &lt;code&gt;@rultor deploy&lt;/code&gt; command.
Wait for the response and Rultor will &lt;a href=&quot;/2014/07/24/rultor-automated-merging.html&quot;&gt;take care&lt;/a&gt;
of all the rest.&lt;/p&gt;

&lt;p&gt;That’s it!&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="devops" /><category term="maven" /><category term="java" /><summary type="html">In my previous article, I described how to set up a private Maven repository in Amazon S3 and deploy there via Rultor. This is a great solution if you’re familiar with managing Amazon Web Services (AWS), S3, and AWS Identity and Access Management (IAM). However, if you’re not comfortable administering an AWS account and all the related permissions, you may want to store your Apache Maven Artifacts in some cloud based repository manager instead. Here is how you make Rultor deploy your Maven dependencies to CloudRepo. I wrote this blog post together with Chris Shellenbarger, their founder.</summary></entry><entry><title type="html">My Recipe Against Dependency Hell</title><link href="https://www.yegor256.com/2019/01/29/dependency-hell.html" rel="alternate" type="text/html" title="My Recipe Against Dependency Hell" /><published>2019-01-29T00:00:00+00:00</published><updated>2019-01-29T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/01/29/dependency-hell</id><content type="html" xml:base="https://www.yegor256.com/2019/01/29/dependency-hell.html">&lt;p&gt;Do you specify exact versions of your dependencies? I mean, when your
software package depends on another one, do you write down, in your &lt;code&gt;pom.xml&lt;/code&gt;,
&lt;code&gt;Gruntfile&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt;, or what have you, its version as &lt;code&gt;1.13.5&lt;/code&gt; or just
&lt;code&gt;1.+&lt;/code&gt;? I always &lt;a href=&quot;https://twitter.com/yegor256/status/1059856548112068608&quot;&gt;thought&lt;/a&gt;
that it was better to use exact version numbers,
to avoid the so called &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_hell&quot;&gt;dependency hell&lt;/a&gt;,
and &lt;a href=&quot;https://blog.danlew.net/2015/09/09/dont-use-dynamic-versions-for-your-dependencies/&quot;&gt;I was not alone&lt;/a&gt;.
However, very soon I &lt;a href=&quot;https://twitter.com/yegor256/status/1060538705260265474&quot;&gt;realized&lt;/a&gt;
that dynamic versions, like &lt;code&gt;1.+&lt;/code&gt;, give more flexibility.
Just a few weeks ago I realized that neither approach
is right and found myself a hybrid formula. No suprise, I again saw that
&lt;a href=&quot;https://brock.io/post/repeatable_android_builds/&quot;&gt;I wasn’t alone&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Sin noticias de Dios (2001) by Agustín Díaz Yanes&quot; src=&quot;/images/2019/01/sin-noticias-de-dios.jpg&quot; longdesc=&quot;#9005641b&quot; /&gt;&lt;figcaption id=&quot;9005641b&quot;&gt;Sin noticias de Dios (2001) by Agustín Díaz Yanes&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, let me explain what’s wrong with fixed dependencies.&lt;/p&gt;

&lt;p&gt;Say I create a library X, which depends on, for example, a logging
facility, which is a third-party library, not mine. Thus my library X has
a &lt;em&gt;dependency&lt;/em&gt;. The logging library has a version number, such as
&lt;code&gt;1.13.5&lt;/code&gt;. I put this text into the &lt;code&gt;pom.xml&lt;/code&gt; file of X:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;log-me&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.13.5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Many advocates of fixed dependencies argue that it’s very important
to stick to the version &lt;code&gt;1.13.5&lt;/code&gt;, instead of using a more flexible dynamic
one: &lt;code&gt;1.13)&lt;/code&gt; (i.e. any version, provided it is &lt;code&gt;1.13&lt;/code&gt; or newer).
Why? Because future versions may introduce something that
will break the build of X. They may change interfaces, rename classes or methods,
or delete something that I’m using. You never know what the authors of this
&lt;code&gt;log-me&lt;/code&gt; library might do. That’s why it’s better to hard-wire ourselves to &lt;code&gt;1.13.5&lt;/code&gt; and
call it a day.&lt;/p&gt;

&lt;p&gt;This is true.&lt;/p&gt;

&lt;p&gt;But.&lt;/p&gt;

&lt;p&gt;What if the library X is used by another library Y, which also depends on
&lt;code&gt;log-me&lt;/code&gt; but needs version &lt;code&gt;1.14.1&lt;/code&gt;. Boom! There will be a conflict
in library Y: Maven, the package manager, won’t be able to decide
which version to use. It will be necessary to resolve the conflict somehow.
In the case of Maven it’s resolvable, in the case of, for example,
&lt;a href=&quot;https://github.com/ruby/rake&quot;&gt;Rake&lt;/a&gt;, it’s not (to my knowledge).&lt;/p&gt;

&lt;p&gt;To resolve this problem, library Y will have to explicitly say which version
has to be used. But it can’t be sure that &lt;code&gt;1.14.1&lt;/code&gt; will work correctly with
library X. To confirm that it does, it would have to be tested by the authors of library
X. So the best the creators of library Y can do is to try it and hope
for the best. With other build tools, like Rake, the authors will have no choice,
but to ask the authors of library X to upgrade to &lt;code&gt;1.14.1&lt;/code&gt; and release
a new version. Then, library Y will be able to use library X.&lt;/p&gt;

&lt;p&gt;This problem would not exist if library X depended on &lt;code&gt;1.13&lt;/code&gt; instead.
But, as I mentioned above, in that case its authors would be planting a time bomb—eventually
one of the future versions will definitely break the build.&lt;/p&gt;

&lt;p&gt;So what is the solution?&lt;/p&gt;

&lt;p&gt;Here is my formula: If you trust the authors of the library, use dynamic versioning;
if you don’t, use a fixed version.&lt;/p&gt;

&lt;p&gt;What I mean is, do you trust that they are professional enough to think about
backward compatibility and to follow the principles of &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;?
If they are careful enough to not delete or modify something
that may affect future versions without also changing the major number of the version,
then you can trust them. How do you know who to trust? I don’t trust anyone, except
my own libraries and a very small number of other libraries which I have reviewed in GitHub and checked
the quality of their repositories.&lt;/p&gt;

&lt;p&gt;Of course, you can’t fully trust anyone, but this is the formula I
have for myself now. You can see how it works in this
&lt;a href=&quot;https://github.com/zold-io/zold/blob/master/zold.gemspec&quot;&gt;Gemfile&lt;/a&gt;, for example.
Pay attention to the version numbers. Those that start with &lt;code&gt;~&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;gt;=&lt;/code&gt; are dynamic,
while others are fixed. It’s a hybrid approach, but it works for me.&lt;/p&gt;

&lt;p&gt;Maybe it will help you too.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="devops" /><summary type="html">Do you specify exact versions of your dependencies? I mean, when your software package depends on another one, do you write down, in your pom.xml, Gruntfile, Gemfile, or what have you, its version as 1.13.5 or just 1.+? I always thought that it was better to use exact version numbers, to avoid the so called dependency hell, and I was not alone. However, very soon I realized that dynamic versions, like 1.+, give more flexibility. Just a few weeks ago I realized that neither approach is right and found myself a hybrid formula. No suprise, I again saw that I wasn’t alone.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/01/sin-noticias-de-dios.jpg" /></entry><entry><title type="html">10x Paychecks for 10x Programmers</title><link href="https://www.yegor256.com/2019/01/22/10x-paychecks.html" rel="alternate" type="text/html" title="10x Paychecks for 10x Programmers" /><published>2019-01-22T00:00:00+00:00</published><updated>2019-01-22T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/01/22/10x-paychecks</id><content type="html" xml:base="https://www.yegor256.com/2019/01/22/10x-paychecks.html">&lt;p&gt;You most definitely have heard about 10x programmers. The gist of this
folklore is that some of us coders are very effective (10 or even
&lt;a href=&quot;http://antirez.com/news/112&quot;&gt;100 times&lt;/a&gt; more so
than others), while the rest are just “normal.” It is definitely
&lt;a href=&quot;https://www.ybrikman.com/writing/2013/09/29/the-10x-developer-is-not-myth/&quot;&gt;not a myth&lt;/a&gt; though.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Fargo (TV Series, Season 3) by Noah Hawley&quot; src=&quot;/images/2019/01/fargo.jpg&quot; longdesc=&quot;#e92b8140&quot; /&gt;&lt;figcaption id=&quot;e92b8140&quot;&gt;Fargo (TV Series, Season 3) by Noah Hawley&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_L._Glass&quot;&gt;Robert Glass&lt;/a&gt; in his
&lt;a href=&quot;https://ieeexplore.ieee.org/document/922739/&quot;&gt;&lt;em&gt;Frequently Forgotten Fundamental Facts About Software Engineering&lt;/em&gt;&lt;/a&gt; (2001)
essay said that
“good programmers are up to 30 times better than
mediocre programmers, according to ‘individual differences’ research.”
I don’t know where he gets the number 30 from, and I seriously
doubt this number makes any sense, but the bottom line is valid:
there is a &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;huge distance&lt;/a&gt;
between people who just write code and those who do it &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Steve_McConnell&quot;&gt;Steve McConnell&lt;/a&gt;
in his &lt;a href=&quot;https://www.construx.com/blog/productivity-variations-among-software-developers-and-teams-the-origin-of-10x/&quot;&gt;blog post&lt;/a&gt;
analyzed a few studies of this subject and demonstrated that the actual
ratio varies from 2.6 up to 8. At the end of the post he asks
“Have you seen 10:1 differences in capabilities between different individuals?
Does 10:1 even cover the range?” Thus, the distance exists, it is pretty big,
but, obviously, we can’t claim an exact factor.&lt;/p&gt;

&lt;p&gt;But that is not my point.&lt;/p&gt;

&lt;p&gt;What I’m interested in is the pay gap between those 10x programmers
and everybody else. Let’s take a look at the salary report from PayScale
(I took this screenshot &lt;a href=&quot;https://www.payscale.com/research/US/Job=Computer_Programmer/Salary&quot;&gt;from here&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;unprintable&quot;&gt;&lt;img src=&quot;https://www.yegor256.com/images/2019/01/payscale.png&quot; itemprop=&quot;image&quot; style=&quot;width:600px;max-width:100%;&quot; alt=&quot;The figure&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;According to this report, the worst programmer gets $36K, while the best
one gets $100K, which confirms the 3:1 ratio. It’s far from 10:1, but if
we look more closely, the salary of $100K is far from being the best on the market.
For example, Indeed &lt;a href=&quot;https://spectrum.ieee.org/view-from-the-valley/at-work/tech-careers/what-silicon-valley-tech-jobs-pay-the-highest-salaries&quot;&gt;says&lt;/a&gt;
that in Silicon Valley senior software engineers make $160K, which
gives us the ratio of 4.4x. If we look even closer, we will see that
&lt;em&gt;some&lt;/em&gt; programmers &lt;a href=&quot;https://www.cnet.com/news/silicon-valley-talent-wars-engineers-come-get-your-250k-salary/&quot;&gt;make&lt;/a&gt;
$250K or even
&lt;a href=&quot;https://www.businessinsider.de/a-google-programmer-blew-off-a-500000-salary-at-startup-because-hes-already-making-3-million-every-year-2014-1?r=US&amp;amp;IR=T&quot;&gt;$3M&lt;/a&gt;,
which gives us the ratio of 83x. It seems that 10x programmers exist
&lt;em&gt;and&lt;/em&gt; they are paid according to their extraordinary talents—many times
more than their colleagues.&lt;/p&gt;

&lt;p&gt;Wait! Are they really?&lt;/p&gt;

&lt;p&gt;It seems that the ratio we just observed is motivated by location instead
of skills. The $36K programmers are not working together with $250K guys
in the same office, committing to the same code base. This is just not happening.
I can’t really prove it with statistics, but let’s hear from some companies.
&lt;a href=&quot;https://m.signalvnoise.com/how-we-pay-people-at-basecamp-f1d04f4f194b&quot;&gt;Basecamp&lt;/a&gt;:
“Everyone in the same role at the same level is paid the same.”
&lt;a href=&quot;https://open.buffer.com/introducing-open-salaries-at-buffer-including-our-transparent-formula-and-all-individual-salaries/&quot;&gt;Buffer&lt;/a&gt;:
“Master: 1.3X, Senior: +5%.”&lt;/p&gt;

&lt;p&gt;Simply put, companies attempt to minimize the spread in order to avoid
jealousy between programmers.
Buffer made a &lt;a href=&quot;http://www.inc.com/jeff-haden/inside-buffer-company-complete-transparency.html&quot;&gt;big splash&lt;/a&gt;
in the news, when they opened their salary calculating formula.
This is not typical for the industry.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;In order to make more, a programmer has to change location, company, or both.
&lt;/aside&gt;

&lt;p&gt;Even with ratios much smaller than 10x, employers tend to keep salaries
&lt;a href=&quot;https://www.forbes.com/sites/davidburkus/2016/02/02/why-do-we-keep-salaries-secret/&quot;&gt;secret&lt;/a&gt;.
According to &lt;a href=&quot;https://www.theatlantic.com/business/archive/2014/07/when-the-boss-says-dont-tell-your-coworkers-how-much-you-get-paid/374467/&quot;&gt;some studies&lt;/a&gt;,
“about half of American employees in all sectors are either explicitly
prohibited or strongly discouraged from discussing pay with their coworkers.”&lt;/p&gt;

&lt;p&gt;Putting all this together we can effectively assume that no matter how
large the difference in skills between regular programmers and 10x programmers
in the same project, they will get almost the same, or very similar, compensation.
In order to get more, a programmer has to change location, company,
or both.&lt;/p&gt;

&lt;p&gt;It seems very wrong!&lt;/p&gt;

&lt;p&gt;And it’s not resolvable, until we change the
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;payment model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we continue to pay programmers for their time, the pay inequality will always hurt.
For me, as a programmer, it will always be difficult or impossible to understand
why I’m getting, say, $100 dollars per day, while another Java developer
is getting $1,000. I will be jealous and no
&lt;a href=&quot;/2015/03/02/team-morale-myths-and-reality.html&quot;&gt;team building&lt;/a&gt;
exercise will be able to calm me down.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;A good programmer must make $25K+ a month, working remotely and part-time.
&lt;/aside&gt;

&lt;p&gt;However, when we start paying by result, what seems to be utopian now, will
become possible: 10x programmers will collect 10x paychecks. A good programmer
will get $250/hour, taking home $25,000 a month, working part-time. A bad
programmer will make $20/hour, taking home as much as … an average plumber,
a bus driver, or an electrician.&lt;/p&gt;

&lt;p&gt;A good programmer &lt;em&gt;must&lt;/em&gt; make $25K+ a month, working remotely and part-time.
This is how I see the future and this is what
&lt;a href=&quot;https://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt; is leading us to.&lt;/p&gt;

&lt;p&gt;In order to achieve that future we need to pay per result. This is the key
success factor. Until then, there is no hope that those
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office slaves&lt;/a&gt; who
claim to be 10x programmers will ever make what they truly deserve.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="zerocracy" /><category term="management" /><summary type="html">You most definitely have heard about 10x programmers. The gist of this folklore is that some of us coders are very effective (10 or even 100 times more so than others), while the rest are just “normal.” It is definitely not a myth though.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/01/fargo.jpg" /></entry><entry><title type="html">What if the Architect is Wrong?</title><link href="https://www.yegor256.com/2019/01/15/what-if-architect-is-wrong.html" rel="alternate" type="text/html" title="What if the Architect is Wrong?" /><published>2019-01-15T00:00:00+00:00</published><updated>2019-01-15T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/01/15/what-if-architect-is-wrong</id><content type="html" xml:base="https://www.yegor256.com/2019/01/15/what-if-architect-is-wrong.html">&lt;p&gt;You most probably know what I think about the
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;architect&lt;/a&gt;
role on a software project—it’s that of a &lt;em&gt;dictator&lt;/em&gt; who makes all technical decisions
and who bears the entire responsibility for the final result. I &lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;wrote&lt;/a&gt;
about it and even gave a talk &lt;a href=&quot;https://www.youtube.com/watch?v=R1lA7pN60xg&quot;&gt;&lt;em&gt;Who is a Software Architect?&lt;/em&gt;&lt;/a&gt;
at BuildStuff in 2016. However, the obvious question you may ask is:
What happens if the architect is wrong? Does it mean the entire project
is at risk of failure? And isn’t it better to make the whole team responsible
for the result, instead of having one single point of failure?&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Color of Money (1986) by Martin Scorsese&quot; src=&quot;/images/2019/01/the-color-of-money.jpg&quot; longdesc=&quot;#de60815d&quot; /&gt;&lt;figcaption id=&quot;de60815d&quot;&gt;The Color of Money (1986) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The question indeed is obvious. Dictatorship is a &lt;a href=&quot;/2016/09/27/command-control-innovate.html&quot;&gt;great&lt;/a&gt;
management model, provided the dictator is &lt;em&gt;smart&lt;/em&gt;. This means, first of all, having the ability
1) to analyze the reality, 2) &lt;a href=&quot;/2015/05/13/two-instruments-of-software-architect.html&quot;&gt;collect&lt;/a&gt;
all available differing opinions, and 3) find
the best possible option, leaving personal emotions aside. How many people
truly can do that? &lt;del&gt;None&lt;/del&gt; Very few.&lt;/p&gt;

&lt;p&gt;Everybody else will most likely abuse the power and turn into a bad dictator,
who doesn’t listen to anyone, doesn’t pay attention to different opinions,
and makes technical decisions out of personal feelings. How many
software architects like that are out there? &lt;del&gt;All&lt;/del&gt; Many.&lt;/p&gt;

&lt;p&gt;What is the solution?&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=PYq05UAwzNk&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/PYq05UAwzNk/mqdefault.jpg&quot; alt=&quot;YouTube video #PYq05UAwzNk&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M2: We must fully trust the architect, but regularly review the decisions he or she is making;
        28 December 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;How about we get rid of the dictator in the first place and let the team
decide what the right architecture is? How about we replace dictatorship
with &lt;a href=&quot;/2016/02/18/holacracy-autocracy.html&quot;&gt;democracy&lt;/a&gt;
and let software developers &lt;em&gt;vote&lt;/em&gt; somehow, so that there will
be no single point of failure? They will all be responsible for the product,
and when it breaks—they will all be guilty. Right?&lt;/p&gt;

&lt;p&gt;Wrong!&lt;/p&gt;

&lt;p&gt;“Quality and responsibility mean nothing unless they are attributed personally,”
I said in my book &lt;a href=&quot;/code-ahead.html&quot;&gt;&lt;em&gt;Code Ahead&lt;/em&gt;&lt;/a&gt;. Group responsibility
is the most terrible mistake a team can ever make. So, no! No voting and no democracy.&lt;/p&gt;

&lt;p&gt;What then?&lt;/p&gt;

&lt;p&gt;Imagine a real project, where an architect makes a decision to use MongoDB (a NoSQL database) for persisting
user payments. It’s a questionable decision, since, traditionally, relational databases
are considered a better option for financial data. However, we know that the architect
is a dictator and we are not supposed to argue. We can’t tell the architect
that the decision is wrong. Moreover, we should not ask the architect to
&lt;a href=&quot;/2016/07/21/convince-me.html&quot;&gt;convince&lt;/a&gt; us. The decision is made. It’s done.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;The only real boss of the architect is requirements.
&lt;/aside&gt;

&lt;p&gt;What can we do?&lt;/p&gt;

&lt;p&gt;We can recall that the only real boss of the architect is &lt;em&gt;requirements&lt;/em&gt;. The
architect may not listen to us, to developers, to customers, to anyone. But
the requirements are the indisputable boss. Did the requirements document
mention anything about the choice of the database? Most likely there was nothing
about it. So the architect did everything right. The requirements said
that payments have to be persisted and they are. The requirements wanted
the system to process up to a hundred payments per second and it does. So,
where is the mistake?&lt;/p&gt;

&lt;p&gt;Well, we just &lt;em&gt;feel&lt;/em&gt; that the choice of MongoDB was a bad idea. It’s just gut feeling.
But maybe we are wrong and the architect is right?&lt;/p&gt;

&lt;p&gt;To make the situation more explicit and resolve the conflict,
we have to amend the requirements document. We have
to say that something else is required for this particular decision. Let’s say,
we add this line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The choice of each third-party product has
to be grounded on a multi-factor analysis of
at least four alternatives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once this requirement clause is approved, the architect will have to improve the
product documentation. There will have to be an analysis of MongoDB,
PostgreSQL, Oracle, and some other databases. There will be some selection
criteria defined and the architect will provide some numbers to make the
choice of MongoDB look reasonable.&lt;/p&gt;

&lt;p&gt;Once it’s done, the opinion of the architect will turn into a digital artifact,
which &lt;em&gt;may&lt;/em&gt; have defects. How many defects are there and how soon we find them
becomes a management question, which is relatively easy to resolve. We just
need a few additional pairs of eyes to look at this artifact and tell us
what’s wrong with it. For example, we can ask someone from the team to review
the analysis and tell us what’s wrong. Or we can &lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;hire&lt;/a&gt;
someone from the market, who is very expensive, but
a professional in the area of database management.&lt;/p&gt;

&lt;p&gt;Once defects are reported, they will have to be resolved somehow by the
architect. Either the analysis will have
to be improved, or the decision will have to be changed, if the facts start
stacking up against it.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;The lower the risk tolerance in the project, the more pairs of eyes we need to look at the decisions the architect is making.
&lt;/aside&gt;

&lt;p&gt;The lower the risk tolerance in the project, the more pairs of eyes we need
to look at the decisions the architect is making. If the quality is very
important or the professional level of the architect is questionable, we need
more decisions to be documented and more frequently reviewed. It’s a simple
game of numbers. If the architect is completely trusted and the project is not
expensive and only short-term—we just let the architect do whatever he or she
wants.&lt;/p&gt;

&lt;p&gt;On the other hand, if the architect is junior and the project is very important
to us, we must demand the majority of technical decisions to be documented
and analyzed. We must organize as many reviews of those documents as possible,
even inviting &lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;independent experts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thus, to summarize my points, we must not expect the architect to be an expert
capable of solving all problems. On the other hand, we must not replace the
architect with a democratic vote. Both ideas are wrong. The right approach is
to control the quality of decisions the architect makes via regular reviews.&lt;/p&gt;

&lt;p&gt;Do you have such reviews in your project? If not, why not?&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Imagine, you are a software architect and your manager tells you that your design decisions from now on will be regularly reviewed by another programmer, who they just contracted for that. What will be your answer?&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1089398576793436160?ref_src=twsrc%5Etfw&quot;&gt;January 27, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="architect" /><summary type="html">You most probably know what I think about the architect role on a software project—it’s that of a dictator who makes all technical decisions and who bears the entire responsibility for the final result. I wrote about it and even gave a talk Who is a Software Architect? at BuildStuff in 2016. However, the obvious question you may ask is: What happens if the architect is wrong? Does it mean the entire project is at risk of failure? And isn’t it better to make the whole team responsible for the result, instead of having one single point of failure?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/01/the-color-of-money.jpg" /></entry><entry><title type="html">Hazardous Enthusiasm</title><link href="https://www.yegor256.com/2019/01/01/hazardous-enthusiasm.html" rel="alternate" type="text/html" title="Hazardous Enthusiasm" /><published>2019-01-01T00:00:00+00:00</published><updated>2019-01-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/01/01/hazardous-enthusiasm</id><content type="html" xml:base="https://www.yegor256.com/2019/01/01/hazardous-enthusiasm.html">&lt;p&gt;On a daily basis I deal with many programmers who contribute to my
&lt;a href=&quot;/2017/05/30/why-contribute-to-open-source.html&quot;&gt;open source&lt;/a&gt;
projects, either as volunteers or for money via &lt;a href=&quot;https://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt;
(and my software projects are &lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;all&lt;/a&gt;
open source). Over the years I have realized
that there is a pattern in their behavior, which I need to be &lt;del&gt;scared&lt;/del&gt; aware of.
I call it “hazardous enthusiasm.” Here are the symptoms.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Thin Red Line (1998) by Terrence Malick&quot; src=&quot;/images/2019/01/the-thin-red-line.jpg&quot; longdesc=&quot;#4a7672ec&quot; /&gt;&lt;figcaption id=&quot;4a7672ec&quot;&gt;The Thin Red Line (1998) by Terrence Malick&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;A new developer joins the project. He is full of energy,
talks a lot, spends a lot of time on the project, submits
new tickets, and suggests improvements. He looks like a great candidate
and we all are happy to see him on board. He is a godsend!&lt;/p&gt;

&lt;p&gt;Then, when things become clearer for him, he starts criticizing the architecture.
He &lt;a href=&quot;/2014/10/07/stop-chatting-start-coding.html&quot;&gt;approaches&lt;/a&gt;
me in Telegram and asks me whether I realize that the architecture
is a total mess and that if we don’t change it immediately the project will
be dead in a few &lt;del&gt;days&lt;/del&gt; weeks. I attempt to assure him that I understand,
but… He immediately suggests an improvement: We have to re-do it all from
scratch or at least get rid of that collection of objects and replace it with
a singleton and a very nice &lt;a href=&quot;/2014/12/01/orm-offensive-anti-pattern.html&quot;&gt;ORM&lt;/a&gt;
library he’s been using for a year, and it’s
just great, blah blah blah… OK? Let’s do it? Why not?&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=gMJNz9AWbQE&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/gMJNz9AWbQE/mqdefault.jpg&quot; alt=&quot;YouTube video #gMJNz9AWbQE&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M1: Your enthusiasm may only harm the project if you can't deliver it incrementally;
        27 December 2018.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;I have very little to say and instead ask him to submit a ticket. I try to assure him
that I will investigate the possibilities as soon as I can. I also try
to remind him, in a very polite way, that I’m an
&lt;a href=&quot;/2014/10/12/who-is-software-architect.html&quot;&gt;architect&lt;/a&gt; here and, even though
his ideas sound great, I can’t accept them all at once.
Then he goes: “Let me show you!”&lt;/p&gt;

&lt;p&gt;In a few days I get a giant pull request with a lot of changes
that look interesting but that go completely against almost every principle
I’ve managed to embed into the existing architecture. What do I do? I feel sorry
for him. I have to reject the pull request and I try to explain why.
But there is no reasonable explanation. I’m just a bad guy who doesn’t like
innovative ideas.&lt;/p&gt;

&lt;p&gt;What happens next? Well, he disappears.&lt;/p&gt;

&lt;p&gt;I’ve seen this happen many times, with various people. Were they all
incompetent programmers? I don’t think so. They were great, from a technical point of view.
But they all lacked the very important skill which, I believe, distinguishes
a professional software engineer from a guy who merely learned how to write Java code:
&lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;microtasking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They simply don’t know how to break their changes, which in most cases are
by no means useless, into smaller pieces and deliver them incrementally. They want to
push everything they have in mind in one large chunk. Of course,
they fail. Because there is a bad guy in front of them: me, the architect.&lt;/p&gt;

&lt;p&gt;What makes their cases fatal is the enthusiasm. If they were less
aggressive and eager to do the right thing, they would survive. But they can’t
wait and they don’t want to apply half-measures. They want to fix the world
in one huge pull request.&lt;/p&gt;

&lt;p&gt;Why can’t I just accept their changes and let them fix the code the way
they want, you may ask? Because I know that even though they may look like
good programmers, they would be lousy architects, exactly because they lack
the skill of &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;microtasking&lt;/a&gt;.
If I accept what they suggest, I will simply transfer
my architect’s &lt;a href=&quot;/2015/05/11/software-architect-responsibilities.html&quot;&gt;responsibilities&lt;/a&gt;
to them. It will be their architecture from
now on. And what’s wrong with that? Well, their lack of that skill. They won’t be able
to be architects, because they can’t manage changes, can’t deliver them incrementally,
and can’t understand the dynamics of collaborative work with the source code.&lt;/p&gt;

&lt;p&gt;They are &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;hackers&lt;/a&gt;,
not designers or &lt;a href=&quot;/2018/06/26/are-you-an-architect.html&quot;&gt;architects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Honestly, I feel sorry when I lose them.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">On a daily basis I deal with many programmers who contribute to my open source projects, either as volunteers or for money via Zerocracy (and my software projects are all open source). Over the years I have realized that there is a pattern in their behavior, which I need to be scared aware of. I call it “hazardous enthusiasm.” Here are the symptoms.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/01/the-thin-red-line.jpg" /></entry><entry><title type="html">Speaker Cheat Sheet</title><link href="https://www.yegor256.com/2018/12/25/speaker-cheat-sheet.html" rel="alternate" type="text/html" title="Speaker Cheat Sheet" /><published>2018-12-25T00:00:00+00:00</published><updated>2018-12-25T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/12/25/speaker-cheat-sheet</id><content type="html" xml:base="https://www.yegor256.com/2018/12/25/speaker-cheat-sheet.html">&lt;p&gt;I speak at &lt;a href=&quot;/2016/11/18/software-conferences-to-attend.html&quot;&gt;software conferences&lt;/a&gt;
regularly. Over the last three years I
spoke in 30 cities and 10 countries. I recorded &lt;del&gt;almost&lt;/del&gt; all of them, you can
see them &lt;a href=&quot;/talks.html&quot;&gt;here&lt;/a&gt; and on my
&lt;a href=&quot;https://www.youtube.com/c/yegor256?sub_confirmation=1&quot;&gt;YouTube channel&lt;/a&gt;.
My principal rule is that I never give the same speech more
than once. Every time it’s a new deck of slides and a new flow of thoughts.
Of course, they all dance around the ideas I preach about, like
&lt;a href=&quot;/elegant-objects.html&quot;&gt;Elegant Objects&lt;/a&gt; or rebellion against office slavery.
I guess it’s time to share some of my secrets, mostly learned the hard way.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Убить Дракона (1988) by Марк Захаров&quot; src=&quot;/images/2018/12/ubit-drakona.jpg&quot; longdesc=&quot;#c100b445&quot; /&gt;&lt;figcaption id=&quot;c100b445&quot;&gt;Убить Дракона (1988) by Марк Захаров&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Demand a Larger Room&lt;/strong&gt;.
You know what’s funny—the smaller the room, the more difficult is
the talk. The easiest talks I’ve had were done in front of 400+ people. The
most difficult ones had about ten people. That’s why I try to insist, when
I can, that my talk should be in the main room with more seats. How so? Read on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take a Morning Slot&lt;/strong&gt;.
I’m not sure there is a rule for this, but my experience tells me that
the best speakers usually open an event and quit before lunch. If your slot
is somewhere closer to the end, make up a fake reason, like a booked flight,
and ask organizers to move you to an earlier time. The best slot is right
after the first one, when everybody is already awake but not too hungry and
still on the premises.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bring Friends&lt;/strong&gt;.
It’s way easier for me when there are some people in the room whom I know and who
will support me no matter how bad my talk is. It’s even easier when they
are being loud. The key trait of a good speaker is knowing how to break
the wall between the stage and the room. The presence of friends helps.
Sometimes I don’t have any friends with me, when the place is new and I’ve
just arrived. I try to make a few, right before the talk, while checking-in
and walking around. Then I invite them to my talk. Most of them don’t really
care where they go and easily agree. For them, having a friend on the stage
is an honor. So it’s win-win.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10/20/30 Rule&lt;/strong&gt;.
Ever heard about &lt;a href=&quot;https://guykawasaki.com/the_102030_rule/&quot;&gt;this rule&lt;/a&gt; from Guy Kawasaki?
The gist is that your presentation should not include more than ten slides,
should not last for longer than twenty minutes, and that thirty points is the smallest font
you can use. Don’t take it literally, but it does make a lot of sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bring No Slides&lt;/strong&gt;.
The best presenter uses no slides at all. The worst ones will have 200+
for a 30 minute talk. Where are you on this scale? You have to tell a story,
or maybe three, like &lt;a href=&quot;https://www.youtube.com/watch?v=D1R-jKKp3NA&quot;&gt;Steve Jobs did&lt;/a&gt;.
Imagine yourself talking to me
over a cafe table. Would you show me slides? I doubt it. You would just speak and hope
I understand you. Do the same on the stage. Of course, you might have some visual data,
just like you would use a napkin at the cafe. But that’s all. Your slides have
to support your talk, instead of being its replacement. I strongly recommend
you read these two great books:
&lt;a href=&quot;https://amzn.to/2zw09nx&quot;&gt;&lt;em&gt;slide:ology: The Art and Science of Presentation Design&lt;/em&gt;&lt;/a&gt; by Nancy Duarte
and
&lt;a href=&quot;https://amzn.to/2PeHth9&quot;&gt;&lt;em&gt;Presentation Zen: Simple Ideas on Presentation Design and Delivery&lt;/em&gt;&lt;/a&gt; by Garr Reynolds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay Cool … Not&lt;/strong&gt;.
Be brave. Stay strong. Look them in the eye. Smile. Relax. Everything will be fine! …
Don’t listen to this nonsense. It doesn’t work that way. I always feel scared. And I
always think to myself right before the talk—maybe I should hide somewhere in the
bathroom, they won’t find me and will quietly cancel the talk. You have to
feel something similar. If you don’t, there is something wrong with you.
But what should you do with that fear? Embrace it. Just like you do when watching a horror movie.
Enjoy seeing yourself wetting your pants. Look at yourself from the outside. I often
say to myself: “Let’s see how you can survive the next 45 minutes, dude.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Friends&lt;/strong&gt;.
My experience tells me that only about one out of every 20 people in the room are really
listening to what I’m saying and are capable of understanding. The rest of them
are just a crowd. So, when there are 200 people in the room, only ten of them
are my real audience. It’s important to find them as soon as possible and keep
talking to them, looking them right in the eye. Ignore everybody else.
Oh, and by the way, if you have to speak in front of 10 people, you are screwed.
Because, according to the “1 out of 20” formula, most likely there will be nobody interested
in what you are saying.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Enemies&lt;/strong&gt;.
The most interesting discussion is a scandal. Well, the most entertaining one.
To have a scandal you need a conflict, between you and your audience. Well, not
the entire room, but a small part of it. You are not that strong, I suppose,
just yet, to have the entire room against you. Although, that would be the
best speaking experience in your life. However, a few enemies will show up if you
say something that contradicts the &lt;em&gt;status quo&lt;/em&gt;. Once you say it (and you should)
someone will disagree and shout out. Don’t try to calm them down. Instead,
be aggressive with something like “Thanks to people like you we still have Windows.”
Success guaranteed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structure It&lt;/strong&gt;.
You know, I almost never attend other people’s talks. You know why? I very
quickly loose the train of thought and then just wait until the speaker finishes. I can
listen for the first five minutes, then something distracts me for a minute,
and I can never get back. The problem, I believe, is that speakers don’t announce
the structure of their presentations and don’t stay strictly attached to it
during the course of it. Here is what I’d suggest you do instead. When you start,
tell your listeners what the key idea is that you are going to deliver. Then, explain how you
are going to structure the next 45 minutes: What will go first, what next, how
you will end. Then, as you go, remind them about the structure from time to time, with something like:
“Hey, we are at the third principle, and there are seven of them in total. Stay
with me for another 15 minutes and we will be done.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intrigue&lt;/strong&gt;.
I’m not a master of it, but the principle is simple: don’t give everything away at once.
Promise to give it out later instead. Something like: “This doesn’t work, and I will
tell you why in a few minutes.” They will stay interested while waiting for that,
and you will be able to feed them with something else. Also, if someone asks
a question in the middle of the talk, you might start answering it, then stop
and say: “I will touch on this problem in a few minutes.” You get the idea: keep
them interested by not telling them everything right away.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask Questions&lt;/strong&gt;.
My rule of thumb is that at least once every five minutes I have to ask my audience
a question. The easiest one is “Does this make sense so far?” or “Do you follow?”
A few examples of more complex ones:
“Have you ever heard about …?”
“Who of you knows how this works?”
“Does this look similar to what you experience on your projects?”,
and so on.
Why do you need to do that? To know their opinion? Not at all. You don’t
care about their opinion. You just need to relax yourself. That’s why your
questions should be as neutral as possible, expecting no specific or difficult-to-deal-with
answers. It’s just an instrument to relieve the speaker and return
the attention and pressure back to the room, for a few seconds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t Rehearse&lt;/strong&gt;.
Well, maybe just once. But don’t try to make your talk perfect. Nobody needs that. You are
not a &lt;a href=&quot;/2016/05/10/keynote-clowns.html&quot;&gt;clown&lt;/a&gt;,
not a professional actor, not a speaker on a payroll. You are a
software engineer with a unique opinion. We need your thoughts straight from
your heart and your real experience. Don’t worry about being a bad speaker,
that doesn’t matter much. Worry about the &lt;em&gt;consistency&lt;/em&gt; of your arguments. Don’t try
to remember the exact words you will say or the jokes you will make—this
will only make you look fishy. Just make sure your arguments are strong
and deliver them just like you would if you were convincing a friend
standing next to you at the coffee machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t Be Funny&lt;/strong&gt;.
Don’t make funny slides and don’t prepare jokes.
Those are &lt;a href=&quot;/2016/05/10/keynote-clowns.html&quot;&gt;cheap&lt;/a&gt;
techniques. Don’t sell yourself that short. Stay serious about your content.
If there is a moment for a joke, make it, if you feel like it.
Otherwise, don’t be like those &lt;a href=&quot;/2016/05/10/keynote-clowns.html&quot;&gt;keynote clowns&lt;/a&gt;.
You are not a showman out there to entertain them with a red nose. You are supposed
to entertain with your &lt;em&gt;provocative ideas&lt;/em&gt; and &lt;em&gt;unique thoughts&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have Fun&lt;/strong&gt;.
You have to enjoy it. I know it’s stressful, but you have to find a way to
relax and fool around a little bit. Sometimes I catch a sight of a smiling cute lady
in the eighth row and smile back. Sometimes the clicker doesn’t work and I switch
slides &lt;a href=&quot;https://www.youtube.com/watch?v=Rip_04Bv3Jk&quot;&gt;with my feet&lt;/a&gt;. Sometimes
I just fool around.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;If you know everything, you can’t be trusted.
&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Be Humble&lt;/strong&gt;.
I believe that a really good speaker knows when to say “I don’t know” (not too often though).
If you know everything, you can’t be trusted. You have to demonstrate to them
that you are one of them, but a bit more advanced in one area. You are a programmer,
just like them, but you know a bit more about Java memory management. And you are
still learning and there is still a lot to learn. Now it’s time to share your
learning experience with them. To &lt;em&gt;share&lt;/em&gt;. Pay attention to this word. Not to
teach them, but to share what you know. When you say “I don’t know this” we
trust you more, because we understand that you accurately estimate the limits
of your knowledge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t Be Shy&lt;/strong&gt;.
I totally forgot to touch on this key question: Why are you making the speech? There
can be many answers, but the best one and the most honest is: It is for self-promotion.
Use your first and last few minutes to tell them who you are and (what is more
important) what you want them to do. I didn’t do this for many years;
I thought that a good speaker must be humble and stay focused on the content
instead of themselves. I was very wrong. Now I give them explicit instructions
on what I want from them: follow me on Twitter, subscribe to my Telegram channel,
sign up to Zerocracy, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Provoke Questions&lt;/strong&gt;.
You know how I know whether my talk was a success or a failure? I can tell by
the amount of questions I get. The more, the better. I’ve been lucky so far—even
my worst talks had a few questions at the end. My best ones though were
filled with them, starting from the 10th minute. That’s what success is for me!
How can you do the same? Be provocative in your content and exaggerate.
Also, ask yourself before the talk where the points of concern are, and leave
many of them unexplained. Questions will show up.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You know, while I was working on this blog post, I did some research online
and found out that there are tons of books and articles about this subject. There
are hundreds of recommendations and my short list above is merely a few percent
of what people say about this, and of what I could actually say too.&lt;/p&gt;

&lt;p&gt;Thus, I believe I will publish a book about this topic,
similar to the &lt;a href=&quot;/256-bloghacks.html&quot;&gt;&lt;em&gt;256 Bloghacks&lt;/em&gt;&lt;/a&gt; I wrote a few years go.
Maybe I will call it &lt;em&gt;256 Speechhacks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="speaking" /><summary type="html">I speak at software conferences regularly. Over the last three years I spoke in 30 cities and 10 countries. I recorded almost all of them, you can see them here and on my YouTube channel. My principal rule is that I never give the same speech more than once. Every time it’s a new deck of slides and a new flow of thoughts. Of course, they all dance around the ideas I preach about, like Elegant Objects or rebellion against office slavery. I guess it’s time to share some of my secrets, mostly learned the hard way.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/12/ubit-drakona.jpg" /></entry><entry><title type="html">Why I Don’t Want to Live in Silicon Valley</title><link href="https://www.yegor256.com/2018/12/18/silicon-valley-criticism.html" rel="alternate" type="text/html" title="Why I Don't Want to Live in Silicon Valley" /><published>2018-12-18T00:00:00+00:00</published><updated>2018-12-18T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/12/18/silicon-valley-criticism</id><content type="html" xml:base="https://www.yegor256.com/2018/12/18/silicon-valley-criticism.html">&lt;p&gt;Silicon Valley is a great place to be … or maybe not. I’ve spent five years there,
from 2011 till 2016. I did enjoy some parts of it, but others were not enjoyable
at all. Here is a quick summary of what’s wrong with this territory. I can’t speak about
the rest of the United States since, even though I’ve seen some other places, I’ve
never lived there for more than a month. Long story short, the territory
between San Francisco and San Jose, also known as Silicon Valley, is not
the thing you see in the &lt;a href=&quot;https://www.imdb.com/title/tt2575988/&quot;&gt;famous TV Series&lt;/a&gt;.
It is absolutely different…&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;American Beauty (1999) by Sam Mendes&quot; src=&quot;/images/2018/12/american-beauty.jpg&quot; longdesc=&quot;#e647a36d&quot; /&gt;&lt;figcaption id=&quot;e647a36d&quot;&gt;American Beauty (1999) by Sam Mendes&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;it-is-distasteful&quot;&gt;It is Distasteful&lt;/h2&gt;

&lt;p&gt;The way people dress up, the cars they buy, the way they decorate their
houses, the food they eat, the women they marry, the web sites (e.g.
&lt;a href=&quot;https://www.ebay.com&quot;&gt;eBay&lt;/a&gt; and &lt;a href=&quot;https://www.craigslist.com&quot;&gt;craigslist&lt;/a&gt;) they design—have
no taste, at all. And I’m not only speaking about ordinary middle class. I’ve
seen rich and poor, they all find Chinese take-away paper boxes
of something smelly pretty tasty, and think that a Chevrolet is really a car.&lt;/p&gt;

&lt;p&gt;While being richer than people I’ve met in, say, Amsterdam or Moscow, inhabitants
of the Valley don’t know how to enjoy their money. And the longer you stay
there, the less eager you become to find beauty in life. You turn into a zombie
focused on making money, to buy a one-million-dollar three-bedroom half-a-house,
which will smell of the cheap Indian food you will buy at the corner, because home cooking is not
cost-efficient.&lt;/p&gt;

&lt;p&gt;Maybe this is how it should be, if a country wants its people to work instead
of having fun and carelessly enjoying life. Americans &lt;em&gt;do&lt;/em&gt; work. Don’t get me wrong,
it’s good. This is what I love in the Valley—it’s very focused on results.
But the price you pay—the ugliness of everything around you—seems too high for me.&lt;/p&gt;

&lt;h2 id=&quot;it-is-insanely-correct--not&quot;&gt;It is Insanely Correct … Not&lt;/h2&gt;

&lt;p&gt;You have to expect Social Justice Warriors to be everywhere:
among your co-workers, gym buddies, close friends, employers, and employees.
You have to be constantly on the alert. You can’t say “blacks” or “chicks,” you have
to remember that they are “Afro-Americans” and “ladies.” You can’t joke about
gays, immigrants, homeless, women, Mexicans, and many other
“categories.” Well, you can, but be prepared to get into trouble, which
you may &lt;a href=&quot;/2018/11/13/bigotry.html&quot;&gt;never&lt;/a&gt; resolve.&lt;/p&gt;

&lt;p&gt;What’s funny is that &lt;del&gt;almost&lt;/del&gt; every single white male I’ve met there was a racist, but
not publicly of course. They all claimed to be tolerant but in a private
conversation were often whispering the n-word into my ear, while
speaking about the race problem. They always had a handful of racist jokes
when talking about their house keepers, who were all Mexicans.&lt;/p&gt;

&lt;p&gt;Intolerance, bigotry, xenophobia, and racism exist wherever I happen to
live, including Moscow and Amsterdam, but over there people are not afraid to say what
they have in mind. In California there are so many taboo subjects that it
reminds me of the good old Soviet Union, where (I can still remember it)
my parents would be whispering in the kitchen about something political but
would shut their mouths when I entered.&lt;/p&gt;

&lt;h2 id=&quot;it-is-unappetizing&quot;&gt;It is Unappetizing&lt;/h2&gt;

&lt;p&gt;CNN &lt;a href=&quot;https://edition.cnn.com/travel/article/world-best-food-cultures/index.html&quot;&gt;thinks&lt;/a&gt;
that the USA “cuisine” is the 10th best in the world (while Russia’s is
not even in the list). You know, I remember when I was in one office in Mountain
View and we were going to have lunch. Every day they would pick a different
cuisine, like Korean, Japanese, Italian, and so on. I asked them, why can’t we
try American cuisine for a change? They were surprised and Mike said: “We don’t have one,”
and then added, “Do you want hamburgers?”&lt;/p&gt;

&lt;p&gt;As Ashley Lutz and Mallory Schlossberg perfectly noted in their
&lt;a href=&quot;https://www.businessinsider.com/most-american-foods-of-all-time-2015-7&quot;&gt;ranked list&lt;/a&gt;
of the best American dishes (check it out to get the idea of what they eat):
“When it comes to cuisine, America lives up to the adage ‘bigger is better.’”
That’s definitely true. Every dish you get in a restaurant will be big. Huge.
You know why? Not because they eat that much (not the case in California),
but mostly because they take what’s left home. In order to warm it up in
the morning and have a free breakfast.&lt;/p&gt;

&lt;p&gt;Aside from that, the way the food is
&lt;a href=&quot;https://twitter.com/Jason/status/1077390533880770560&quot;&gt;served and presented&lt;/a&gt; can’t even be compared
with what you can experience in Paris, Milan, Munich, or Moscow. I once
saw a road-side ad saying something like “Food! $5.00 per pound!” Was it a joke?
I don’t think so.&lt;/p&gt;

&lt;h2 id=&quot;it-is-insane&quot;&gt;It is Insane&lt;/h2&gt;

&lt;p&gt;Do you know that “approximately 1 in 5 adults in the US experiences mental illness
in a given year,” &lt;a href=&quot;https://www.nami.org/learn-more/mental-health-by-the-numbers&quot;&gt;according to&lt;/a&gt;
the National Alliance on Mental Illness, and it
&lt;a href=&quot;https://www.psychologytoday.com/us/blog/our-changing-culture/201510/are-mental-health-issues-the-rise&quot;&gt;gets worse&lt;/a&gt;
every year.
They are &lt;a href=&quot;https://ourworldindata.org/mental-health&quot;&gt;on top of the world&lt;/a&gt; in the
insanity competition. California is not the most insane state though, it’s
somewhere in the middle of the
&lt;a href=&quot;http://www.mentalhealthamerica.net/issues/2017-state-mental-health-america-ranking-states&quot;&gt;ranking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The statistical figures I can also confirm empirically:
Almost every single family I’ve met there has their kid diagnosed with
some “disorder.” Why is this happening? I don’t really know, but my best guess
is that they enjoy it.&lt;/p&gt;

&lt;p&gt;There are no more good old-fashioned “idiots.” There are only people with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Obsessive%E2%80%93compulsive_disorder&quot;&gt;OCD&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Oppositional_defiant_disorder&quot;&gt;ODD&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Attention-deficit_hyperactivity_disorder&quot;&gt;ADHD&lt;/a&gt;,
and &lt;a href=&quot;https://psychcentral.com/disorders/&quot;&gt;many other D-s&lt;/a&gt;. Those complicated
diagnoses give them immunity against all sorts of bullying, harassment,
discrimination, and so on. Is it good? Maybe. But the price you pay is
a constant feeling that you are not in the office but in an insane asylum.&lt;/p&gt;

&lt;h2 id=&quot;it-is-positive&quot;&gt;It is Positive&lt;/h2&gt;

&lt;p&gt;“Are you OK? Yes, I’m fine!” is a dialog you hear when someone hits a finger nail
with a hammer. No matter what happens, they remain positive. I believe this
is what they are trained to do, from childhood. And what for?
Well, Barbara Ehrenreich in her book
&lt;a href=&quot;https://amzn.to/2QlfphA&quot;&gt;&lt;em&gt;Bright-Sided: How the Relentless Promotion of Positive Thinking Has Undermined America&lt;/em&gt;&lt;/a&gt;
said that “A good ‘team player’ is by definition a ‘positive person.’
He or she smiles frequently, does not complain, is not overly critical,
and gracefully submits to whatever the boss demands.” Enough said.&lt;/p&gt;

&lt;h2 id=&quot;it-is-shallow&quot;&gt;It is Shallow&lt;/h2&gt;

&lt;p&gt;You will be surprised how
&lt;a href=&quot;https://www.cbsnews.com/news/how-americans-look-to-the-rest-of-the-world/&quot;&gt;cheerful, friendly and willing to communicate&lt;/a&gt;
Americans are, when you meet them as
a stranger. In a grocery store, a gym, a cafe, on the street, they will
smile and look very open. However, very soon you will realize that it’s mostly
fake. It’s just part of their routine—be nice and walk away. You may even
become friends with them, but you will hardly ever know what they really think.
There will always be a fairly formal style of communication. Even between
you and your partner.&lt;/p&gt;

&lt;p&gt;Why is this? Are they hiding something? Is it because I’m a foreigner? Are they
afraid of me? I asked myself this for years. The answer I found is that they
don’t have too much inside, in the way we Russians understand “inside.” They
are much less complicated people, which, on the bright side,
makes them stronger. Because they worry about more practical things and don’t
think too much.&lt;/p&gt;

&lt;p&gt;I once asked an American girlfriend what the meaning of life is. She said that
it was only the second time in her life that she had heard the phrase “the meaning of life.”
She was thirty-two.&lt;/p&gt;

&lt;h2 id=&quot;it-is-dangerous&quot;&gt;It is Dangerous&lt;/h2&gt;

&lt;p&gt;Have you ever seen a junkie shooting up right on a sidewalk next to your office?
Did you ever hear gunshots while sitting at home watching TV? Have you seen a homeless
couple fighting right in front of a grocery store? Have you been offered “coca” while
walking with a girlfriend to a restaurant? All of that happened to me in
San Francisco, which is not the
&lt;a href=&quot;https://www.statista.com/statistics/217685/most-dangerous-cities-in-north-america-by-crime-rate/&quot;&gt;most criminal&lt;/a&gt;
city in not the
&lt;a href=&quot;https://www.statista.com/statistics/200445/reported-violent-crime-rate-in-the-us-states/&quot;&gt;most criminal&lt;/a&gt;
state.&lt;/p&gt;

&lt;p&gt;There is a permanent feel of danger, and the police, who look and sound
very aggressive, don’t really help. They are armed and seem to be constantly
on the alert, which is most probably what they need in order to fight crime,
but a law-abiding citizen doesn’t feel safe at all. When you hear their sirens
you immediately want to raise your hands. I guess this is how they want us to feel.&lt;/p&gt;

&lt;h2 id=&quot;it-is-expensive&quot;&gt;It is Expensive&lt;/h2&gt;

&lt;p&gt;I was once renting a room in Palo Alto, with a shared bathroom, no kitchen,
a no-guests policy, and a small closet, which I had to share with a son
of the house owner, who was temporarily on vacation. I was paying $2,400 per month.
To rent a decent apartment in downtown, you have to 1) prove that you have
a stable job, 2) sign an unbreakable lease for a year
(you pay for the entire year even if you leave earlier), 3) bring your own furniture,
and 4) pay something like $4K per month. The quality of it will be way
below your expectations (see the “distasteful” point above). If you want
something really good and modern, get yourself ready for $8K+ numbers. You can verify
the numbers at &lt;a href=&quot;https://www.zillow.com/palo-alto-ca-94301/rentals/&quot;&gt;Zillow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On top of that, the food is expensive, unless you don’t care what you eat. If you
do, &lt;a href=&quot;https://eu.wholefoodsmarket.com/&quot;&gt;Whole Foods&lt;/a&gt; is your grocery store, which has the reputation of
a &lt;a href=&quot;https://www.sfgate.com/business/article/Whole-Foods-whole-paycheck-Amazon-Jeff-Bezos-13181055.php&quot;&gt;whole paycheck&lt;/a&gt;
place, where you basically are supposed to leave your entire monthly salary.
Check their &lt;a href=&quot;https://www.wholefoodsmarket.com/shop/PAL/3173&quot;&gt;prices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Going out to a decent restaurant will cost you around $100, for two. For example,
see the menu at &lt;a href=&quot;https://tamarinerestaurant.com/&quot;&gt;Tamarine&lt;/a&gt; and
&lt;a href=&quot;http://www.joya.com/menus.html&quot;&gt;JOYA&lt;/a&gt;. A cup of coffee or tea at
&lt;a href=&quot;https://www.starbucks.com/&quot;&gt;Starbucks&lt;/a&gt; or &lt;a href=&quot;https://www.peets.com/&quot;&gt;Peet’s&lt;/a&gt; will
go for $4-5.&lt;/p&gt;

&lt;h2 id=&quot;it-is-boring&quot;&gt;It is Boring&lt;/h2&gt;

&lt;p&gt;You basically have nothing to do there, aside from work. “Staying home with
your family” is probably what most Americans are trained to do in their
spare time. If you don’t have a family, you will be bored to death. Maybe
it’s just me, or &lt;a href=&quot;https://www.quora.com/Why-is-America-so-boring-to-live-in&quot;&gt;maybe not&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;it-is-conservative&quot;&gt;It is Conservative&lt;/h2&gt;

&lt;p&gt;In many aspects. For example, they still prefer phone calls over emails, and
emails over messengers. I can’t really remember the last time I
called someone, except taxi drivers and delivery guys. Everybody else I text
in WhatsApp or Telegram. Also, the majority of my emails are notifications,
spam, … or from American clients, partners, and friends.&lt;/p&gt;

&lt;p&gt;On top of that they prefer to schedule their calls. You can’t just pick up the
phone and call. First they send an email, “How about a phone call next Wednesday at 11am?”
Then you confirm and put that call into your calendar. When they eventually call you they
introduce themselves for five minutes, and ask how you like the weather at the
moment. And then finally, they tell you that they will send you the contract draft by email.
I sometimes feel like a sociopath, but I just really can’t understand what the
call was for.&lt;/p&gt;

&lt;p&gt;I can’t understand how in such a conservative environment new technologies
and business ideas are able to show up and grow, like Airbnb, Uber, Tesla,
or … WhatsApp. Do you have an answer?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">Silicon Valley is a great place to be … or maybe not. I’ve spent five years there, from 2011 till 2016. I did enjoy some parts of it, but others were not enjoyable at all. Here is a quick summary of what’s wrong with this territory. I can’t speak about the rest of the United States since, even though I’ve seen some other places, I’ve never lived there for more than a month. Long story short, the territory between San Francisco and San Jose, also known as Silicon Valley, is not the thing you see in the famous TV Series. It is absolutely different…</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/12/american-beauty.jpg" /></entry><entry><title type="html">Unit Testing Anti-Patterns, Full List</title><link href="https://www.yegor256.com/2018/12/11/unit-testing-anti-patterns.html" rel="alternate" type="text/html" title="Unit Testing Anti-Patterns, Full List" /><published>2018-12-11T00:00:00+00:00</published><updated>2018-12-11T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/12/11/unit-testing-anti-patterns</id><content type="html" xml:base="https://www.yegor256.com/2018/12/11/unit-testing-anti-patterns.html">&lt;p&gt;I wrote some time ago about &lt;a href=&quot;/2014/09/10/anti-patterns-in-oop.html&quot;&gt;anti-patterns in OOP&lt;/a&gt;.
Now it’s time to write about unit testing anti-patterns—because they also exist, and there are many.
I will try to include every example I know in this list. If you know any
others, please add them via a &lt;a href=&quot;https://github.com/yegor256/blog&quot;&gt;pull request&lt;/a&gt; or
post a comment below. For each anti-pattern I will try to mention where it
was found, if it’s not mine. Keep in mind that if I found it somewhere, that doesn’t necessarily mean it
was invented there. If you spot an error, please comment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Breaking Bad (2010) by Vince Gilligan&quot; src=&quot;/images/2018/12/breaking-bad.jpg&quot; longdesc=&quot;#5cbba42c&quot; /&gt;&lt;figcaption id=&quot;5cbba42c&quot;&gt;Breaking Bad (2010) by Vince Gilligan&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Cuckoo&lt;/strong&gt;&lt;sup&gt;1&lt;/sup&gt; (aka Stranger&lt;sup&gt;3&lt;/sup&gt;).
This is a test method that sits in the same unit test but doesn’t really belong there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test-per-Method&lt;/strong&gt;&lt;sup&gt;1&lt;/sup&gt;.
Although a one-to-one relationship between test and production classes is
a reasonable starting point, a one-to-one relationship between test
and production method is almost always a bad idea.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anal Probe&lt;/strong&gt;&lt;sup&gt;2&lt;/sup&gt;.
A test that has to use unhealthy ways to perform its task, such as
reading private fields using reflection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conjoined Twins&lt;/strong&gt;&lt;sup&gt;2&lt;/sup&gt;.
Tests that are called unit tests but are really integration tests
since there is no isolation between the system-under-test and the
tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Path&lt;/strong&gt; (aka Success Against All Odds&lt;sup&gt;3&lt;/sup&gt;, Liar&lt;sup&gt;3&lt;/sup&gt;).
The tests stay on happy paths (i.e. expected results) without testing
for boundaries and exceptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slow Poke&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A unit test that runs incredibly slow. When developers kick it off, they
have time to go to the bathroom, grab a smoke, or worse, kick the test off before
they go home at the end of the day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Giant&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A unit test that, although it is validly testing the object under test,
can span thousands of lines and contain many many test cases. This
can be an indicator that the system-under-test is a God Object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mockery&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
Sometimes mocking can be good, and handy. But sometimes developers can
lose themselves in their effort to mock out what isn’t being tested.
In this case, a unit test contains so many mocks, stubs, and/or fakes that
the system under test isn’t even being tested at all, instead
data returned from mocks is what is being tested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inspector&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A unit test that violates encapsulation in an effort to achieve 100%
code coverage, but knows so much about what is going on in the object
that any attempt to refactor will break the existing test and require
any change to be reflected in the unit test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generous Leftovers&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt; (aka &lt;a href=&quot;https://stackoverflow.com/a/333814/187141&quot;&gt;Chain Gang&lt;/a&gt;,
&lt;a href=&quot;https://stackoverflow.com/a/2150985/187141&quot;&gt;Wet Floor&lt;/a&gt;).
An instance where one unit test creates data that is persisted somewhere,
and another test reuses the data for its own devious purposes. If the
“generator” is ran afterward, or not at all, the test using that
data will outright fail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local Hero&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt; (aka Hidden Dependency, Operating System Evangelist,
&lt;a href=&quot;https://stackoverflow.com/a/339339/187141&quot;&gt;Wait and See&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/339297/187141&quot;&gt;Environmental Vandal&lt;/a&gt;).
A test case that is dependent on something specific to the development environment
it was written on, in order to run. The result is that the test passes
on development boxes, but fails when someone attempts to run it elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nitpicker&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A unit test which compares a complete output when it’s really only interested
in small parts of it, so the test has to continually be kept
in line with otherwise unimportant details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secret Catcher&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A test that at first glance appears to be doing no testing due
to the absence of assertions, but as they say, “the devil is in the details.”
The test is really relying on an exception to be thrown when a mishap
occurs, and is expecting the testing framework to capture the exception
and report it to the user as a failure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dodger&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A unit test which has lots of tests for minor (and presumably easy to test)
side effects, but never tests the core desired behavior. Sometimes you
may find this in database access related tests, where a method is
called, then the test selects from the database and runs assertions against the result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loudmouth&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A unit test (or test suite) that clutters up the console with diagnostic
messages, logging, and other miscellaneous chatter, even when
tests are passing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Greedy Catcher&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A unit test which catches exceptions and swallows the stack trace, sometimes
replacing it with a less informative failure message, but sometimes even just
logging (cf. Loudmouth) and letting the test pass.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sequencer&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt;.
A unit test that depends on items in an unordered list appearing
in the same order during assertions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enumerator&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt; (aka &lt;a href=&quot;https://stackoverflow.com/a/336766/187141&quot;&gt;Test With No Name&lt;/a&gt;).
Unit tests where each test case method name is only an enumeration,
e.g. &lt;code&gt;test1&lt;/code&gt;, &lt;code&gt;test2&lt;/code&gt;, &lt;code&gt;test3&lt;/code&gt;. As a result, the intention of the
test case is unclear, and the only way to be sure is to read
the test case code and pray for clarity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Free Ride&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt; (aka &lt;a href=&quot;https://stackoverflow.com/a/333883/187141&quot;&gt;Piggyback&lt;/a&gt;).
Rather than write a new test case method to test another feature
or functionality, a new assertion rides along in an existing test case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Excessive Setup&lt;/strong&gt;&lt;sup&gt;3&lt;/sup&gt; (aka &lt;a href=&quot;https://stackoverflow.com/a/333909/187141&quot;&gt;Mother Hen&lt;/a&gt;).
A test that requires a lot of work to set up in order to even begin testing.
Sometimes several hundred lines of code are used to setup the environment for one test,
with several objects involved, which can make it difficult to really ascertain
what is being tested due to the “noise” of all of the setup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line hitter&lt;/strong&gt;.
At first glance, the tests cover everything and code coverage tools
confirm it with 100%, but in reality the tests merely hit the code,
without doing any output analysis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forty-Foot Pole Test&lt;/strong&gt; (&lt;a href=&quot;https://stackoverflow.com/a/339247/187141&quot;&gt;see&lt;/a&gt;).
Afraid of getting too close to the class they are trying to test, these tests
act at a distance, separated by countless layers of abstraction
and thousands of lines of code from the logic they are checking.&lt;/p&gt;

&lt;p&gt;Useful links:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://amzn.to/2BaAKRB&quot;&gt;&lt;em&gt;Spock: Up and Running&lt;/em&gt;&lt;/a&gt; by Rob Fletcher&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amzn.to/2DpkFc6&quot;&gt;&lt;em&gt;Mastering Software Testing with JUnit 5&lt;/em&gt;&lt;/a&gt; by Boni Garcia&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://archive.is/3acB#selection-119.0-119.17&quot;&gt;&lt;em&gt;TDD Anti-Patterns&lt;/em&gt;&lt;/a&gt; by James Carr&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">I wrote some time ago about anti-patterns in OOP. Now it’s time to write about unit testing anti-patterns—because they also exist, and there are many. I will try to include every example I know in this list. If you know any others, please add them via a pull request or post a comment below. For each anti-pattern I will try to mention where it was found, if it’s not mine. Keep in mind that if I found it somewhere, that doesn’t necessarily mean it was invented there. If you spot an error, please comment.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/12/breaking-bad.jpg" /></entry><entry><title type="html">You Can Do Better</title><link href="https://www.yegor256.com/2018/11/27/you-can-do-better.html" rel="alternate" type="text/html" title="You Can Do Better" /><published>2018-11-27T00:00:00+00:00</published><updated>2018-11-27T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/11/27/you-can-do-better</id><content type="html" xml:base="https://www.yegor256.com/2018/11/27/you-can-do-better.html">&lt;p&gt;OK, it’s time to publish this piece. I’ve been dancing around it for quite a while,
telling you how to make &lt;a href=&quot;/2014/10/29/how-much-do-you-cost.html&quot;&gt;more per hour&lt;/a&gt;,
how to manage those &lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;stupid managers&lt;/a&gt; that don’t let you grow,
how to &lt;a href=&quot;/2017/01/24/career-advice.html&quot;&gt;boost your career&lt;/a&gt;
and how to deal with &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;office slavery&lt;/a&gt;.
Now here is a simple, plain list of recommendations for you: what you should do
if you want to be a more successful programmer. Not a better algorithm
designer, even though that’s &lt;a href=&quot;/2014/10/26/hacker-vs-programmer-mentality.html&quot;&gt;important&lt;/a&gt;.
Not a funnier &lt;del&gt;clown&lt;/del&gt;
&lt;a href=&quot;/2018/08/29/soft-skills.html&quot;&gt;team player&lt;/a&gt;, even though that’s
also important. But a more successful software engineer, both
&lt;a href=&quot;/2014/09/24/why-monetary-awards-dont-work.html&quot;&gt;financially&lt;/a&gt;
and socially.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Rocky (1976) by John G. Avildsen&quot; src=&quot;/images/2018/11/rocky.jpg&quot; longdesc=&quot;#8288874d&quot; /&gt;&lt;figcaption id=&quot;8288874d&quot;&gt;Rocky (1976) by John G. Avildsen&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There is no particular order here, just everything I have in mind, in one list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Your Own Product&lt;/strong&gt;.
Learning how to program and &lt;em&gt;actually&lt;/em&gt; programming are not the same thing. The best,
and the only right way to learn is “by doing.” The best way of doing is
to create something meaningful and important. If it’s your own product—even
better. If someone pays you for that—best of all. Every time I want
to learn something new I make up a realistic goal and &lt;a href=&quot;/pets.html&quot;&gt;attempt&lt;/a&gt; to achieve it.
A few years ago I was interested in learning Python. Instead of going to online
courses or reading books I tried to create a small web app for my own marketing purposes.
At that time I knew Java, but I wrote that app in Python. My recommendation: never study
anything in an academic way, always do something real using the tech stack you want
to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change Languages&lt;/strong&gt;.
Don’t get stuck with one stack of technologies, no matter how much you love it.
Of course, you don’t want to be a “jack of all trades,” since they are never
paid well. You want to be focused. But “one focus” in life is not enough. I switch
languages every 4-6 years. I started with Pascal, then it was C++, then Java,
then PHP (yes, you heard right, I’m
&lt;a href=&quot;http://www.zend.com/en/yellow-pages/ZEND007965&quot;&gt;ZCE&lt;/a&gt;/&lt;a href=&quot;http://www.zend.com/en/yellow-pages/ZEND007965&quot;&gt;ZFCE&lt;/a&gt;),
then Java again, and now it’s Ruby.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go Full Cycle&lt;/strong&gt;.
Writing code that “works on your laptop” is a great achievement… for a junior
programmer. A senior knows that it’s only a part of the job. The smaller part.
The bigger part is turning your “working” code into a market-ready product,
which means merging and auto-testing, compiling and packaging for multiple platforms,
staging and acceptance testing, bug reporting, metrics collecting, A/B testing,
stress and load testing, deploying to production, and even reporting to investors.
Modern software development life cycle is a giant &lt;del&gt;mess&lt;/del&gt; show.
Do you know how it all works?
You don’t? You don’t care? You are not a senior developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Your Sources&lt;/strong&gt;.
Like I said in my talk &lt;a href=&quot;https://www.youtube.com/watch?v=IGbteQpTNCA&quot;&gt;&lt;em&gt;How Bright Is Your Future?&lt;/em&gt;&lt;/a&gt;
at RigaDevDays, the future of software will almost entirely be open source. The
amount of code that companies keep proprietary is decreasing every year. You have
to be an open source advocate if you want to be successful. If you are still
&lt;a href=&quot;/2015/12/22/why-dont-you-contribute-to-open-source.html&quot;&gt;afraid&lt;/a&gt;,
or don’t have time, &lt;a href=&quot;/2017/05/30/why-contribute-to-open-source.html&quot;&gt;reconsider&lt;/a&gt;.
Writing code for yourself and your office buddies, and writing it for a few
thousand anonymous GitHub hooligans, are two very different stories. You will
need time to get up to speed in this wild territory. It took me over three years.
Don’t wait, start now.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;I truly believe that a professional programmer spends more time creating automated tests than writing production code.
&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Test Everything&lt;/strong&gt;.
To be honest, almost everything I’ve learned about software quality, I owe
to the painful hours of &lt;a href=&quot;/2015/07/16/fools-dont-write-unit-tests.html&quot;&gt;writing unit tests&lt;/a&gt;,
mocks, fixtures, stubs, integration
tests, and so on. I truly believe that a professional programmer spends more
time creating automated tests than writing production code. That’s why
I’d recommend you focus on testing if you want to become a better engineer.
Start with the great book &lt;a href=&quot;http://amzn.to/1PBpoDT&quot;&gt;&lt;em&gt;Growing Object-Oriented Software, Guided by Tests&lt;/em&gt;&lt;/a&gt;
by Steve Freeman and Nat Pryce and make yourself &lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;a rule&lt;/a&gt;:
every line of code, that you are at all in doubt about, must be proven by a test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statically Analyze&lt;/strong&gt;.
Well, half of my knowledge about software quality I owe to unit testing. The
other half I owe to static analyzers. I learned much more from
&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt; and &lt;a href=&quot;https://pmd.github.io/&quot;&gt;PMD&lt;/a&gt;
than from all the Java books I’ve ever read. Every new programming language I learn
I start by configuring the strictest static analyzer I can find and then listening
to its complaints. I’d recommend you do the same. Listen to your tools and
&lt;a href=&quot;/2018/01/16/educational-aspect-of-static-analysis.html&quot;&gt;make sure&lt;/a&gt;
your code is 100% compliant with their quality expectations. Don’t just
use them as recommendation providers, but make yourself a rule:
&lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;never commit&lt;/a&gt;
anything that doesn’t fully pass all static analyzers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Humiliate Yourself on StackOverflow&lt;/strong&gt;.
Robert Sheckley &lt;a href=&quot;https://amzn.to/2ToSdws&quot;&gt;said&lt;/a&gt;
that “in order to ask a question you must already know most of the answer.”
Friends, online chats, and office kitchen talks are
great places to find help… for junior programmers. Those people understand you
no matter how stupid your questions are and that is how they spoil you. You don’t
grow while talking to them and getting their help. You degrade. Instead, you should
ask questions where nobody knows you and will only answer if your question is perfectly
formulated and expressed. There are many places, but StackOverflow is the best.
Make sure every question you have goes to StackOverflow first. Then you may share the
link with your buddies. But StackOverflow comes first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Earn Certificates&lt;/strong&gt;.
I’ve got some of them and I’m planning to get more, even though I’m not really
a programmer &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;on a payroll&lt;/a&gt;
and I’m not going to be employed by any enterprise that
cares about badges in
&lt;a href=&quot;https://latexonline.cc/compile?git=https%3A%2F%2Fgithub.com%2Fyegor256%2Fblog&amp;amp;target=_latex%2Fresume-boring.tex&amp;amp;command=pdflatex&amp;amp;trackId=1520166474432&quot;&gt;my CV&lt;/a&gt;.
Still, I want more certificates. Why? Because I learn a lot when I pass them.
Also when I fail (I have done, twice, up to now). There are two things certificates
give you: 1) they help you fill up your knowledge gaps, and 2) they boost your
self-respect (when and if you pass, of course). Make yourself a rule: one
new certificate every year.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go to Job Interviews&lt;/strong&gt;.
“Changing jobs every couple of years used to look bad on a resume. It told
recruiters you can’t hold down a job, can’t get along with colleagues, or
that you’re simply disloyal and can’t commit. That stigma is fast
becoming antiquated. Workers who stay with a company longer than
two years are said to get paid 50% less,” according to
&lt;a href=&quot;https://www.fastcompany.com/3055035/you-should-plan-on-switching-jobs-every-three-years-for-the-rest-of-your-&quot;&gt;Vivian Giang&lt;/a&gt;.
The bottom line is that you must be ready to change jobs, because you will have to, and soon.
If you don’t, you will lose. Regular job interviews are the best way to prepare
yourself. Make it a rule: every three months you go to an interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change Jobs&lt;/strong&gt;.
You will never be a truly senior developer or an architect if you stay with one
company or project for a long time. You have to change jobs. Frequently. I know,
it’s painful for most of us, but this is how we grow. You need new tasks, new
challenges, new technologies, new customers, and new bosses in order to learn
how to survive and become stronger. Ideally, you should become a freelancer
and forget about full-time &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;nine-to-five&lt;/a&gt;
office &lt;del&gt;slavery&lt;/del&gt; employment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read Books&lt;/strong&gt;.
One book per month. How does that sound? Twelve books per year. That’s an easily
achievable goal. However, ask yourself, did you manage to read a dozen books
over the last calendar year? I seriously doubt many of you will answer positively.
Books are important because they are way more formal and “complete” than blog
posts, news articles, or conference presentations. They cover entire topics,
not parts of them. For example, did you read the &lt;a href=&quot;http://amzn.to/2crIfoY&quot;&gt;Git book&lt;/a&gt; ever? Most programmers
I know who use Git never even touched the book. They use Git, but barely understand
what’s under the hood. This is how junior developers behave. Be professional,
read the manual!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Please, remember, how many technical books you&amp;#39;ve read this year? &lt;a href=&quot;https://twitter.com/hashtag/career?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#career&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1069103139972935680?ref_src=twsrc%5Etfw&quot;&gt;December 2, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Follow Key People&lt;/strong&gt;.
I mean Twitter (I’m &lt;a href=&quot;https://twitter.com/yegor256&quot;&gt;@yegor256&lt;/a&gt;),
Facebook (&lt;a href=&quot;https://www.facebook.com/yegor256&quot;&gt;here&lt;/a&gt; I am),
Telegram (&lt;a href=&quot;https://t.me/yegor256news&quot;&gt;my channel&lt;/a&gt;),
Instagram (&lt;a href=&quot;https://instagram.com/yegor256&quot;&gt;click here&lt;/a&gt; to follow me), and, of course,
GitHub (I’m &lt;a href=&quot;https://github.com/yegor256&quot;&gt;@yegor256&lt;/a&gt;). What’s new that you can hear from me?
Probably not so much, but you will get a feeling for what’s going on
in my professional life, where I’m heading, what I read, what I write, etc. Who do I follow?
All authors of all books I like, all bloggers I’ve ever enjoyed reading,
all speakers I liked watching, key public figures and politicians,
no matter whether I agree with them or not. I believe you should do the same, to
stay informed about the trends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lurk&lt;/strong&gt;.
Regularly check &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;,
&lt;a href=&quot;https://en.reddit.com/r/programming/&quot;&gt;/programming&lt;/a&gt; Reddit, and, maybe,
&lt;a href=&quot;https://changelog.com/&quot;&gt;Changelog&lt;/a&gt;. That’s pretty much all you need to read.
A few times a week. Just &lt;del&gt;read&lt;/del&gt; scroll what’s hot and move on.
Will it make you a better programmer? Unlikely. Will it help your career
and your life? Definitely. You never know what’s coming and where the
next opportunity is. I still &lt;a href=&quot;/2017/08/15/bitcoin-pyramid.html&quot;&gt;feel sorry&lt;/a&gt;
about not paying enough attention to
the &lt;a href=&quot;https://news.ycombinator.com/item?id=1532670&quot;&gt;announcement&lt;/a&gt; of Bitcoin
at HN many years ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attend Conferences and Meetups&lt;/strong&gt;.
Ideally, as a speaker. Otherwise, &lt;em&gt;at least once a month&lt;/em&gt; as a listener. Will
you learn something new? I don’t think so. But you will definitely motivate
yourself by meeting the most active and motivated people in the industry,
including speakers and other listeners. Most companies will be ready to
sponsor your tickets. Two big conferences per year will be enough. The rest
of the time attend your local meetups, you can find them
at &lt;a href=&quot;https://www.meetup.com&quot;&gt;meetup.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s pretty much it. Hope this list helps.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html">OK, it’s time to publish this piece. I’ve been dancing around it for quite a while, telling you how to make more per hour, how to manage those stupid managers that don’t let you grow, how to boost your career and how to deal with office slavery. Now here is a simple, plain list of recommendations for you: what you should do if you want to be a more successful programmer. Not a better algorithm designer, even though that’s important. Not a funnier clown team player, even though that’s also important. But a more successful software engineer, both financially and socially.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/11/rocky.jpg" /></entry><entry><title type="html">Tech Journalism Sucks</title><link href="https://www.yegor256.com/2018/11/20/journalism.html" rel="alternate" type="text/html" title="Tech Journalism Sucks" /><published>2018-11-20T00:00:00+00:00</published><updated>2018-11-20T00:00:00+00:00</updated><id>https://www.yegor256.com/2018/11/20/journalism</id><content type="html" xml:base="https://www.yegor256.com/2018/11/20/journalism.html">&lt;p&gt;This July, just four months ago,
I submitted an article to &lt;a href=&quot;http://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt;, a
popular online tech magazine. In the article I
suggested that in order to improve our projects we must not make programmers worry
about the quality of code they write, but instead let them focus mostly
on the speed of delivery. The quality, I argued in the
article, must be the concern of the delivery pipeline. You have most probably
already read the blog posts where I mention this idea, especially this one:
&lt;a href=&quot;/2018/03/06/speed-vs-quality.html&quot;&gt;Don’t Aim for Quality, Aim for Speed&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Wag the Dog (1997) by Barry Levinson&quot; src=&quot;/images/2018/11/wag-the-dog.jpg&quot; longdesc=&quot;#123ce141&quot; /&gt;&lt;figcaption id=&quot;123ce141&quot;&gt;Wag the Dog (1997) by Barry Levinson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I received a response from the InfoQ editor in an email, and I quote:
“The article provides no new insights for our audience, and actually some recommendations
that go against well-known good practices in DevOps.”
I &lt;a href=&quot;https://twitter.com/yegor256/status/1015261994826567680&quot;&gt;tweeted&lt;/a&gt;
about this and Charles Humble, their editor-in-chief, emailed me back.
He said that he still didn’t want to publish my piece, because
“both people who reviewed it are experienced DevOps practitioners,
and felt strongly that, although the ideas presented were interesting,
it wasn’t something that would generalize well or work well for more mature teams.”&lt;/p&gt;

&lt;p&gt;Two people decided that my point of view was wrong and that’s why the entire
audience must not hear it! They know better what “works well for more mature teams.”
Pay attention: they didn’t say anything about
the quality of my article, about the way I structured my arguments, about the
consistency of the logic in it. They totally got what I wanted to say, but they
disagreed. My opinion didn’t go along with theirs. And so—no platform for the guy.&lt;/p&gt;

&lt;p&gt;You know what happened next? I sent my piece, without any changes, to Gerard Holzmann,
one of the editors of &lt;a href=&quot;https://publications.computer.org/software-magazine/&quot;&gt;IEEE Software&lt;/a&gt;.
You know what he said? I quote:
“I like your analogy of a wall, but when I reflect on it I believe it is
really no more than the standard check-in and commit process that most
organizations use. So I’m sorry that we can’t use it.”
See? The InfoQ guys thought that it’s a practice that nobody would use, while
the IEEE Software editor thinks that it’s something everybody is already using.&lt;/p&gt;

&lt;p&gt;Ironic, huh?&lt;/p&gt;

&lt;p&gt;Finally, I submitted that very same article to the blog section of the Communications of the ACM
and it was &lt;a href=&quot;https://cacm.acm.org/blogs/blog-cacm/229942-blame-free-quality-control/fulltext&quot;&gt;published&lt;/a&gt; there,
maybe thanks to the objectivity of Lawrence Fisher, their editor.
I also submitted it to a number of software conferences, where it was also accepted,
including &lt;a href=&quot;https://youtu.be/55mwAbuDrV8&quot;&gt;Joker 2018&lt;/a&gt; in St. Petersburg, Russia
(it was the 3rd most liked speech, according to the votes of 400+ attendees).&lt;/p&gt;

&lt;p&gt;Here comes my point.&lt;/p&gt;

&lt;p&gt;Tech journalism sucks.&lt;/p&gt;

&lt;p&gt;If you want to be published, say what everybody else is saying. Or else say something
very new. I don’t really know. What will I do from now on? I will keep sending my
articles to many places. I’ve even created a list of journalists (over 200 magazines)
and I &lt;del&gt;spam&lt;/del&gt; send them my articles via &lt;a href=&quot;/2018/10/30/mailanes.html&quot;&gt;Mailanes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It seems they don’t deserve a better attitude.&lt;/p&gt;

&lt;p&gt;Sadly.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">This July, just four months ago, I submitted an article to InfoQ, a popular online tech magazine. In the article I suggested that in order to improve our projects we must not make programmers worry about the quality of code they write, but instead let them focus mostly on the speed of delivery. The quality, I argued in the article, must be the concern of the delivery pipeline. You have most probably already read the blog posts where I mention this idea, especially this one: Don’t Aim for Quality, Aim for Speed.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2018/11/wag-the-dog.jpg" /></entry></feed>