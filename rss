<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2019-06-11T06:45:11+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Where Do You Seek Help First?</title><link href="https://www.yegor256.com/2019/06/11/where-do-you-seek-help.html" rel="alternate" type="text/html" title="Where Do You Seek Help First?" /><published>2019-06-11T00:00:00+00:00</published><updated>2019-06-11T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/06/11/where-do-you-seek-help</id><content type="html" xml:base="https://www.yegor256.com/2019/06/11/where-do-you-seek-help.html">&lt;p&gt;Just a few days ago a friend of mine, who is not a developer but a
co-founder of a software startup, asked me to help his programmers with
a technical problem they got stuck with. I said “Why not?” and asked
them what was going on. They told me that their PostgreSQL server was running
slow because it was doing this and that, and when they restarted it
it was repeating this and that… Long story short, I had no idea what they were talking about,
even though I was a user of PostgreSQL for many years. My first reaction was:
“Have you posted a question on StackOverflow yet?” They answered:
“We still &lt;em&gt;hope&lt;/em&gt; that that won’t be necessary.” I replied, surprised: “Huh?”&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Tribe (2014) by Myroslav Slaboshpytskyi&quot; src=&quot;/images/2019/06/the-tribe.jpg&quot; longdesc=&quot;#80dd8b8a&quot; /&gt;&lt;figcaption id=&quot;80dd8b8a&quot;&gt;The Tribe (2014) by Myroslav Slaboshpytskyi&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Why was &lt;a href=&quot;https://stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt; their last resort? They didn’t explain, but I believe
I know the answer: they would feel ashamed. For them StackOverflow is a place
for losers who can’t solve problems by themselves. It is a place
for those who are not worth the money their &lt;del&gt;owners&lt;/del&gt; bosses pay
them. It is a place where lazy programmers ask questions and expect answers
instead of working hard in their offices and resolving everything on their own.&lt;/p&gt;

&lt;p&gt;This is the mentality of a &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;slave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the mentality of someone who is paid
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;for the time&lt;/a&gt; they spend in the office
or in front of the computer, not for the results they deliver. It is only logical
that if they are paid for &lt;em&gt;being programmers&lt;/em&gt;, seeking help at StackOverflow
is a declaration of incompetence. You do it once, you will be excused, you do
it twice, your boss will &lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;start wondering&lt;/a&gt;
whether you are the right resource
to be spending money on. But if you do it regularly—you will
&lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;definitely&lt;/a&gt;
be &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;fired&lt;/a&gt;.
Thus, a good slave doesn’t do that. A good slave does everything
possible to &lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;&lt;em&gt;look&lt;/em&gt;&lt;/a&gt;
busy and competent.&lt;/p&gt;

&lt;p&gt;Are you a slave?&lt;/p&gt;

&lt;p&gt;Now, to the contrary, someone who is paid &lt;a href=&quot;https://www.zerocracy.com&quot;&gt;for the results delivered&lt;/a&gt;
has a completely
&lt;a href=&quot;/2018/04/17/how-to-be-lazy.html&quot;&gt;different&lt;/a&gt; mindset.
Why would StackOverflow be a &lt;em&gt;last resort&lt;/em&gt; for a freelancer,
who is paid for the problems they manage to solve, no matter how much time they
spend on them nor where they seek help? Moreover, the
&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;faster&lt;/a&gt; such a freelancer
can &lt;a href=&quot;/2018/01/23/sociotech-skills.html&quot;&gt;find help&lt;/a&gt;,
the better an engineer he or she is.&lt;/p&gt;

&lt;p&gt;In the story above, my friend had the right mindset. The moment he found
out that his team couldn’t solve the problem, he came to me, and a few other
people. He was not a software developer, that’s why he didn’t know about
StackOverflow. But he was seeking help everywhere &lt;em&gt;around&lt;/em&gt; his team, while
his &lt;del&gt;slaves&lt;/del&gt; programmers were trying to find a solution by themselves.&lt;/p&gt;

&lt;p&gt;Maybe that’s why he is a co-founder and they are his employees?&lt;/p&gt;

&lt;p&gt;Now, here is my short list of places &lt;em&gt;you&lt;/em&gt; should
seek help when you don’t know what to do with your PostgreSQL and you have no time.
The list is ordered. The places where you &lt;em&gt;start&lt;/em&gt; are at the top,
the last resort is at the bottom:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Search in Google&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Post to StackOverflow&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read books&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ask friends&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep trying&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me emphasize again: it depends on who you are. If you are a slave on
a payroll and feel happy about that, you should not listen to the advice in this
blog post. It will only ruin your &lt;a href=&quot;/2017/01/24/career-advice.html&quot;&gt;career&lt;/a&gt;.
However, if you are a freelancer, stop being embarrassed for not knowing something!&lt;/p&gt;

&lt;p&gt;Your job is &lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;not&lt;/a&gt;
&lt;em&gt;to know&lt;/em&gt; or &lt;em&gt;to be smart&lt;/em&gt;. Your jobs is to find solutions
and fix problems. How you do that is your &lt;em&gt;own business&lt;/em&gt;. It’s not the
business of your boss, your &lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project manager&lt;/a&gt;,
or your product owner.&lt;/p&gt;

&lt;p&gt;Each &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;(micro-)task&lt;/a&gt;
you resolve has a &lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;budget&lt;/a&gt;
and you are &lt;a href=&quot;/2014/04/15/definition-of-done.html&quot;&gt;fully responsible&lt;/a&gt; for
it while it is assigned to you. You solve it the way &lt;em&gt;you&lt;/em&gt; want it to be solved.&lt;/p&gt;

&lt;p&gt;Don’t be ashamed of asking for help, just like my friend was not ashamed
of telling me that his team couldn’t fix the PostgreSQL issue. He was thinking
about his business results, not about what I would think about him and his
team. He didn’t care about that. He needed the bloody PostgreSQL to work!&lt;/p&gt;

&lt;p&gt;Do the same. Be a business man, not a slave.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Just a few days ago a friend of mine, who is not a developer but a co-founder of a software startup, asked me to help his programmers with a technical problem they got stuck with. I said “Why not?” and asked them what was going on. They told me that their PostgreSQL server was running slow because it was doing this and that, and when they restarted it it was repeating this and that… Long story short, I had no idea what they were talking about, even though I was a user of PostgreSQL for many years. My first reaction was: “Have you posted a question on StackOverflow yet?” They answered: “We still hope that that won’t be necessary.” I replied, surprised: “Huh?”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/06/the-tribe.jpg" /></entry><entry><title type="html">Trust Them to Get the Job Done, Not!</title><link href="https://www.yegor256.com/2019/05/28/trust-or-not.html" rel="alternate" type="text/html" title="Trust Them to Get the Job Done, Not!" /><published>2019-05-28T00:00:00+00:00</published><updated>2019-05-28T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/05/28/trust-or-not</id><content type="html" xml:base="https://www.yegor256.com/2019/05/28/trust-or-not.html">&lt;p&gt;There are &lt;a href=&quot;/2016/07/11/mistakes-in-agile-manifesto.html&quot;&gt;twelve&lt;/a&gt;
principles in the &lt;a href=&quot;http://agilemanifesto.org/principles.html&quot;&gt;Agile Manifesto&lt;/a&gt;.
The fifth one says: “Build projects around motivated individuals.
Give them the environment and support they need,
and trust them to get the job done.”
I disagree. Strongly. This formula suggests treating people in a binary way: they
are either motivated and trusted or … what? They have to be let go?
This mindset is very typical, according to my observations, and leads
to &lt;a href=&quot;/2017/11/21/trust-pay-lose.html&quot;&gt;poor management&lt;/a&gt; and project failures.
Instead, our people management must be more &lt;em&gt;iterative&lt;/em&gt; and much less &lt;em&gt;rigid&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Metro Manila (2013) by Sean Ellis&quot; src=&quot;/images/2019/05/metro-manila.jpg&quot; longdesc=&quot;#14b89672&quot; /&gt;&lt;figcaption id=&quot;14b89672&quot;&gt;Metro Manila (2013) by Sean Ellis&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Just a few days ago I posted a &lt;a href=&quot;https://www.instagram.com/p/Bx6gJAngsT5/&quot;&gt;quote&lt;/a&gt; from
&lt;a href=&quot;/code-ahead.html&quot;&gt;&lt;em&gt;Code Ahead&lt;/em&gt;&lt;/a&gt;, my recent book about
software engineering, on Instagram. I’ve got an interesting and very typical
response from one of my readers (polished a bit):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why should I get punished in the first place;
  if my mistake is unforgiven they should fire me, and I believe this
  is less humiliating than getting punished and then staying with them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what I hear almost always when I start talking about rewards and
punishment in a software team. I hear that it is &lt;em&gt;humiliating&lt;/em&gt; and
programmers should &lt;em&gt;never&lt;/em&gt; be punished. Instead, as &lt;a href=&quot;https://www.instagram.com/samir.bouazza.2017/&quot;&gt;Samir&lt;/a&gt;
suggested, they should be fired when they make
an &lt;em&gt;unforgiven&lt;/em&gt; mistake. Thus, we either trust them 100% or, when a mistake
happens, we … fire the bloody bastard, he was useless anyway!&lt;/p&gt;

&lt;p&gt;Well, maybe this is part of human nature: First we love, then we hate, and
&lt;a href=&quot;https://drhurd.com/2018/04/29/stronger-love-stronger-hate/&quot;&gt;the stronger we love, the stronger we hate&lt;/a&gt;.
But what do these emotions have to do with professional
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project management&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://en.wikipedia.org/wiki/W._Edwards_Deming&quot;&gt;William Edwards Deming&lt;/a&gt;
suggested many years ago, good management is always about a simple
&lt;a href=&quot;https://en.wikipedia.org/wiki/PDCA&quot;&gt;Plan-Do-Check-Act&lt;/a&gt; cycle.
No matter what and who we manage, we have to &lt;em&gt;plan&lt;/em&gt; first,
let ourselves and our people &lt;em&gt;do&lt;/em&gt; the work, then &lt;em&gt;check&lt;/em&gt; what the results look like, comparing
them with our plans, and finally &lt;em&gt;act&lt;/em&gt; according to the findings, correcting
the plans. Then, we go back to the planning part and the cycle starts
over again:&lt;/p&gt;

&lt;figure class=&quot;unprintable&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/4/42/PDCA-Multi-Loop.png&quot; itemprop=&quot;image&quot; style=&quot;width:600px;max-width:100%;&quot; alt=&quot;The figure&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;We all know that this is how software has to be developed. Many years ago
we all realized that a &lt;a href=&quot;https://en.wikipedia.org/wiki/Waterfall_model&quot;&gt;Waterfall model&lt;/a&gt;,
where everything was planned upfront
and then implemented according to the plans, which didn’t change during the
course of the project, was a bad idea. A much better idea is to deliver
the software &lt;a href=&quot;https://en.wikipedia.org/wiki/Incremental_build_model&quot;&gt;incrementally&lt;/a&gt;,
making changes to the plans and specifications
after each iteration. This &lt;a href=&quot;https://en.wikipedia.org/wiki/Iterative_and_incremental_development&quot;&gt;guarantees&lt;/a&gt;
higher quality, faster reaction to mistakes,
and a much better predictability. It’s obvious, right?&lt;/p&gt;

&lt;p&gt;Why don’t we do the same with people? Why do we motivate them upfront
and then trust them … until they turn out to be completely &lt;em&gt;untrustworthy&lt;/em&gt;?
Can’t we regularly check
how they are performing and correct our &lt;em&gt;trust&lt;/em&gt; accordingly? Why are they
either “great” for us or “useless”? Why can’t we grade them after each
iteration, according to both mistakes &lt;em&gt;and&lt;/em&gt; achievements they make?&lt;/p&gt;

&lt;p&gt;Let’s see how the formula that Agile suggests can be applied to the
PDCA continuum:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Plan: Find individuals and motivate them&lt;/li&gt;
  &lt;li&gt;Do: Trust them and they get the job done&lt;/li&gt;
  &lt;li&gt;Check: —&lt;/li&gt;
  &lt;li&gt;Act: —&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems that two important pieces are missing. We don’t check whether
we can still trust them, whether they are still motivated, whether they are
interested in getting the job done, and whether it’s time to
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;replace&lt;/a&gt;
some of them.&lt;/p&gt;

&lt;p&gt;Why so? What are we afraid of?&lt;/p&gt;

&lt;p&gt;Moreover, why do programmers find it humiliating when their results are being
regularly checked, leading to micro rewards and penalties, while at the same
time they find it totally OK to be fired for a single “unforgiven” mistake?&lt;/p&gt;

&lt;p&gt;I have an answer.&lt;/p&gt;

&lt;p&gt;Because their managers are &lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;weak and stupid&lt;/a&gt;,
in most cases. They simply
don’t know how to reward and penalize programmers incrementally. They don’t
know how to measure the progress of people, incrementally. Their control instruments
are based on guilt and fear: They put programmers together,
&lt;del&gt;brainwash&lt;/del&gt; &lt;a href=&quot;/2016/12/06/how-to-pay-programmers-less.html&quot;&gt;motivate&lt;/a&gt;
them, and then make them scared of making an unforgivable mistake.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=KPbKqTXfZwA&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/KPbKqTXfZwA/mqdefault.jpg&quot; alt=&quot;YouTube video #KPbKqTXfZwA&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M89: Deliver your trust continuously, not discrete;
        29 May 2019.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;What exactly that mistake is, nobody really knows—it’s
a personal decision of a manager. It could be a broken unit test,
a missed &lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meeting&lt;/a&gt;,
a rude email, or drinking in the office. The scale is
very wide and at which point the programmer will be fired, nobody
knows either. Even the manager can’t explain it. The decision in most cases is
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;emotional and personal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You know that a very typical mistake in scope management is treating
large tasks with the 0/100 completeness rule: they are either “not even started”
or “fully complete,” and nothing in the middle. You can do that with
&lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;small tasks&lt;/a&gt;,
but never with large ones, because it will lead to lack of control
and much higher risk of more expensive failures. You must break your scope
into smaller pieces and then apply the 0/100 rule.&lt;/p&gt;

&lt;p&gt;The same is true about people. You can’t &lt;a href=&quot;/2017/11/21/trust-pay-lose.html&quot;&gt;trust&lt;/a&gt;
them 0/100: either you trust
them fully or you fire them. This is too risky. You have to &lt;em&gt;decompose&lt;/em&gt;
their trustworthiness and their motivation into smaller pieces and deliver your
satisfaction and frustration incrementally. How do you do that? Via
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;micro-bonuses&lt;/a&gt; and
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;micro-penalties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How else?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="agile" /><summary type="html">There are twelve principles in the Agile Manifesto. The fifth one says: “Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.” I disagree. Strongly. This formula suggests treating people in a binary way: they are either motivated and trusted or … what? They have to be let go? This mindset is very typical, according to my observations, and leads to poor management and project failures. Instead, our people management must be more iterative and much less rigid.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/05/metro-manila.jpg" /></entry><entry><title type="html">Please, Don’t Improvise</title><link href="https://www.yegor256.com/2019/05/21/dont-improvise.html" rel="alternate" type="text/html" title="Please, Don't Improvise" /><published>2019-05-21T00:00:00+00:00</published><updated>2019-05-21T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/05/21/dont-improvise</id><content type="html" xml:base="https://www.yegor256.com/2019/05/21/dont-improvise.html">&lt;p&gt;We all know what happens when a programmer decides how a web site
or a mobile app should look. It ends up looking ugly. And why is that? I don’t know exactly,
but my best bet is on the &lt;a href=&quot;https://www.linkedin.com/pulse/left-brain-vs-right-brain-developers-warren-gwartney/&quot;&gt;left-brained nature&lt;/a&gt;
of programmers, who mostly are rigid and logical mathematicians. UI design, to the contrary,
requires creativity and intuition, which reside in the right side of our brain.
Some &lt;a href=&quot;https://www.fastcompany.com/3029364/this-is-your-brain-on-code-according-to-functional-mri-imaging&quot;&gt;recent studies&lt;/a&gt;
are skeptical about that, but my personal experience tells me that you should never expect
a programmer to make a user interface right.
Moreover, &lt;em&gt;I’m&lt;/em&gt; one of those programmers: No matter what I draw, it’s either
&lt;a href=&quot;/paintings.html&quot;&gt;black-and-white&lt;/a&gt;, or ugly.
But I still have to design my &lt;a href=&quot;/pets.html&quot;&gt;pet projects&lt;/a&gt;.
Here is a list of the top lessons I learned for myself, which help me survive
with my left-sided brain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Big Eyes (2014) by Tim Burton&quot; src=&quot;/images/2019/05/big-eyes.jpg&quot; longdesc=&quot;#b71ede0a&quot; /&gt;&lt;figcaption id=&quot;b71ede0a&quot;&gt;Big Eyes (2014) by Tim Burton&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Leaders&lt;/strong&gt;.
I look at the things that big and famous companies are doing. I check the websites
I’m using every day to see what is “good” in modern web design:
&lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow&lt;/a&gt;,
&lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;,
&lt;a href=&quot;https://www.apple.com&quot;&gt;apple&lt;/a&gt;,
&lt;a href=&quot;https://www.amazon.com&quot;&gt;amazon&lt;/a&gt;,
&lt;a href=&quot;https://www.craigslist.org/&quot;&gt;craigslist&lt;/a&gt; (no kidding), etc.
I actually pay attention to fewer than ten websites.
They make buttons flat? I make them flat. They make fonts larger? I make
fonts larger. They make the background white, I make it white too.
I just copy them. They know better anyway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frameworks&lt;/strong&gt;.
There are &lt;a href=&quot;https://github.com/troxler/awesome-css-frameworks&quot;&gt;many&lt;/a&gt; of them for
the web. I tend to pick the simplest one and use it. Well, I even created my own one
a few years ago: &lt;a href=&quot;/2015/04/13/tacit-css-framework-for-dummies.html&quot;&gt;&lt;em&gt;Tacit, a CSS Framework Without Classes&lt;/em&gt;&lt;/a&gt;.
I always try to “design” as little as possible and follow the
conventions forced by the framework’s authors. If they want me to have my
buttons blue, they will be blue. I don’t try to be creative but just follow
the rules of the frameworks I use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defaults&lt;/strong&gt;.
There is always a big temptation to align the content “nicely,”
centering it or placing it in some multi-column grids. I try not to do
that, despite the temptation. I just don’t know how to do it right,
which is why the content “flows” from the top to the bottom, element
by element, aligned &lt;em&gt;left&lt;/em&gt;. Well, unless it’s a set of tabular data.
Sometimes there is also a temptation to add or remove spacing between
elements, either via an extra &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; or a &lt;code&gt;margin&lt;/code&gt;. I don’t do this.
The elements will be placed the way my framework places them by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colors&lt;/strong&gt;.
Choosing the right colors is a huge problem for me—I don’t know how to do that right.
I don’t know which red matches which green. That’s why I use
&lt;a href=&quot;https://coolors.co/app&quot;&gt;Coolors&lt;/a&gt;. I just click “space” multiple times and they
offer me a combination of five colors, which match each
other. I find the most attractive combination and call it a day. Five colors
are always enough for any web app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bold, Italic, Underscore, and All Caps&lt;/strong&gt;.
It’s simple—don’t use them. Never. Well,
&lt;a href=&quot;https://practicaltypography.com/bold-or-italic.html&quot;&gt;as little as possible&lt;/a&gt;.
You definitely shouldn’t use them in order to make a visual element more visible. You’ve got
fonts for that. If you want your caption to catch the eye, make the
font larger. But don’t use italic, bold, or, God forbid, all caps. I use
them sometimes, very rarely, but only in order to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Emphasis_%28typography%29&quot;&gt;emphasize&lt;/a&gt;
a word in a sentence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fonts&lt;/strong&gt;.
I try to stick to defaults, which are
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serif&quot;&gt;Serif&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sans-serif&quot;&gt;Sans-serif&lt;/a&gt;,
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monospaced_font&quot;&gt;Monospace&lt;/a&gt;.
If I can’t, I use &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;,
but very carefully. Of course, I use one font per system.
Do I know which two fonts are compatible? I don’t. Do you?
Don’t even try to make that decision right. Just one font and
&lt;a href=&quot;https://www.quora.com/How-many-different-fonts-should-you-use-in-your-website&quot;&gt;that’s it&lt;/a&gt;.
And I always try to make them as large as possible. This seems to be a
&lt;a href=&quot;https://blog.marvelapp.com/body-text-small/&quot;&gt;trend&lt;/a&gt;
now, most probably because screens are getting bigger.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Images&lt;/strong&gt;.
I do everything I can to avoid them, to be honest. I always attempt to
replace them with text or &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Unicode_characters&quot;&gt;Unicode symbols&lt;/a&gt;,
if necessary. When it’s absolutely necessary, I use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;SVG&lt;/a&gt; vector graphics.
PNG/JPEG raster-graphics is my last resort.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Artists&lt;/strong&gt;.
I pay absolutely no attention to what modern web artists are doing.
They create beautiful things, but I don’t even need to know about them.
They only annoy me, because I can’t create anything similar. When someone
shows me a website with new CSS tricks, I close it immediately. This is not for
me. My CSS has to be as &lt;em&gt;short&lt;/em&gt; and &lt;em&gt;primitive&lt;/em&gt; as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compliance&lt;/strong&gt;.
W3C has a number of validators for
&lt;a href=&quot;https://validator.w3.org/&quot;&gt;HTML&lt;/a&gt; and
&lt;a href=&quot;https://jigsaw.w3.org/css-validator/&quot;&gt;CSS&lt;/a&gt;, which can tell what’s
wrong with a website, statically analyzing it. This is similar to what
&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt;
does for our Java code. I rely on their recommendations, always.
Sometimes they sound too strict, but they tell me what the expectations are
of those who know web design way better than I do.  In HTML5,
for example, we are supposed to have &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; in our &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, or the &lt;code&gt;alt&lt;/code&gt; attribute
in all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements. I always try to follow these and other rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive&lt;/strong&gt;.
The design has to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Responsive_web_design&quot;&gt;mobile friendly&lt;/a&gt;.
Always.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To summarize, I would suggest: don’t improvise, don’t try to be
creative, don’t think that you understand what is beautiful and what’s not.
You don’t. Me neither. Just be as &lt;em&gt;minimalistic&lt;/em&gt; and &lt;em&gt;traditional&lt;/em&gt; as possible
and you will do yourself and your users a big favor.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How to make a UI look yummy? &lt;a href=&quot;https://twitter.com/hashtag/graphicdesigning?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#graphicdesigning&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1132522579674173441?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="graphics" /><summary type="html">We all know what happens when a programmer decides how a web site or a mobile app should look. It ends up looking ugly. And why is that? I don’t know exactly, but my best bet is on the left-brained nature of programmers, who mostly are rigid and logical mathematicians. UI design, to the contrary, requires creativity and intuition, which reside in the right side of our brain. Some recent studies are skeptical about that, but my personal experience tells me that you should never expect a programmer to make a user interface right. Moreover, I’m one of those programmers: No matter what I draw, it’s either black-and-white, or ugly. But I still have to design my pet projects. Here is a list of the top lessons I learned for myself, which help me survive with my left-sided brain.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/05/big-eyes.jpg" /></entry><entry><title type="html">0rsk.com: Cause + Risk + Effect</title><link href="https://www.yegor256.com/2019/05/14/cause-risk-effect.html" rel="alternate" type="text/html" title="0rsk.com: Cause + Risk + Effect" /><published>2019-05-14T00:00:00+00:00</published><updated>2019-05-14T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/05/14/cause-risk-effect</id><content type="html" xml:base="https://www.yegor256.com/2019/05/14/cause-risk-effect.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;http://www.0rsk.com&quot;&gt;&lt;img src=&quot;https://www.0rsk.com/logo.svg&quot; style=&quot;width:64px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;“A project manager’s work should not focus on dealing with problems;
it should focus on preventing them,”—this is how
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rita_Mulcahy&quot;&gt;Rita Mulcahy&lt;/a&gt; started
a chapter about Risk Management in her great book
&lt;a href=&quot;http://amzn.to/266pAYB&quot;&gt;&lt;em&gt;PMP Exam Prep&lt;/em&gt;&lt;/a&gt;. Sounds smart, but how does
a project manager know about the problems which are supposed to be
prevented? This is what that chapter and
&lt;a href=&quot;https://amzn.to/2V5b0wp&quot;&gt;&lt;em&gt;Risk Management Tricks of the Trade for Project Managers&lt;/em&gt;&lt;/a&gt;
(yet another great book by the same author) are dedicated to. What I learned
from these books, and from my multi-year &lt;a href=&quot;http://www.technoparkcorp.com/process/risk/risk/&quot;&gt;experience&lt;/a&gt;
of identifying, analyzing and dealing with risks, is that the best
format for specifying them consists of three parts: cause, risk, and effect.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Departed (2006) by Martin Scorsese&quot; src=&quot;/images/2019/05/the-departed.jpg&quot; longdesc=&quot;#93f6e7fe&quot; /&gt;&lt;figcaption id=&quot;93f6e7fe&quot;&gt;The Departed (2006) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s start with a simple example. I developed &lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;Sibit&lt;/a&gt;,
a simple Ruby gem, just &lt;a href=&quot;https://youtu.be/jeflGHMpfDc&quot;&gt;a few weeks ago&lt;/a&gt;,
which is a command line &lt;a href=&quot;https://bitcointalk.org/index.php?topic=5130324&quot;&gt;Bitcoin client&lt;/a&gt;.
You can check your Bitcoin address balance with it, and send a payment to another address, in just
a single command line call. It works just fine, but it does all its operations
via the &lt;a href=&quot;https://www.blockchain.com/api&quot;&gt;Blockchain API&lt;/a&gt; over HTTP.&lt;/p&gt;

&lt;p&gt;This means that if one day the API gets changed, the gem will stop working. It’s
a &lt;em&gt;risk&lt;/em&gt;. It not yet an &lt;em&gt;issue&lt;/em&gt;, since now the API works exactly as the gem expects it
to work, but it’s a very much &lt;em&gt;anticipated&lt;/em&gt; problem. When it happens, the
gem will stop working, its users will not understand why and will simply
stop using it. They will also think of me as the creator of some garbage that
is not maintained well and doesn’t work. Not really good for my reputation, right?&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=WlI6IZ6M7vY&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/WlI6IZ6M7vY/mqdefault.jpg&quot; alt=&quot;YouTube video #WlI6IZ6M7vY&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M74: If your project doesn't have a formal Risk List, you are doing management wrong;
        18 April 2019.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Just like Rita Mulcahy suggested above, I shouldn’t just wait until
a very disappointed user emails me. I should &lt;em&gt;pro-actively&lt;/em&gt; deal with this risk somehow.
How? Well, I can do a few things. First, I can create a few integration tests
to check whether the API still supports the protocol I’m expecting, and
make sure my CI runs the build, say, once a day. Once the build goes
red, I should get an email and react accordingly by fixing the gem before
its users notice the problem. Second, I can manually check the repo every
week, for example, to make sure it’s still in a good shape and works against
the API.&lt;/p&gt;

&lt;p&gt;Now, let’s turn this story into formal risk management. I took the titles
of the subsections below from the
&lt;a href=&quot;https://www.pmi.org/pmbok-guide-standards&quot;&gt;PMBOK&lt;/a&gt;
Risk Management chapter.&lt;/p&gt;

&lt;h2 id=&quot;identify-risks&quot;&gt;Identify Risks&lt;/h2&gt;

&lt;p&gt;First, we &lt;em&gt;identify&lt;/em&gt; the risk. It will consist of &lt;em&gt;three&lt;/em&gt; parts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Cause #1: Sibit works by using the Blockchain API
Risk #1: The API may be changed without notice
Effect #1: Users will be disappointed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;em&gt;cause&lt;/em&gt; is something that we have and which is a fact. The &lt;em&gt;risk&lt;/em&gt; is the
anticipated &lt;em&gt;event&lt;/em&gt;, which may happen or may not. The &lt;em&gt;effect&lt;/em&gt; is
what will happen if the risk occurs. Why do we need to split it in
three parts? Technically, if we put them together, here is how it will sound:
“Since Sibit uses the Blockchain API and the API may be changed without notice
users will be disappointed.” But it’s better to clearly
define cause/risk/effect components, because, guess what … we may
have different combinations of risks, effects and causes.
For example, how about identifying an additional risk for an existing cause:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Risk #2: The API may go out of the market&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s a different risk from the one we had before. The API will not change,
but will disappear entirely from the market. Is it possible? Pretty much.
What will be the effect of this risk? The same—users will be disappointed,
since Sibit, my Ruby gem, will stop working. Maybe there will be some
other effects? Well, let’s think. If the entire API is shut down, I will
have to spend a decent amount of time on finding a new one, studying it,
understanding how it works, and making a lot of changes in my gem in order
to make it understand the new API. I may even fail to do so, if the new API
has a significantly different design. In other words, the effect of
risk #2 will be something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Effect #2: It will take time to connect to a new API&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, the moment the API gets out of the market,
there will be an &lt;em&gt;opportunity&lt;/em&gt; on the market for a similar API. If we know
about it at the right moment of time, we could &lt;em&gt;exploit&lt;/em&gt; that opportunity
and create a similar API for other users, right? Thus, risk #2 has
an additional effect:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Effect #3: There will be an opportunity to create a similar API&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a &lt;em&gt;positive&lt;/em&gt; effect, while the effects we had before were &lt;em&gt;negative&lt;/em&gt; ones.
The job of a project manager is not only to identify negative effects, but
to find a similar amount of positive effects for most risks and causes.&lt;/p&gt;

&lt;p&gt;To summarize, this is what we have now:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1 → E1
   → R2 → E2
        → E3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Get the diagram? The cause &lt;code&gt;C1&lt;/code&gt; leads to the risks &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt;, which have
a number of effects each: &lt;code&gt;E1&lt;/code&gt;, &lt;code&gt;E2&lt;/code&gt;, and &lt;code&gt;E3&lt;/code&gt;. In order to be able to define
such a multi-level diagram and avoid duplication of text
we need to split each anticipated event into three parts.&lt;/p&gt;

&lt;p&gt;There are some rules I learned for myself about those three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Does&lt;/strong&gt;.
The cause should always sound like a statement in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Present_tense&quot;&gt;the present tense&lt;/a&gt;,
since it states a fact that exists right now, e.g.
“we use Hibernate,”
“Java 6 is not supported anymore,”
“70% of our users are on Android,”
“payments are sent via PayPal,”
“GitHub is the sole maintainer of our repository,”
and so on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;May&lt;/strong&gt;.
The Risk statement should use the word “may”,
since it is something that hasn’t happened yet, but is only anticipated, e.g.
“we may lose the customer,”
“the architect may quit,”
“Apple Store may delay in reviewing our app,”
“the investor may pull out,”
etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Will&lt;/strong&gt;.
The Effect should be in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Future_tense&quot;&gt;the future tense&lt;/a&gt;, explicitly
stating the outcome we will experience in the future if the risk occurs, e.g.
“we will go bankrupt,”
“we will have to rewrite the entire module,”
“we will spend another $10,000 for hardware,”
and so on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Needless to say, the shorter the statements the better. A properly
defined cause, risk, and effect should include up to 20 words each. Longer
statements mean only one thing: the author is not clear about what’s going on
and needs to spend more time investigating the situation.&lt;/p&gt;

&lt;h2 id=&quot;qualitative-analysis&quot;&gt;Qualitative Analysis&lt;/h2&gt;

&lt;p&gt;Not all risks and effects are equally likely, as you can see. It is very
unlikely that the entire Blockchain API will die, but it’s very likely
that it may change its HTTP protocol. It would be silly to pay
equal attention to all risks, since some of them are &lt;em&gt;primary&lt;/em&gt;, while
others are &lt;em&gt;secondary&lt;/em&gt;. How do we know which one is which? We assign
numbers. Here is how.&lt;/p&gt;

&lt;p&gt;First, we analyze all risks and assign a &lt;em&gt;probability&lt;/em&gt; to each of them,
where 1 means that the risk will most likely never occur and 9
means that the risk will undoubtedly happen:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1:7 → E1
   → R2:2 → E2
          → E3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I assigned 7 and 2 to the risks above. It was my &lt;em&gt;expert judgment&lt;/em&gt;. No math here.
I just took a look at the risks and made my personal decision,
as an owner/manager of the project.&lt;/p&gt;

&lt;p&gt;Then, we assign an &lt;em&gt;impact&lt;/em&gt; to each effect, again within the &lt;code&gt;[1..9]&lt;/code&gt; range.
Here, 1 means that the consequences we are expecting won’t hurt anyone
and won’t really help anyone either, while 9 means that the effect is crucial
(either in a negative or a positive way):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1:7 → E1↓:3
   → R2:2 → E2↓:8
          → E3↑:3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, I chose the numbers according to my expert judgement. Changing the gem
according to a slightly changed API is one thing (the impact is 3), while
re-writing it for an entirely new API is a completely different amount
of work (hence the impact is 8).&lt;/p&gt;

&lt;p&gt;The final step is to multiply them: probability × impact. We will get this
list of risks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1:7 → E1↓:3 ⇢ 7×3 = 21
C1 → R2:2 → E2↓:8 ⇢ 2×8 = 16
C1 → R2:2 → E3↑:3 ⇢ 2×3 =  6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now see what is what in our list. Even though the consequences of the
second line in the list are more serious, the probability is lower and,
in the overall map of the risks, this line is less important.&lt;/p&gt;

&lt;p&gt;What we just did is called qualitative risk analysis: we determined
which risks are more important and need to be addressed immediately, and
which are less important and can simply be ignored for a while.&lt;/p&gt;

&lt;h2 id=&quot;quantitative-analysis&quot;&gt;Quantitative Analysis&lt;/h2&gt;

&lt;p&gt;I will skip this section. I don’t think it’s important or feasible
for a small software project. According to Rita Mulcahy:
“As a project manager, you should always do qualitative risk analysis
but quantitative risk analysis is not required for all projects or for all
risks and may be skipped in favor of moving on to risk response planning.”&lt;/p&gt;

&lt;h2 id=&quot;plan-risk-responses&quot;&gt;Plan Risk Responses&lt;/h2&gt;

&lt;p&gt;Now it’s time to put my &lt;em&gt;response plans&lt;/em&gt; in place. There are basically
two options for me in each &lt;em&gt;positive&lt;/em&gt; line of my &lt;em&gt;Risk List&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Avoid&lt;/strong&gt;.
I can do something to lower the probability of the risk. Take risk &lt;code&gt;R2&lt;/code&gt;—can
I do something to make sure the Blockchain API stays on the market for
longer and doesn’t die? Well, I can tweet about it, promote it, or maybe
even donate some money to it. But I doubt any of that will really help.
So &lt;em&gt;avoiding&lt;/em&gt; is not the right strategy here. I simply can’t lower the probability, no matter what I do.
If the Risk &lt;code&gt;R2&lt;/code&gt; has to occur, it will occur. The same it true about
the Risk &lt;code&gt;R1&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mitigate&lt;/strong&gt;.
The second possible risk response &lt;em&gt;strategy&lt;/em&gt; is &lt;em&gt;mitigation&lt;/em&gt; of the impact
of the effect. Take a look at the effect &lt;code&gt;E1&lt;/code&gt;. As discussed above, it will
be wise to do two things. First, create integration tests and configure
the CI to send me an email when the API is changed. Second, regularly
check the repo for consistency and minimize the amount of time the repo
will stay out of sync with the API, right after the API is changed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, there are other options like &lt;em&gt;accepting&lt;/em&gt; (do nothing and just wait)
or &lt;em&gt;transferring&lt;/em&gt; (find a scape goat to blame when things go south), but they
are less practical.&lt;/p&gt;

&lt;p&gt;There are two options for a &lt;em&gt;good&lt;/em&gt; risk (E1/R2/E3) too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Exploit&lt;/strong&gt;.
I may do something to expedite the quick death of Blockchain API,
thus making the risk &lt;code&gt;R2&lt;/code&gt; happen faster, right? Well, this may sound
like a joke in this case, but very often we may choose to push things
forward with a positive risk. This strategy is called &lt;em&gt;exploiting&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enhance&lt;/strong&gt;.
I may do something to increase the positive impact of the effect &lt;code&gt;E3&lt;/code&gt;. For
example, I may prepare a similar API and make it market ready. When the
Blockchain API dies, I immediately launch mine and start promoting it
with “Hey, those guys are dead, switch here now!” I’m kidding, but you
get the idea.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, simply put, we can have a plan attached either to a risk or to an effect.
We can either do something with the probability or with the impact. Well, we
can do something with the cause too. For example, I can eliminate the entire
list of risks if I just delete my gem and kill the project, right? There will
be no trouble anymore. No frustrated users, no risks, no opportunities. This
may also be a solution in some cases (though not in this one).&lt;/p&gt;

&lt;p&gt;The bottom line is that a plan may be attached to either a cause, a risk,
or an effect. I would define three plans, all mitigating the impact
of &lt;code&gt;E1&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;P1→E1: Create integration tests (once)
P2→E1: Configure CI (once)
P3→E1: Check the repo for compliance with API (weekly)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first two are one-time actions, which I have to perform ASAP. Once
completed they will lower the impact of &lt;code&gt;E1&lt;/code&gt;. The plan &lt;code&gt;P3&lt;/code&gt; should
be performed every week, in order to lower the impact of &lt;code&gt;E1&lt;/code&gt; too.
Here is how my Risk List looks, together with the plans:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1:7 → E1↓:3 ⇢ 7×3 = 21
  P1, P2, P3
C1 → R2:2 → E2↓:8 ⇢ 2×8 = 16
  No plans
C1 → R2:2 → E3↑:3 ⇢ 2×3 =  6
  No plans&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sense?
I hope so. I definitely recommend you read
&lt;a href=&quot;https://amzn.to/2V5b0wp&quot;&gt;&lt;em&gt;Risk Management Tricks of the Trade for Project Managers&lt;/em&gt;&lt;/a&gt;.
It explains it all in much more detail and it’s fun to read.&lt;/p&gt;

&lt;p&gt;I created a simple web project, which makes it possible to put exactly
this type of risk structure in writing: &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk.com&lt;/a&gt;
(it’s in the &lt;a href=&quot;https://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt; product family, that’s why
the name starts with zero). You just
login there, create a new project, and “add” your risks. Try it out.
Then, when the risks are registered, you attach response plans to them.
The interface is pretty intuitive, so you should have no issues. If there are any
difficulties, don’t hesitate to &lt;a href=&quot;https://github.com/yegor256/0rsk/issues&quot;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implement-risk-responses&quot;&gt;Implement Risk Responses&lt;/h2&gt;

&lt;p&gt;Now it’s time to do what was planned, to &lt;em&gt;implement&lt;/em&gt; the plans. &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; turns
plans into &lt;em&gt;tasks&lt;/em&gt;, when the time comes. The tasks are explicit instructions
for you, the project manager. Then you do them yourself or delegate to your
project members.&lt;/p&gt;

&lt;p&gt;In the near future &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; &lt;a href=&quot;https://github.com/yegor256/0rsk/issues/21&quot;&gt;will integrate&lt;/a&gt;
with GitHub and other task trackers, to drop new tasks there and monitor
their execution. Stay tuned, there will be more features soon.&lt;/p&gt;

&lt;p&gt;There is also a Telegram integration. Every time a new plan has to be executed,
&lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; pings me in Telegram, reminding that it’s time to work on that. Try
it out, the bot is here: &lt;a href=&quot;https://t.me/zerorsk_bot&quot;&gt;@zerorsk_bot&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Honestly, I find this risk-driven way of managing my scope of work very
productive and results focused. First, I identify what the most important
situations are in my project (which could be people, resources, bank accounts,
software products, assets, etc), then I think about risks and I do this regularly,
creating a few new risks every day, together with effects. Then, I plan
what I can do in order to minimize their probabilities and react to their
impacts. Finally, the Telegram bot starts telling me what to do every day.&lt;/p&gt;

&lt;p&gt;Thanks to all of this, I don’t miss the overall scope—it is defined by the
cause-risk-effect-plan structure in my &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; project—and I stay
focused on what matters, every day.&lt;/p&gt;

&lt;p&gt;Now I don’t react to problems, I prevent them, just like Rita Mulcahy suggested.&lt;/p&gt;

&lt;p&gt;You can do too, &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; is free for all.&lt;/p&gt;

&lt;p&gt;P.S. There is a curated list of causes, risks, and effects, where you can
pick your the one most revelant to your case: &lt;a href=&quot;https://github.com/yegor256/awesome-risks&quot;&gt;yegor256/awesome-risks&lt;/a&gt;.
You can even add your ideas there.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">“A project manager’s work should not focus on dealing with problems; it should focus on preventing them,”—this is how Rita Mulcahy started a chapter about Risk Management in her great book PMP Exam Prep. Sounds smart, but how does a project manager know about the problems which are supposed to be prevented? This is what that chapter and Risk Management Tricks of the Trade for Project Managers (yet another great book by the same author) are dedicated to. What I learned from these books, and from my multi-year experience of identifying, analyzing and dealing with risks, is that the best format for specifying them consists of three parts: cause, risk, and effect.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/05/the-departed.jpg" /></entry><entry><title type="html">Sibit Demonstrates How Bitcoin Works</title><link href="https://www.yegor256.com/2019/05/07/sibit-bitcoin-command-line-client.html" rel="alternate" type="text/html" title="Sibit Demonstrates How Bitcoin Works" /><published>2019-05-07T00:00:00+00:00</published><updated>2019-05-07T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/05/07/sibit-bitcoin-command-line-client</id><content type="html" xml:base="https://www.yegor256.com/2019/05/07/sibit-bitcoin-command-line-client.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;&lt;img src=&quot;https://github.com/yegor256/sibit/raw/master/logo.png&quot; style=&quot;width:64px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bitcoin.org&quot;&gt;Bitcoin&lt;/a&gt; was a big technical mystery for me. All the articles I’d read
about it sounded extremely complex and absolutely indigestible. Until
I got stuck with a task: I had to integrate &lt;a href=&quot;https://www.zold.io&quot;&gt;Zold&lt;/a&gt;, our
experimental non-Blockchain cryptocurrency, with Bitcoin. I had to study
the architecture of Bitcoin and I found this short and simple
&lt;a href=&quot;https://www.youtube.com/watch?v=IV9pRBq5A4g&quot;&gt;video&lt;/a&gt; (I highly recommend you
watch it). I managed to implement the integration and understand how
Blockchain works. Here is my short summary. I hope it will be helpful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Invention of Lying (2009) by Ricky Gervais et al.&quot; src=&quot;/images/2019/05/the-invention-of-lying.jpg&quot; longdesc=&quot;#c8bec95b&quot; /&gt;&lt;figcaption id=&quot;c8bec95b&quot;&gt;The Invention of Lying (2009) by Ricky Gervais et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, there is a &lt;a href=&quot;https://en.bitcoin.it/wiki/Private_key&quot;&gt;private key&lt;/a&gt;,
which is a short piece of text, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;c93a36feb31712c390a78b37337cb85d45d3b2f9f6e55108bde32477cbabac5f&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How did I generate it? It’s random. You can generate one too. Install
&lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;Sibit&lt;/a&gt;, my Ruby gem, and run the following
(it’s a command line tool):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ sibit generate
c93a36feb31712c390a78b37337cb85d45d3b2f9f6e55108bde32477cbabac5f&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every time you call &lt;code&gt;sibit generate&lt;/code&gt; you will get a new private key. It is
just a random piece of text (well, a large hex number).
Then, you create an &lt;a href=&quot;https://en.bitcoin.it/wiki/Address&quot;&gt;address&lt;/a&gt;
from your private key. Each private key has exactly one address.
Here is how you create it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ sibit create c93a36feb31712c390a78b37337cb85d45d3b2f9f6e55108bde32477cbabac5f
1K3JgsdRbbUDUgTGo4gvUXUzRZjBse1TYe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You give it to someone who wants to send you a payment. A transaction in Bitcoin is not what
you’re used to thinking about when you imagine a bank transaction. A Bitcoin
&lt;a href=&quot;https://en.bitcoin.it/wiki/Transaction&quot;&gt;transaction&lt;/a&gt;
has a number of &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; addresses. Say, three inputs of 10 BTC each
and two outputs of 25 BTC and 5 BTC. The sum of all inputs must be equal to the
sum of all outputs.&lt;/p&gt;

&lt;p&gt;Thus, in one transaction you can move a lot of digital money between addresses.
You can take a hundred input addresses and send them to another hundred
output addresses. This is what surprised me a bit when I discovered it. The
transactions could be pretty large in size. And the sizes matter. They are
calculated in bytes. A transaction with one input and one output will consume
&lt;a href=&quot;https://bitcoin.stackexchange.com/questions/1195/&quot;&gt;about&lt;/a&gt; 220 bytes.
Keep this number in mind, we will get back to it soon.&lt;/p&gt;

&lt;p&gt;As you can imagine already, in order to calculate how much money you have
&lt;em&gt;on&lt;/em&gt; your address you just go through all the transactions in the entire
database (there are
&lt;a href=&quot;https://www.blockchain.com/en/charts/n-transactions-total&quot;&gt;over 400 million&lt;/a&gt; already)
and see how many transactions had your address as their outputs (your inputs). Then you
deduct any transactions that were your outputs and someone else’s inputs. You get
the balance. There are many public and free web services which can do this
work for you. You don’t need to search the entire database yourself,
just use &lt;a href=&quot;https://www.blockchain.com/api/blockchain_api&quot;&gt;Blockchain API&lt;/a&gt;
(for example) and they will provide you with the information
about any Bitcoin address. Try this address, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ sibit balance 1MUhYhaBqzgpwL1focqJNhTymdXbyky9UY
20000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is in &lt;a href=&quot;https://en.bitcoin.it/wiki/Satoshi_%28unit%29&quot;&gt;satoshi&lt;/a&gt;,
which is 0.2 BTC. Click &lt;a href=&quot;https://www.blockchain.com/btc/address/1MUhYhaBqzgpwL1focqJNhTymdXbyky9UY&quot;&gt;here&lt;/a&gt;
and you will
see the inputs and outputs of this address. There is only one transaction
that mentioned this address. That transaction had a single input and two
outputs. One of its outputs was mine. I got 0.2 bitcoins and they are still
here, since there are no transactions which &lt;em&gt;move&lt;/em&gt; them somewhere else.&lt;/p&gt;

&lt;p&gt;Thus, simply put, the Blockchain database is a large list of transactions
with inputs and outputs in each of them. Once a new transaction gets into
this database, the balance of a few addresses change. The database only
grows and no previous transactions can be deleted or modified. Thus, once
your transaction gets in, the money is moved from address to address.&lt;/p&gt;

&lt;p&gt;To create a transaction you need to know all the input addresses, their private keys,
and all the output addresses. You need multiple inputs if you want to send
an amount that is larger than you have in a single address. There is something
known as a &lt;a href=&quot;https://www.bitcoin.com/bitcoin-wallet-directory&quot;&gt;wallet&lt;/a&gt;
in Bitcoin, which is a piece of software, like &lt;a href=&quot;https://electrum.org/&quot;&gt;Electrum&lt;/a&gt;, which keeps track of all your
addresses and knows how to create a transaction, combining a number of
addresses and using them as inputs. That’s all.&lt;/p&gt;

&lt;p&gt;So, you know the inputs, you specify the outputs and you are expected to leave a small amount
unspent. Let’s say your inputs have 10,000 satoshi and you specify an output
for 8,000. You leave the residual 2,000 unspent. They are called
&lt;a href=&quot;https://en.bitcoin.it/wiki/Miner_fees&quot;&gt;miner fees&lt;/a&gt;.
You send your transaction to all Bitcoin nodes, they place it in their
memory pool, and attempt to combine a few thousand transactions in a
&lt;a href=&quot;https://en.bitcoin.it/wiki/Block&quot;&gt;block&lt;/a&gt;.
They all attempt together and only one of them manages to do it,
&lt;a href=&quot;https://bitcoin.stackexchange.com/questions/8823&quot;&gt;approximately&lt;/a&gt;
once every ten minutes. Once a winner manages to &lt;a href=&quot;https://en.bitcoin.it/wiki/Mining&quot;&gt;solve&lt;/a&gt;
a block, it wins that 2,000 you left untouched in your transaction. Every transaction in the
block pays that winner some small fee.&lt;/p&gt;

&lt;p&gt;Is it possible to pay nothing?
&lt;a href=&quot;https://bitcointalk.org/index.php?topic=245552&quot;&gt;Yes&lt;/a&gt;. However, the smaller the
fee you leave in your transaction, the lower the chances that your
transaction will go into the next block. Each miner wants to make the maximum
out of each block and puts the most “generous” transactions in the block,
when trying to &lt;a href=&quot;https://en.bitcoin.it/wiki/Mining&quot;&gt;mine&lt;/a&gt; it.&lt;/p&gt;

&lt;p&gt;The fee depends on the size of the transaction in bytes. Since any transaction
may include many inputs and outputs, its size is the only thing that matters.
For example, the fee I paid in
&lt;a href=&quot;https://www.blockchain.com/btc/tx/eede4bb2ad4e3c21a09cf238a282b08daab66937c726dce8fe07ab55793c4c51&quot;&gt;this transaction&lt;/a&gt;
was 8,971 satoshi, which is approximately 40 satoshi per byte, since
my transaction included 225 bytes.&lt;/p&gt;

&lt;p&gt;To send your transaction to all Bitcoin nodes you have two options. The first
one is to start your own &lt;a href=&quot;https://en.bitcoin.it/wiki/Full_node&quot;&gt;full node&lt;/a&gt;,
which will communicate with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitcoin_network&quot;&gt;other nodes&lt;/a&gt;
through the Bitcoin &lt;a href=&quot;https://en.bitcoin.it/wiki/Protocol_documentation&quot;&gt;protocol&lt;/a&gt;.
The second option is to use one of the HTTP relays, where you
just post your transaction in a POST HTTP request and the relay sends it to all
Bitcoin nodes; &lt;a href=&quot;https://www.blockchain.com/btc/pushtx&quot;&gt;this is&lt;/a&gt; one of them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;Sibit&lt;/a&gt; automates this process. You just say:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ sibit pay 200000 L \
  1K3J...se1TYe:c93a36feb3...e55108bde32477cbabac5f \
  153dF1xKyVX5X8brBDroaqKkPmcB8kLtDB \
  1K3JgsdRbbUDUgTGo4gvUXUzRZjBse1TYe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the first argument is the amount you are sending. The second one
is the fee you want to leave untouched. I made it easier for you, to help
you avoid calculations. Just say &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; or &lt;code&gt;XL&lt;/code&gt; and the fee will be calculated
more or less correctly. The third argument is a list of addresses
and their private keys, separated by a colon.
The fourth argument is the target address (&lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;Sibit&lt;/a&gt;
makes it possible to send to only one address). The last argument is the
address where the &lt;a href=&quot;https://en.bitcoin.it/wiki/Change&quot;&gt;change&lt;/a&gt; will be sent.&lt;/p&gt;

&lt;p&gt;If you have 50,000 satoshi in your inputs and you want to send 15,000 satoshi
to a friend, you have to find a place where the other 35,000 will be
sent—well, minus the miner fee. You just provide your own address and
the change will arrive there.&lt;/p&gt;

&lt;p&gt;This is pretty much all you need to know about Bitcoin and Blockchain,
in order to use it. What did I miss?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="crypto" /><summary type="html">Bitcoin was a big technical mystery for me. All the articles I’d read about it sounded extremely complex and absolutely indigestible. Until I got stuck with a task: I had to integrate Zold, our experimental non-Blockchain cryptocurrency, with Bitcoin. I had to study the architecture of Bitcoin and I found this short and simple video (I highly recommend you watch it). I managed to implement the integration and understand how Blockchain works. Here is my short summary. I hope it will be helpful.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/05/the-invention-of-lying.jpg" /></entry><entry><title type="html">Elegant READMEs</title><link href="https://www.yegor256.com/2019/04/23/elegant-readme.html" rel="alternate" type="text/html" title="Elegant READMEs" /><published>2019-04-23T00:00:00+00:00</published><updated>2019-04-23T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/04/23/elegant-readme</id><content type="html" xml:base="https://www.yegor256.com/2019/04/23/elegant-readme.html">&lt;p&gt;Some time ago I wrote a blog post
&lt;a href=&quot;/2018/05/08/open-source-attributes.html&quot;&gt;&lt;em&gt;An Open Code Base Is Not Yet an Open Source Project&lt;/em&gt;&lt;/a&gt;
where I suggested a few important qualities of a good open
source repository/project. One of them was the well-written README
file. Here I will try to give a few hints on how to create
a good README file and what mistakes to avoid. I hope you find it
helpful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Life of Pi (2012) by Ang Lee&quot; src=&quot;/images/2019/04/life-of-pi.jpg&quot; longdesc=&quot;#2a0870e6&quot; /&gt;&lt;figcaption id=&quot;2a0870e6&quot;&gt;Life of Pi (2012) by Ang Lee&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I will list everything you need to have in the README, in the order
those elements should show up:&lt;/p&gt;

&lt;h2 id=&quot;title-and-description&quot;&gt;Title and Description&lt;/h2&gt;

&lt;p&gt;Why include these? The title is already in the URL of your repo and the description
of the project is in the GitHub subtitle. Why repeat yourself? Instead,
start with a logo and a list of badges right after it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;img src=&amp;quot;http://www.takes.org/logo.png&amp;quot; height=&amp;quot;64px&amp;quot;/&amp;gt;

[![Build Status](https://travis-ci.org/zold-io/zold.svg?branch=master)](https://travis-ci.org/zold-io/zold)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pay attention to the empty line after the logo. Don’t forget to specify
the size of the image in the &lt;code&gt;height&lt;/code&gt; attribute. You can skip the &lt;code&gt;width&lt;/code&gt;,
since just one dimension is enough for the HTML. Don’t make it larger
than 100px in height.&lt;/p&gt;

&lt;h2 id=&quot;badges&quot;&gt;Badges&lt;/h2&gt;

&lt;p&gt;You need them, as I &lt;a href=&quot;/2018/05/08/open-source-attributes.html&quot;&gt;said earlier&lt;/a&gt;.
But the question is how to position them inside the README.
You should put no more than fives badges in a line. Then separate the
lines with an empty line. See how it’s done in
our &lt;a href=&quot;https://github.com/zold-io/zold&quot;&gt;zold-io/zold&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;You should group them somehow in the lines, using some logic. I group them
by the level of technical details. The first line is about CI, code coverage,
code quality. The second line is more about management, etc. It’s up to you,
but make sure all badges that stay in the same line are of the same height!
If some badge has a different height than everything else, give it its own
line, but never put two badges of a different height on the same line!&lt;/p&gt;

&lt;p&gt;Also, remember that only in a few very specific cases (like badges, for example)
are you allowed to make lines longer than 80 characters. Treat your README
document as a piece of source code. Make it properly and elegantly formatted.
The width of the line is one of those formatting rules that will make
your document look better. Eighty characters. That’s it.&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;Your first paragraph after the badges should explain what the product is
about. Pay attention: a &lt;em&gt;paragraph&lt;/em&gt;, not a page of text. You should put
the description of the product in one single paragraph. No bullets here,
no new lines, no indentations. Just a plain simple piece of text:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;**Takes** is a [true object-oriented](http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html)
and [immutable](http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html)
Java7 web development framework. Its key benefits, comparing to all others, include four
fundamental principles: 1) not a single `null`, 2) not a single `public` `static` method,
3) not a single mutable class, and 4) not a single `instanceof` keyword, type casting,
or reflection.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pay attention, there are no headings yet. Just a logo, a few lines with badges
and some plain text with the description of the product. You may, and should,
use &lt;a href=&quot;https://help.github.com/en/articles/basic-writing-and-formatting-syntax&quot;&gt;markdown&lt;/a&gt;
here and point the reader to any relevant blog posts or YouTube
videos or anything else, but make sure you fit your entire idea into
a single paragraph.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to use it?&lt;/h2&gt;

&lt;p&gt;Then, again without any headings, you just get right to the point of how I can
use your baby, as a complete newbie to this repo. I just opened this
page because a friend of mine told me that it’s great and I want to understand
if it’s worth it or whether I should close it right now. You have my attention for another
60 seconds. Tell me &lt;em&gt;how to try it&lt;/em&gt;! Something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;First, you install it:

```
$ gem install zold
```

Then, you run it and follow the instructions:

```
$ zold --help
```

It should be clear what to do. If not, ask us in
our [Telegram chat](https://t.me/zold_io).&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pay attention to the formatting. I don’t indent anything and I use triple-apostrophe
for code-sample formatting. You should do the same. Separate text blocks with
a &lt;a href=&quot;/2014/11/03/empty-line-code-smell.html&quot;&gt;&lt;em&gt;single&lt;/em&gt;&lt;/a&gt; empty line.&lt;/p&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;

&lt;p&gt;Here starts the body of your README. The exact content depends on your specific
business case and the nature of your product. However, no matter what the
product, there are a few recommendations.&lt;/p&gt;

&lt;p&gt;First, don’t replace automatically generated Javadocs
(or whatever you have in your language) with the README. The README is not
user documentation for everything you have in your repo. There are
other places for that. What you can do here is explain a few of the most
interesting use cases. See how we did it in the
&lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;yegor256/takes&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Second, start each use case with a header of the second level (&lt;code&gt;##&lt;/code&gt; in Markdown),
and try to avoid third-level headers (&lt;code&gt;###&lt;/code&gt;). Do I need to say that
the fourth level is absolutely prohibited? And, of course, again, no indenting.
Always start your text lines from the far left position, no matter
whether it’s a paragraph of text or a section header.&lt;/p&gt;

&lt;p&gt;Third, keep in mind that you will change your
product very soon and you don’t want to always remember where in the
README file you have to change what. You want your README to stay
as short as possible and as high-level as possible. That’s why, if you can,
avoid specific details and instead redirect the reader to the relevant
parts of the &lt;em&gt;automatically&lt;/em&gt; generated documentation.&lt;/p&gt;

&lt;p&gt;Fourth, use as few words as you can. Nobody is interested in reading
your prose for more than a few seconds and only in order to understand
how to use your product or how to make some changes. Don’t focus on yourself,
we don’t care about you. Focus on us and our needs. Tell us how it works
and call it a README. No philosophy, no prose. Use your blog and Twitter
for those.&lt;/p&gt;

&lt;h2 id=&quot;how-to-contribute&quot;&gt;How to contribute&lt;/h2&gt;

&lt;p&gt;Start it with a section header “How to contribute” and explain briefly
what needs to be done in order to create a pull request to your repo. Imagine
that you are talking to a junior developer who doesn’t even know what
Java and Maven are (if your project is using them). You should explain how
to install the right tools, how to build the project, how to make changes,
how to run it in a hot-reload mode (when I’m making changes and see them
on the screen immediately), how to create the fork, and what to expect
when the fork is submitted.&lt;/p&gt;

&lt;p&gt;Don’t be too verbose. Actually, be as compact as you can. Always, where possible,
redirect the reader to the documentation of those tools or some blog posts,
which explain better. See how it’s done in the README of &lt;a href=&quot;https://github.com/zold-io/wts.zold.io#how-to-contribute&quot;&gt;zold-io/wts.zold.io&lt;/a&gt;,
a web app written in Ruby. The short piece of text at the bottom of the page
explains what you have to install (providing links to the installation tutorials),
how to run the app locally, how to run the build, how to run a single
unit test and what to do if it doesn’t work. It’s pretty compact and, I believe,
easy to understand.&lt;/p&gt;

&lt;p&gt;You don’t want your potential contributor to walk away. That’s why this
part of the entire README is the most important one. Make sure you address
your text to a junior programmer, not yourself. As they say, your grandma
should be able to understand you here.&lt;/p&gt;

&lt;p&gt;And don’t teach us. We are not interested in becoming experts in the
frameworks you are using or in Docker, which is required in order to
run your stuff. We just want to run your stuff, make some changes,
get a new release, and walk away. So, please, don’t tell me “first, you
have to learn Docker.” No, I don’t. If I did, I’d have done it myself already.
Tell me how to use it in &lt;em&gt;this specific case&lt;/em&gt;, and spare me all the rest.&lt;/p&gt;

&lt;h2 id=&quot;downloads-and-releases&quot;&gt;Downloads and Releases&lt;/h2&gt;

&lt;p&gt;GitHub has a special tab “releases” for that. No need to repeat it in the
README. Just make sure your “releases” tab contains enough information
and enough binary artifacts to download. Don’t say a word about them
in the README.&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;GitHub automatically finds your &lt;code&gt;LICENSE.txt&lt;/code&gt; file in the root directory
of your repository and understands the license. Just create that file
and don’t say anything in the README about the license, it’s just pure noise.
If I want to know what the license is, I know where to click.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;p&gt;This is something from pre-GitHub time. I would recommend you rely
on the “releases” tab and keep everything you want to tell us there.
Some old projects maintain changelogs, like this one in
&lt;a href=&quot;https://github.com/rubocop-hq/rubocop/blob/master/CHANGELOG.md&quot;&gt;rubocop-hq/rubocop&lt;/a&gt;,
for example. I don’t think it’s a good idea.&lt;/p&gt;

&lt;h2 id=&quot;contributors-vs-acknowledgements&quot;&gt;Contributors vs. Acknowledgements&lt;/h2&gt;

&lt;p&gt;GitHub has a special tab in each repository, which is called “contributors.”
There is absolutely no reason to reproduce the list in the README file.
However, there is one reason: to help the contributors promote themselves. In such a case,
I would recommend creating a section (with a heading) called “Acknowledgements,”
which should list the most active contributors, with their blog URLs,
Twitter accounts, and so on.&lt;/p&gt;

&lt;p&gt;If you don’t have anyone to acknowledge, don’t make a noise by telling us
who the contributors are. We know them, GitHub tells us.&lt;/p&gt;

&lt;p&gt;PS. Here is a short list of READMEs I like, which are not mine
(if you think that yours is good too, &lt;a href=&quot;maito:readme-review@yegor256.com&quot;&gt;email&lt;/a&gt;
it to me, I will review it and perhaps add it to this list):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rugk/offline-qr-code&quot;&gt;rugk/offline-qr-code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Vatavuk/verano-http&quot;&gt;Vatavuk/verano-http&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="specs" /><summary type="html">Some time ago I wrote a blog post An Open Code Base Is Not Yet an Open Source Project where I suggested a few important qualities of a good open source repository/project. One of them was the well-written README file. Here I will try to give a few hints on how to create a good README file and what mistakes to avoid. I hope you find it helpful.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/04/life-of-pi.jpg" /></entry><entry><title type="html">How to Use Nutch From Java, Not From the Command Line</title><link href="https://www.yegor256.com/2019/04/17/nutch-from-java.html" rel="alternate" type="text/html" title="How to Use Nutch From Java, Not From the Command Line" /><published>2019-04-17T00:00:00+00:00</published><updated>2019-04-17T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/04/17/nutch-from-java</id><content type="html" xml:base="https://www.yegor256.com/2019/04/17/nutch-from-java.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;https://nutch.apache.org/&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/89/Nutch_logo.svg&quot; style=&quot;width:92px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://nutch.apache.org/&quot;&gt;Apache Nutch&lt;/a&gt;
is an open source framework written in Java. Its purpose
is to help us crawl a set of websites (or the entire Internet), fetch
the content, and prepare it for indexing by, say, Solr. A pretty useful
framework if you ask me, however it is designed to be used &lt;del&gt;only&lt;/del&gt;
mostly from the command line. You download the archive, unzip it, and run
the binary file. It crawls and you get the data. However, I’ve got a project
where this crawling had to be embedded into my own Java app. I realized
that there is a complete absence of any documentation for that. Hence
this blog post. It explains how you can use Nutch from Java, not from
the command line.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I’ll be talking about Nutch 1.15. There is a later version 2+, but I didn’t
manage to make it work. If you know how, leave your comment below.&lt;/p&gt;

&lt;p&gt;I’d recommend you read &lt;a href=&quot;https://examples.javacodegeeks.com/enterprise-java/apache-hadoop/apache-hadoop-nutch-tutorial/&quot;&gt;this tutorial&lt;/a&gt;
first, to understand how Nutch works from the command line. Well,
it helped me anyway.&lt;/p&gt;

&lt;p&gt;Now, let’s see how we can use Nutch without the command line.
First, you need these dependencies in your &lt;code&gt;pom.xml&lt;/code&gt;
(Nutch uses &lt;a href=&quot;https://hadoop.apache.org/&quot;&gt;Apache Hadoop&lt;/a&gt;, that’s why we need the
second dependency):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.nutch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nutch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.15&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.hadoop&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hadoop-common&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.7.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, this is your Java code, which does all the work:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.file.Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.file.Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.stream.Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.io.FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.hadoop.conf.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.nutch.crawl.CrawlDb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.nutch.crawl.Generator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.nutch.crawl.Injector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.nutch.fetcher.Fetcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.nutch.parse.ParseSegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.nutch.tools.FileDumper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create a default configuration object, which will read&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the content of nutch-default.xml file from the classpath,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// parse it and take its entire content as the default&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// configuration. Funny, but this interface is from Hadoop:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NutchConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Now it&amp;#39;s possible to reset some configuration parameters&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// by using this set() method. This one is mandatory, if you&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// don&amp;#39;t set it the crawling won&amp;#39;t work. The value is used&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// as User-Agent HTTP header.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http.agent.name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;me, myself, and I&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This one is also mandatory and we will discuss its&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// value below. You need to point Nutch to the directory&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// with compiled plugins and this collection is NOT in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// its default JAR package, unfortunately.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;plugin.folders&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nutch.plugins.dir&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// First, we need to have a directory where everything will&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// happen. I assume you are familiar with Maven, so let&amp;#39;s use&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// its default temporary directory &amp;quot;target&amp;quot;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Next, we have to create a file with a list of URLs Nutch will&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// start crawling from:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.zerocracy.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;urls&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;list-of-urls.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Next, we have to point Nutch to the directory with the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// text file and let it &amp;quot;inject&amp;quot; our URLs into its database:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Injector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;crawldb&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the directory with its database&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;urls&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the directory with text files with URLs&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no idea what this is&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Now, it&amp;#39;s time to do a few cycles of fetching, parsing, and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// updating. This is how Nutch works, in increments. Each increment&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will bring new web pages to the database. The more increments&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// you run, the deeper Nutch will go into the Internet. Five here&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// is a very small number. If you really want to crawl deeper,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// you will need hundreds of increments. I guess, anyway. I haven&amp;#39;t tried it.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Now it&amp;#39;s time to dump what is fetched to a new directory,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// which will contain HTML pages and all other files when&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// finished.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dump&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileDumper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dump&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// where to dump&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;segments&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is the directory with &amp;quot;segments&amp;quot;. Each fetching cycle&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will produce its own collection of files. Each collection&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// is called a segment.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;segments&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// First, we generate a list of target URLs to fetch from:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;crawldb&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;segments&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Then, we get the path of the current segment:&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sgmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Then, we fetch, parse and update:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fetcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sgmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParseSegment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sgmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrawlDb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;crawldb&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Get the path of the most recent segment in the list,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// sorted by the date/time of their creation.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pay attention that &lt;code&gt;Path&lt;/code&gt; here is not the
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; from JDK.
It’s the &lt;a href=&quot;https://hadoop.apache.org/docs/r2.7.2/api/org/apache/hadoop/fs/Path.html&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; from Hadoop.
Don’t ask me why.&lt;/p&gt;

&lt;p&gt;This seems to be a pretty straight-forward algorithm, however
there is one tricky part. Nutch, in order to work, needs a number
of plugins, which are standalone JAR packages, which it doesn’t include
in its default JAR. They exist in its
&lt;a href=&quot;https://nutch.apache.org/downloads.html&quot;&gt;binary distribution&lt;/a&gt; and they
are pretty heavy (over 250MB in Nutch 1.15). Nutch expects you to download
the entire distribution, unpack, and run the binary &lt;code&gt;nutch&lt;/code&gt; they provide,
which will work with the provided plugins.&lt;/p&gt;

&lt;p&gt;What can we do, now that we are in Java, not in the command line? Here is what
I suggest:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.googlecode.maven-download-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;download-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;download-nutch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-resources&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;wget&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://artfiles.org/apache.org/nutch/1.15/apache-nutch-1.15-bin.zip&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;unpack&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/unpack&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;${project.build.directory}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;overwrite&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/overwrite&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This Maven plugin will download the entire binary distribution of Nutch
and will unpack it to &lt;code&gt;target/apache-nutch-1.15&lt;/code&gt;. The plugins will be
in &lt;code&gt;target/apache-nutch-1.15/plugins&lt;/code&gt;. The only thing we still need
to do is to set the system property for the unit test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;systemPropertyVariables&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;nutch.plugins.dir&amp;gt;&lt;/span&gt;${project.build.directory}/apache-nutch-1.15/plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nutch.plugins.dir&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/systemPropertyVariables&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pluginManagement&amp;gt;&lt;/span&gt;
    [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
  [...]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Actually, one more thing we have to do: copy the contents of the directory &lt;code&gt;conf&lt;/code&gt;
from their binary distribution to our &lt;code&gt;src/main/resources&lt;/code&gt; directory. There
are many files, including the most important &lt;code&gt;nutch-default.xml&lt;/code&gt;. They all
have to be available on classpath, otherwise Nutch will complain in so
many places and won’t be able to load the &lt;code&gt;Configuration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can see how it all works together in this
GitHub repository I created to illustrate the example:
&lt;a href=&quot;https://github.com/yegor256/nutch-in-java&quot;&gt;yegor256/nutch-in-java&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions, feel free to submit a pull request
or comment here.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><summary type="html">Apache Nutch is an open source framework written in Java. Its purpose is to help us crawl a set of websites (or the entire Internet), fetch the content, and prepare it for indexing by, say, Solr. A pretty useful framework if you ask me, however it is designed to be used only mostly from the command line. You download the archive, unzip it, and run the binary file. It crawls and you get the data. However, I’ve got a project where this crawling had to be embedded into my own Java app. I realized that there is a complete absence of any documentation for that. Hence this blog post. It explains how you can use Nutch from Java, not from the command line.</summary></entry><entry><title type="html">Stop Pitching, Beg Them!</title><link href="https://www.yegor256.com/2019/04/09/beg-them.html" rel="alternate" type="text/html" title="Stop Pitching, Beg Them!" /><published>2019-04-09T00:00:00+00:00</published><updated>2019-04-09T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/04/09/beg-them</id><content type="html" xml:base="https://www.yegor256.com/2019/04/09/beg-them.html">&lt;p&gt;You want your startup to be visible on TechCrunch, right? But you don’t have
$15-20K per month to bribe a reputable PR firm to get you there? No worries.
This blog post will give you a set of simple instructions on how you can
get the attention of those tech journalists who are currently busy
writing about Musk’s and Zuckerberg’s innovative ideas. They will
definitely write about your baby, I promise you. Just do what I say.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Mon Roi (2015) by Maïwenn&quot; src=&quot;/images/2019/04/mon-roi.jpg&quot; longdesc=&quot;#97a16f5c&quot; /&gt;&lt;figcaption id=&quot;97a16f5c&quot;&gt;Mon Roi (2015) by Maïwenn&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First of all, you have to remember that they are just writers. They are not programmers,
designers, or artificial intelligence experts. Even when they write about that stuff
they actually have no idea. The don’t know what machine learning is,
can’t really tell the difference between Blockchain and Bitcoin,
and barely remember what they were saying in their articles just a
few months ago. You have to understand and forgive them.
They are being paid for the word count, after all.&lt;/p&gt;

&lt;p&gt;Second, you have to remember that they not only don’t care about your startup,
they don’t care about the entire industry. They just need money
to feed their families. And there are two places to find that money:
1) sound topics like Google, equality, or billion-dollar divorce (they all dream about
putting them together in one title), or 2) your bank account. Thus,
if you can’t tell them a mind-blowing sexual harassment story and you are not ready
to pay, writing about your startup won’t help them feed their families.
And you don’t want their families to starve, do you?&lt;/p&gt;

&lt;p&gt;Be merciful. They are only human.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;If you can’t tell them a mind-blowing sexual harassment story and you are not ready to pay, writing about your startup won’t help them feed their families.
&lt;/aside&gt;

&lt;p&gt;They are starving and you are coming with a press release pitching your startup
idea, which is going to save the world and make you a billionaire. Do you think
they will be glad to help you out? Never. They will only feel jealous and expect you to pay—double.
Instead, you need to present yourself as someone whose starvation is even worse. They have
to feel pity for you. That’s how they won’t have a chance to refuse. &lt;em&gt;They&lt;/em&gt; must
be merciful.&lt;/p&gt;

&lt;p&gt;How do you do that?&lt;/p&gt;

&lt;p&gt;You beg.&lt;/p&gt;

&lt;p&gt;But not directly and explicitly, of course. You have to be pretty
subtle in your self-humiliation. Here is what you do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Follow Them&lt;/strong&gt;.
Find them on Facebook, Twitter, Instagram, and anywhere else
you can find them. Become their follower. Or even better, follow
and unfollow them every week. They will see that you keep coming back
in a desperate attempt to catch their attention.
Their souls will melt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Re-tweet Them&lt;/strong&gt;.
Not just that. You should &lt;em&gt;comment&lt;/em&gt; on every single tweet they write
(especially those about their vacations, parties, and the puppies they hug).
The best way, of course, is to ask questions. They publish an article
about Zuckerberg’s new innovative idea of blocking another group
of white supremacists on Facebook, and you ask them: “How come the world
is so cruel??” You got the idea. Just keep pretending that you
are totally interested in all the garbage they publish. They realize perfectly
that the stuff they write is worth nothing. When they see you
so deeply interested in their prose, however, they will understand that your
life situation is even worse than theirs. Here comes the mercifulness!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quote Them&lt;/strong&gt;.
Find an article they wrote previously and write your own piece somewhere
on your blog or just on Medium. Then, email them a link, saying that their quote
inspired you so much that you can’t stop thinking about it.
(Well, be careful with too much flattery.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ask Them Questions&lt;/strong&gt;.
Demonstrate to them that you are interested in their opinions by asking
questions directly, from time to time, in Facebook Messenger, for example. Of course,
your questions must be about their articles. For example, “Do you still
believe that…” and then mention something they said a few months ago. It doesn’t
matter what you ask and, of course, you don’t care about their answers,
but keep asking, regularly. Your goal is to make them remember your
avatar and to ensure they connect it in their minds with someone desperately and
unconditionally in love with them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Don’t) Buy Them Coffee&lt;/strong&gt;.
If they are in the same city with you, a personal meeting over a cup
of coffee will definitely help. I would not recommend you paying for their
coffee, though. Maybe I’m wrong, but I think that this gesture will
give them the wrong idea that you have money. Instead, be cheap. Pay only
for your own coffee. And, of course, don’t tell them much about your
startup, better ask them about their families, ski weekends, and about
how much they hate Trump. Remember, they care about your startup, not at all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Beg!&lt;/strong&gt;.
After about six months of preparation you are ready to shoot. They already remember
your avatar (or maybe even your face, if you are lucky),
they know that you have no self-respect and no money,
they feel guilty for not giving you anything back for everything you’ve
done for them so far, and they feel their absolute dominant
position above you. Voilá! You’ve done a great job. Now you say something like:
“I feel so bad about asking this, but maybe you can help me out
and say a few words about my startup in one of your articles, pretty please?!”
How can they refuse?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Got the strategy?&lt;/p&gt;

&lt;p&gt;You can invent some other tricks, if you get the idea: you have to show them
that they are much more important that your startup. They are the experts,
they know what the future of machine learning is, they change the world
with their articles, they are kings, while you are yet another startup
founder, who is ready to do anything just to get a chance to
&lt;del&gt;kiss their feet&lt;/del&gt; be mentioned in one of their future articles.&lt;/p&gt;

&lt;p&gt;Try it, and let me know how it works.&lt;/p&gt;

&lt;p&gt;PS. I tried too, but I can’t seem to get further than the first step. It seems
that there is something wrong with me.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What do you think is important to have in order to get your startup covered in a major magazine like &lt;a href=&quot;https://twitter.com/hashtag/TechCrunch?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#TechCrunch&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/hashtag/Wired?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Wired&lt;/a&gt;? &lt;a href=&quot;https://twitter.com/hashtag/journalism?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#journalism&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1127460981578391555?ref_src=twsrc%5Etfw&quot;&gt;May 12, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><category term="sarcasm" /><summary type="html">You want your startup to be visible on TechCrunch, right? But you don’t have $15-20K per month to bribe a reputable PR firm to get you there? No worries. This blog post will give you a set of simple instructions on how you can get the attention of those tech journalists who are currently busy writing about Musk’s and Zuckerberg’s innovative ideas. They will definitely write about your baby, I promise you. Just do what I say.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/04/mon-roi.jpg" /></entry><entry><title type="html">Software Project Review Checklist</title><link href="https://www.yegor256.com/2019/04/02/software-project-review-checklist.html" rel="alternate" type="text/html" title="Software Project Review Checklist" /><published>2019-04-02T00:00:00+00:00</published><updated>2019-04-02T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/04/02/software-project-review-checklist</id><content type="html" xml:base="https://www.yegor256.com/2019/04/02/software-project-review-checklist.html">&lt;p&gt;A few years ago I wrote about the
&lt;a href=&quot;/2014/12/18/independent-technical-reviews.html&quot;&gt;independent technical reviews&lt;/a&gt;
any software project must regularly go through in order
to make sure everything is under control. I even
&lt;a href=&quot;/2017/11/21/trust-pay-lose.html&quot;&gt;said recently&lt;/a&gt;
that there is no excuse for not doing them. Moreover, the more
we trust programmers, the higher the necessity to review their projects regularly.
Here is a short summary of what a report from a reviewer must include.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The People vs. Larry Flynt (1996) by Milos Forman&quot; src=&quot;/images/2019/04/the-people-vs-larry-flynt.jpg&quot; longdesc=&quot;#27c80f36&quot; /&gt;&lt;figcaption id=&quot;27c80f36&quot;&gt;The People vs. Larry Flynt (1996) by Milos Forman&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I tried to touch on this subject in a few recent talks:
&lt;a href=&quot;https://youtu.be/oiNI2jF46h0&quot;&gt;Make Customers Trust You&lt;/a&gt; at &lt;a href=&quot;http://bdmsummit.com/yegor-bugayenko-2017s/&quot;&gt;BDMSummit 2017&lt;/a&gt;,
&lt;a href=&quot;https://youtu.be/Rip_04Bv3Jk&quot;&gt;How to Be Honest and Keep a Client&lt;/a&gt; at &lt;a href=&quot;http://pmcon.dev-pro.net/&quot;&gt;PMCon Kharkiv 2017&lt;/a&gt;,
and
&lt;a href=&quot;https://www.youtube.com/watch?v=DLk_5BmgTVk&quot;&gt;How to Avoid Outsourcing Disaster&lt;/a&gt; at &lt;a href=&quot;http://outsourceforum.org/&quot;&gt;Kyiv Outsourcing Forum 2017&lt;/a&gt;.
Also, there are a number of blog posts along the same lines, including
&lt;a href=&quot;/2015/06/08/deadly-sins-software-project.html&quot;&gt;Seven Deadly Sins of a Software Project&lt;/a&gt;,
&lt;a href=&quot;/2015/05/21/avoid-software-outsourcing-disaster.html&quot;&gt;How to Avoid a Software Outsourcing Disaster&lt;/a&gt;,
and
&lt;a href=&quot;/2015/06/15/software-outsourcing-survival-guide.html&quot;&gt;Software Outsourcing Survival Guide&lt;/a&gt;.
Here, finally, is a more or less complete list of things a good report must include.&lt;/p&gt;

&lt;p&gt;Basically it’s a list of questions a reviewer must answer.
When all the answers are collected, the report is ready.
The most important questions are at the top.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is the release procedure documented, automated, and does it work?&lt;/li&gt;
  &lt;li&gt;Do releases happen frequently, at least once a week?&lt;/li&gt;
  &lt;li&gt;How big is the technical debt (the things that “eventually” should be fixed)?&lt;/li&gt;
  &lt;li&gt;Is the delivery pipeline strong enough to reject mistakes?&lt;/li&gt;
  &lt;li&gt;How clean is the code? How many &lt;a href=&quot;/2016/02/03/design-patterns-and-anti-patterns.html&quot;&gt;anti-patterns&lt;/a&gt; appear?&lt;/li&gt;
  &lt;li&gt;Are all bugs and features registered as &lt;a href=&quot;/2014/11/24/principles-of-bug-tracking.html&quot;&gt;tickets&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;Is the code base covered by unit tests, and is coverage visible?&lt;/li&gt;
  &lt;li&gt;Are “Work for Hire” agreements signed with all developers?&lt;/li&gt;
  &lt;li&gt;Are key architectural technical decisions documented?&lt;/li&gt;
  &lt;li&gt;Is static analysis in place and &lt;a href=&quot;/2018/01/16/educational-aspect-of-static-analysis.html&quot;&gt;mandatory&lt;/a&gt; for new changes?&lt;/li&gt;
  &lt;li&gt;Is &lt;a href=&quot;/2014/10/08/continuous-integration-is-dead.html&quot;&gt;CI&lt;/a&gt; in place, and are its reports taken into account?&lt;/li&gt;
  &lt;li&gt;Is master branch &lt;a href=&quot;/2014/07/21/read-only-master-branch.html&quot;&gt;read-only&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;Are programming metrics collected and regularly reviewed?&lt;/li&gt;
  &lt;li&gt;Is the source code repository under the customer’s ownership?&lt;/li&gt;
  &lt;li&gt;Is the requirements documentation &lt;a href=&quot;/2015/11/10/ten-mistakes-in-specs.html&quot;&gt;short and up to date&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;Do key classes, methods and functions have in-code documentation?&lt;/li&gt;
  &lt;li&gt;Is the source code repository garbage free?&lt;/li&gt;
  &lt;li&gt;Are UI/UX interfaces documented?&lt;/li&gt;
  &lt;li&gt;Are the production logs visible and regularly reviewed?&lt;/li&gt;
  &lt;li&gt;How responsive is the team to the tickets?&lt;/li&gt;
  &lt;li&gt;Does Git have a clear history of documented changes?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essentially, this is a very short compilation of the most important things that
you can find in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration&quot;&gt;CMMI&lt;/a&gt;.
They require all this, and a large list of other things on top. But a small
project doesn’t need everything that they ask you to have. My list is shorter
and, I’m sure, will be just enough for most of you.&lt;/p&gt;

&lt;p&gt;By the way, you can see the reports volunteers create for the participants
of my &lt;a href=&quot;/award.html&quot;&gt;Software Quality Award&lt;/a&gt;. They analyze open source projects
and briefly report the problems they find. I believe that they are trying to answer
exactly the same set of questions.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="architect" /><summary type="html">A few years ago I wrote about the independent technical reviews any software project must regularly go through in order to make sure everything is under control. I even said recently that there is no excuse for not doing them. Moreover, the more we trust programmers, the higher the necessity to review their projects regularly. Here is a short summary of what a report from a reviewer must include.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/04/the-people-vs-larry-flynt.jpg" /></entry><entry><title type="html">How to Create a Java Web Framework from Scratch, the Right Object-Oriented Way</title><link href="https://www.yegor256.com/2019/03/26/jpages.html" rel="alternate" type="text/html" title="How to Create a Java Web Framework from Scratch, the Right Object-Oriented Way" /><published>2019-03-26T00:00:00+00:00</published><updated>2019-03-26T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/03/26/jpages</id><content type="html" xml:base="https://www.yegor256.com/2019/03/26/jpages.html">&lt;p&gt;How do you design a web application in Java? You install Spring, read
the manual, create &lt;a href=&quot;/2015/03/09/objects-end-with-er.html&quot;&gt;controllers&lt;/a&gt;,
create some views, add some &lt;a href=&quot;/2016/04/12/java-annotations-are-evil.html&quot;&gt;annotations&lt;/a&gt;, and it
works. What would you do if there were no
&lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt; (and no Ruby on Rails
in Ruby, and no Symphony in PHP, and no … etc.)? Let’s try to create
a web application from scratch, starting from a pure Java SDK and ending
with a fully functional web app, covered by unit tests. I recorded
a &lt;a href=&quot;https://www.youtube.com/watch?v=bVzEPOZ_mDU&quot;&gt;webinar no.42&lt;/a&gt;
about it just a few weeks ago, but this article should explain it
all in even more detail.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Breakfast at Tiffany&amp;#39;s (1961) by Blake Edwards&quot; src=&quot;/images/2019/03/breakfast-at-tiffanys.jpg&quot; longdesc=&quot;#d8d1a27d&quot; /&gt;&lt;figcaption id=&quot;d8d1a27d&quot;&gt;Breakfast at Tiffany&amp;#39;s (1961) by Blake Edwards&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First of all we have to create an HTTP server, which will open a
server socket, listen to incoming connections, read everything they
have to say (HTTP requests) and return the information any
web browser would like (HTTP responses). You know how
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;/a&gt; works, right?
If you don’t, here is a quick reminder:&lt;/p&gt;

&lt;p&gt;A web browser sends a request to the server and the request looks
like this (it’s a plain text piece of data):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;GET /index.html HTTP/1.1
Host: www.example.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The server has to read this text, prepare the answer (which has to be the
HTML page readable by the browser) and return it like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8
Content-Length: 26

&amp;lt;html&amp;gt;Hello, world!&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it. It’s a very simple and, I would say, primitive protocol. The implementation
of a web server in Java is not so complex either. Here it is, in a very
simplistic form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.ServerSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.Socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.SocketTimeoutException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerSocket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSoTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Socket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOfRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HTTP/1.1 200 OK\r\n\r\nHello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SocketTimeoutException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInterrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Try to run it, it should work. You should be able to open the &lt;code&gt;http://localhost:8080&lt;/code&gt;
page in your browser and see the &lt;code&gt;Hello, world!&lt;/code&gt; text.&lt;/p&gt;

&lt;p&gt;It’s not yet a web app, but just a skeleton, which does simple dispatching
of HTTP requests into HTTP responses. There is no serious OOP
in it though. It’s pretty procedural, but it works. Now we should focus
on a more important question: How do we add more features to the web app
and make it possible to process different pages, render larger content,
and handle errors? The &lt;code&gt;request&lt;/code&gt; variable in the snippet above
should be somehow converted to a &lt;code&gt;response&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way would be 1) to convert the request into a &lt;a href=&quot;/2016/07/06/data-transfer-object.html&quot;&gt;DTO&lt;/a&gt;
with all the details inside, then 2) send it to a “controller” that knows what to
do with the data from the DTO, and then 3) receive a response DTO from
the controller, take the data out and render the response. This is how
Spring and &lt;del&gt;most&lt;/del&gt; all other frameworks do it. However, we won’t follow this
path, we will try to do it DTO-free and &lt;a href=&quot;/2014/11/20/seven-virtues-of-good-object.html&quot;&gt;purely&lt;/a&gt;
object-oriented.&lt;/p&gt;

&lt;p&gt;I have to say that there could be multiple designs, all in an OOP style. I’ll
show you now only one of those options. You’re no doubt aware of
our &lt;a href=&quot;https://www.takes.org&quot;&gt;Takes&lt;/a&gt; framework, which
was born a few years ago—it has its own design, also object-oriented. But the
one I’m going to suggest now seems to be better. You might come up
with something else too, so don’t hesitate to post your ideas in the comments
below or even create a GitHub repo and share your thoughts right there.&lt;/p&gt;

&lt;p&gt;I suggest we introduce two interfaces: &lt;code&gt;Resource&lt;/code&gt; and &lt;code&gt;Output&lt;/code&gt;. The &lt;code&gt;Resource&lt;/code&gt;
is the server side entity, which mutates depending on the request parameters
that are coming in. For example, when all we know about the request is that
it is &lt;code&gt;GET /&lt;/code&gt;, it is one resource. But if we also know that the
request has, for example, &lt;code&gt;Accept: text/plain&lt;/code&gt;, we can mutate the request
and create a new one, which delivers plain text. Here is the interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is how we create it and mutate:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Method&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Query&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pay attention: each call to &lt;code&gt;.refine()&lt;/code&gt; returns a new instance
of interface &lt;code&gt;Resource&lt;/code&gt;. All of them are immutable, just like objects
&lt;a href=&quot;/2014/06/09/objects-should-be-immutable.html&quot;&gt;have to be&lt;/a&gt;.
Thanks to this design we don’t separate &lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;data&lt;/a&gt;
from their processor. The resource is the data and the processor. Each resource
knows what to do with the data, and receives only the data it is supposed
to receive. Technically, we just implement &lt;em&gt;request dispatching&lt;/em&gt;, but in
an object-oriented way.&lt;/p&gt;

&lt;p&gt;Then, we need to convert the resource to the response. We give the
resource the ability to render itself to the response. We don’t want the
&lt;a href=&quot;/2016/11/21/naked-data.html&quot;&gt;data&lt;/a&gt;, in form of some DTO,
to escape the resource. We want the resource
&lt;a href=&quot;/2016/04/05/printers-instead-of-getters.html&quot;&gt;to print&lt;/a&gt; the
response. How about giving an additional method &lt;code&gt;print()&lt;/code&gt; to the resource:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then the interface &lt;code&gt;Output&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is a primitive implementation of &lt;code&gt;Output&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilderOutput&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;StringBuilderOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;HTTP/1.1 200 OK\r\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Body&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\r\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\r\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To build an HTTP response we can do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilderOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;13&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Body&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s create a class which will take an incoming request &lt;code&gt;String&lt;/code&gt;
and produce a response &lt;code&gt;String&lt;/code&gt;, using an instance of &lt;code&gt;Resource&lt;/code&gt; as a
&lt;em&gt;dispatcher&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\r\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Method&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Query&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Protocol&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilderOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, we parse the request, breaking its header into lines and ignoring
the body of the request. You can modify the code to parse the body
and pass it into the &lt;code&gt;refine()&lt;/code&gt; method too, using &lt;code&gt;X-Body&lt;/code&gt; as the key. At
the moment, the code above doesn’t do that. But you get the idea. The parsing
part of the snippet prepares the pairs it can find in the request and passes them one by one
to the encapsulated resource, mutating it until it gets to the final form.
A simple resource that always returns text might look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextResource&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Body&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A resource that pays attention to the query string and dispatches
the request to other resources, depending on the path in the query,
might look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Query&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/balance&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;256&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;yegor&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Not found!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;This shouldn&amp;#39;t happen&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I hope you got the idea. The code above is rather sketchy, and the majority
of use cases are not implemented, but you can do that yourself, if you are
interested. The code is in the &lt;a href=&quot;https://github.com/yegor256/jpages&quot;&gt;yegor256/jpages&lt;/a&gt;
repository. Don’t hesitate to contribute with a pull request and make this
small framework real.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="java" /><category term="oop" /><summary type="html">How do you design a web application in Java? You install Spring, read the manual, create controllers, create some views, add some annotations, and it works. What would you do if there were no Spring (and no Ruby on Rails in Ruby, and no Symphony in PHP, and no … etc.)? Let’s try to create a web application from scratch, starting from a pure Java SDK and ending with a fully functional web app, covered by unit tests. I recorded a webinar no.42 about it just a few weeks ago, but this article should explain it all in even more detail.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/03/breakfast-at-tiffanys.jpg" /></entry></feed>