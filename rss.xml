<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2019-08-20T14:19:44+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">The Joy of Programming</title><link href="https://www.yegor256.com/2019/07/30/joy-of-programming.html" rel="alternate" type="text/html" title="The Joy of Programming" /><published>2019-07-30T00:00:00+00:00</published><updated>2019-07-30T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/07/30/joy-of-programming</id><content type="html" xml:base="https://www.yegor256.com/2019/07/30/joy-of-programming.html">&lt;p&gt;Yesterday I was working with a slide deck for one of my future talks about
Java and object-oriented programming and got stuck at finding convincing
arguments for the &lt;em&gt;transparency of logic&lt;/em&gt;. I was going to say that it is
important for programmers to be able to understand how everything they do
works, even if they don’t see it or never want to see it. But then I realized
that maybe not everybody thinks that way. Maybe some programmers prefer
to stay in the dark about the majority of things,
as long as the code in front of them “just works.” Hence this blog post,
to ask you which side you are on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Boardwalk Empire (2010–2014) by Terence Winter&quot; src=&quot;/images/2019/07/boardwalk-empire.jpg&quot; longdesc=&quot;#9be5155f&quot; /&gt;&lt;figcaption id=&quot;9be5155f&quot;&gt;Boardwalk Empire (2010–2014) by Terence Winter&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Many years ago I was at a job interview as a candidate. They were looking for
a web architect and I was talking to their CTO. He asked me to explain what
happens behind the scenes when we enter a new URL in a web browser and hit “Enter”.
I drew him a small diagram with a domain registrar, a few DNS servers,
a load balancer, a few HTTP servers, a few databases, and a few IP relays in the
middle. I believe he was impressed by the answer (even though they didn’t hire me back then)
and told me that the majority of web developers didn’t understand
most of this picture. According to him, they only knew how HTTP servers worked,
caring very little about the rest. Most of them didn’t even know what HTTP was,
as long as the PHP code did what it was intended to.&lt;/p&gt;

&lt;p&gt;I remembered that interview, and started asking similar questions to people I was interviewing
later, being a CTO of my own company and an architect on a few other projects.
His conclusions were confirmed. Indeed, most programmers don’t understand how, for example,
DNS works nor what it’s for. Moreover, they feel just fine without this information.
Does it mean they are bad programmers?&lt;/p&gt;

&lt;p&gt;Let me tell you another story, which just happened to me a few days ago. I was
solving a pretty complex technical problem, trying to integrate software
I hadn’t had a chance to use before with another piece of software I also hadn’t
seen before. It took three full days of work. Now I’m looking back at this
short journey and realizing that I went through a few particular phases, which are always
the same for me when I start working with something new:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enthusiasm&lt;/strong&gt;.
Here I start quickly, usually from a Quick Start one-pager of the
new library I’m going to use. I skim through the documentation, ignore
the majority of it, since it doesn’t make any sense, and quickly
copy-paste what they recommend. It all seems easy and I’m expecting
the code to work in a few minutes. And usually it does.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Guessing&lt;/strong&gt;.
I start making changes to the simple code I just copy-pasted and I make
some assumptions about the logic behind it. I don’t know how the products
I’m using are designed, but I need to rely on something. So, I rely
on what I can &lt;em&gt;guess&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Frustration&lt;/strong&gt;.
Obviously, most of my assumptions are wrong. I start googling
and stackoverflowing. The answers I get (if I get any) are not helping
much, since the big picture is still missing and the best I can do
is patch my code to make it work, according to the pieces of advice
I’m getting from random sources. But I keep staying in the dark
and the overall design concept is still not clear. And I’m still hoping
to solve it all without reading the full Developers Manual manuscript.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Depression&lt;/strong&gt;.
Very soon I realize that I’m just a monkey trying to start an aircraft.
Maybe it will fly and maybe I will even manage to land it. But I’m still
a monkey and it’s very depressing. I have no joy in doing this. I hate
myself for being stupid. I hate those library creators for making it
so not obvious to use. And I hate my job.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I believe these four phases are very common for all of us software engineers.
However, what happens afterwards distinguishes good programmers from bad ones. To be
honest, I belong to both categories, depending on the situation. What
do I do when I’m being a bad programmer? I make it all work and call it a day, still
with no idea what is going on inside nor why exactly it works this way
and doesn’t work the way I tried before. My depression doesn’t go anywhere.
It only escalates. I still hate myself, but my software works. I move
on to the next problem, waiting for the weekend to come.&lt;/p&gt;

&lt;p&gt;What do I do when I’m a good programmer? I dive deeper into the problem,
learn the software I use, download its source code, read its documentation,
until I &lt;em&gt;understand&lt;/em&gt; what’s going on. Then, I get back to my part of the code,
fix it with a full understanding, and call it a day. I sometimes even
write a blog post about it, like
this one for &lt;a href=&quot;/2019/04/17/nutch-from-java.html&quot;&gt;Nutch&lt;/a&gt;,
this one about &lt;a href=&quot;/2014/07/20/liquibase-in-maven.html&quot;&gt;Liquibase&lt;/a&gt;,
or this one about &lt;a href=&quot;/2014/06/21/casperjs-with-maven.html&quot;&gt;CasperJS&lt;/a&gt;.
My depression completely goes away. I don’t hate myself anymore, don’t hate
my job, and don’t hate the developers of those “stupid” libraries. I even
help their projects with my blog posts.&lt;/p&gt;

&lt;p&gt;How do I decide which way to choose: to behave like a bad programmer
or like a good one? You may think it depends on the time/budget I have
for the job at hand, but you would be wrong. It totally depends on my
&lt;em&gt;readiness&lt;/em&gt; to live in depression.&lt;/p&gt;

&lt;p&gt;Some time ago I told myself that I won’t do it anymore. I don’t want to be
a &lt;em&gt;monkey&lt;/em&gt; flying an aircraft. I want to be a &lt;em&gt;pilot&lt;/em&gt;. Of course, the learning
curve will be longer, but the result is … joy. I do enjoy my work when I clearly
and transparently see the logic of every line of code I write. I know exactly
why I write them, what they do, and what will happen if I change them. I don’t
know all the details, of course, I know where to click in order to find those
details. This is what makes my work fun for me: the transparency of my
coding logic.&lt;/p&gt;

&lt;p&gt;I truly enjoy being in charge of everything my code does. I love to feel that it
does exactly what I want it to do. You may say I’m a control freak—maybe so.
But this is where I’ve been getting most of the fun, over the last 30 years of coding:
seeing computers do what I want. If some libraries try to take this away from me, putting
me in the passenger’s seat, I will do everything I can to get back in the
driving seat. I want to know what’s going on and I want this to happen according
to my will. I want to enjoy my work.&lt;/p&gt;

&lt;p&gt;Now, back to my conference talk. I’m going to show this piece of code in one of my slides
(this is how &lt;a href=&quot;https://spring.io/&quot;&gt;Spring Framework&lt;/a&gt; is supposed to be used):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I will ask a question: Do you know who is making an instance of the &lt;code&gt;HelloController&lt;/code&gt;
class and how that instance is being used? Who is calling its methods, why
and when? Moreover, do you know how to modify that behavior? My point
at the conference will be that a good framework must make it easier for
its users to understand its &lt;em&gt;internals&lt;/em&gt;. Because good programmers do want
to know what’s inside. Bad programmers, on the other hand, are OK with
being aircraft-flying monkeys.&lt;/p&gt;

&lt;p&gt;What about you?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html">Yesterday I was working with a slide deck for one of my future talks about Java and object-oriented programming and got stuck at finding convincing arguments for the transparency of logic. I was going to say that it is important for programmers to be able to understand how everything they do works, even if they don’t see it or never want to see it. But then I realized that maybe not everybody thinks that way. Maybe some programmers prefer to stay in the dark about the majority of things, as long as the code in front of them “just works.” Hence this blog post, to ask you which side you are on.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/07/boardwalk-empire.jpg" /></entry><entry><title type="html">Inversive Management</title><link href="https://www.yegor256.com/2019/07/10/inversive-management.html" rel="alternate" type="text/html" title="Inversive Management" /><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/07/10/inversive-management</id><content type="html" xml:base="https://www.yegor256.com/2019/07/10/inversive-management.html">&lt;p&gt;If you are a &lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;manager&lt;/a&gt;
in a software team, your job
is to make your people get things done. This is obvious. The question though is
how exactly you make it happen. How do you make them do what &lt;em&gt;you&lt;/em&gt; want, according
to &lt;em&gt;your&lt;/em&gt; plans, achieving &lt;em&gt;your&lt;/em&gt; objectives, to &lt;em&gt;your&lt;/em&gt; quality standards,
and within the borders of &lt;em&gt;your&lt;/em&gt; requirements and expectations? Some of you
may say that these are &lt;em&gt;our&lt;/em&gt; objectives, &lt;em&gt;our&lt;/em&gt; mutual plans, &lt;em&gt;our&lt;/em&gt; quality
standards, and &lt;em&gt;our&lt;/em&gt; requirements. This may be true, but initially they are still only yours.
How do you make them theirs? There are two ways: a traditional one and an &lt;em&gt;inversive&lt;/em&gt;
one.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Gambler (2014) by Rupert Wyatt&quot; src=&quot;/images/2019/07/the-gambler.jpg&quot; longdesc=&quot;#dfa9af9a&quot; /&gt;&lt;figcaption id=&quot;dfa9af9a&quot;&gt;The Gambler (2014) by Rupert Wyatt&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is how it works, over and over again. First you hire them, and all of them are experts.
Well, most of them. At least this is what their resumes say. Then you sit together and define a plan.
It looks doable and you &lt;a href=&quot;/2019/05/28/trust-or-not.html&quot;&gt;trust&lt;/a&gt; them.
They start working and soon enough you realize that some of them
are lagging behind the promises made in the plan. You start &lt;del&gt;begging&lt;/del&gt; asking them
to correct, to improve, to be more effective, to be more responsive,
to commit, and to stay focused. You may even hire an Agile coach to train them.
They improve, but not for long.&lt;/p&gt;

&lt;p&gt;You have “to stay on top of things” and never miss anything, if you want the project to succeed.
You have to &lt;em&gt;care&lt;/em&gt;. You have to be in the office all the time.
You know, from your experience, that without your permanent attention
people don’t do what they are supposed to do. Eventually you start believing,
together with &lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Drucker&quot;&gt;Peter Drucker&lt;/a&gt;,
that “management is art” since you never know exactly how you have to
&lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;support&lt;/a&gt; each of them,
because every person is a Universe and must be taken care of, individually.&lt;/p&gt;

&lt;p&gt;This is traditional management and it’s all about &lt;em&gt;you&lt;/em&gt;.
You have to &lt;em&gt;care&lt;/em&gt;, you have to &lt;em&gt;worry&lt;/em&gt;, you have to &lt;em&gt;be there&lt;/em&gt; to make
things happen, and you have to &lt;em&gt;chase&lt;/em&gt; them. You &lt;em&gt;need&lt;/em&gt; their results
and they may provide them… if they feel like it. If you don’t
&lt;em&gt;collect&lt;/em&gt; the results, you most probably won’t get anything, or very little.&lt;/p&gt;

&lt;p&gt;There is, however, a better alternative, which looks
like &lt;em&gt;inversive management&lt;/em&gt; to me. Here is a practical example. I hired
a researcher a few days ago. She was supposed to find and build me a list
of the most influential Twitter accounts of tech journalists. Here is how
she suggested I structure our contract: “You pay me $5 per hour.”
This would be traditional management. She works and I
chase her, asking how is it going, is it a good quality list, is it big
enough, are there any problems with finding the right people, and so on.
I would have to worry about this small project.&lt;/p&gt;

&lt;p&gt;Here is what I suggested instead: “I pay you $40 when the list is complete.”
Now she has to chase me, to deliver the list to me and to collect the payment.
She has to convince me that the list is good, long enough, and of
good quality. She has to worry about the deadline, about the requirements,
and about all the other problems related to the work. They’re all her troubles.&lt;/p&gt;

&lt;p&gt;I made her chase me.&lt;/p&gt;

&lt;p&gt;This, I believe, is the cure for all management problems:
&lt;strong&gt;make them chase you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;How do you do that? Just like I did—you turn yourself into a &lt;em&gt;buyer&lt;/em&gt;
making them be &lt;em&gt;sellers&lt;/em&gt; of their results. You’ve got the resources (money), which
you are ready to release if your people provide you what you need. Obviously,
you don’t need them &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;&lt;em&gt;to work&lt;/em&gt;&lt;/a&gt;,
you need their &lt;em&gt;results&lt;/em&gt;, such as a list of emails, a new
feature, a bug fix, a new document, or maybe a new UI mock-up.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;This is the cure for all management problems: make them chase you.
&lt;/aside&gt;

&lt;p&gt;You, as a pragmatic and smart project manager, define what the project
needs from its participants, you put a &lt;em&gt;price tag&lt;/em&gt; on each need, and let programmers
worry about how they deliver, how they solve their own problems, and
how to convince you that their results are good enough to be paid for.&lt;/p&gt;

&lt;p&gt;Of course, it’s easy to put a price tag on a simple gig, like building
a list of Twitter accounts. It’s much
more difficult to do the same for a complex task, like writing source
code or administering a database. However, if you don’t do it,
you will be &lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;managed&lt;/a&gt;
by your programmers, not the other way around. You will
have to constantly chase them and literally beg for results. They will
be relaxed, you will be worried. They will get paid, you will be
&lt;a href=&quot;/2019/06/19/how-much-they-suffer.html&quot;&gt;punished&lt;/a&gt;
for their mistakes.&lt;/p&gt;

&lt;p&gt;I suggest you &lt;em&gt;invert&lt;/em&gt; the situation and let &lt;em&gt;them&lt;/em&gt; worry.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">If you are a manager in a software team, your job is to make your people get things done. This is obvious. The question though is how exactly you make it happen. How do you make them do what you want, according to your plans, achieving your objectives, to your quality standards, and within the borders of your requirements and expectations? Some of you may say that these are our objectives, our mutual plans, our quality standards, and our requirements. This may be true, but initially they are still only yours. How do you make them theirs? There are two ways: a traditional one and an inversive one.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/07/the-gambler.jpg" /></entry><entry><title type="html">TDD Misbeliefs</title><link href="https://www.yegor256.com/2019/07/02/tdd-misbeliefs.html" rel="alternate" type="text/html" title="TDD Misbeliefs" /><published>2019-07-02T00:00:00+00:00</published><updated>2019-07-02T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/07/02/tdd-misbeliefs</id><content type="html" xml:base="https://www.yegor256.com/2019/07/02/tdd-misbeliefs.html">&lt;p&gt;While I was working with a
&lt;a href=&quot;/2017/03/24/tdd-that-works.html&quot;&gt;previous article&lt;/a&gt; about
Test-Driven Development (TDD)
I read many blog posts and a few books on the subject and found
out that I disagree with a few of them; even some that are pretty important.
It seems that most software experts simply misunderstand how software
development works. Maybe because they are not really programmers, but
are instead book authors and conference speakers.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;La Vénus à la fourrure (2013) by Roman Polanski&quot; src=&quot;/images/2019/07/la-venus-a-la-fourrure.jpg&quot; longdesc=&quot;#4ef642ba&quot; /&gt;&lt;figcaption id=&quot;4ef642ba&quot;&gt;La Vénus à la fourrure (2013) by Roman Polanski&lt;/figcaption&gt;&lt;/figure&gt;

&lt;!-- ************************************************************** --&gt;
&lt;p&gt;Robert Martin
(&lt;a href=&quot;https://twitter.com/unclebobmartin&quot;&gt;@unclebobmartin&lt;/a&gt;)
in &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html&quot;&gt;The Cycles Of TDD&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the changes you make to the production code, pursuant to a test,
  make that test pass, but would not make other unwritten tests pass,
  then you are likely making the production code too specific.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;red&quot;&gt;I disagree&lt;/span&gt;.
This statement goes against the very philosophy of testing: “a passing test
is a &lt;em&gt;weak&lt;/em&gt; test.” Unfortunately, a traditional understanding of testing
is quite the opposite: tests &lt;em&gt;must pass&lt;/em&gt; to make us happy. Thus, if we
keep thinking about how to make our future tests pass we will shoot
ourselves in the foot: tests will pass and the code quality will go down.
Instead, we must design our code in a way that makes it easy to break with
the future tests. The code must help its tests to break it! Because
a test that is easy to make “red” is a good test. A test that is always
“green” is a useless test. Uncle Bob, I’m sure, is aware of that.&lt;/p&gt;

&lt;!-- ************************************************************** --&gt;
&lt;p&gt;James Shore
(&lt;a href=&quot;https://twitter.com/jamesshore&quot;&gt;@jamesshore&lt;/a&gt;)
in &lt;a href=&quot;http://www.jamesshore.com/Blog/Red-Green-Refactor.html&quot;&gt;Red-Green-Refactor&lt;/a&gt;
(Nov 2005):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’ll run through several cycles very quickly, then find yourself
  slowing down and spending more time on refactoring.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;red&quot;&gt;I disagree&lt;/span&gt;.
I have nothing against the first two steps: 1) the test is “red” because
it doesn’t pass, and 2) the test is “green” when the code is fixed and
passes. I disagree that refactoring is a responsibility of the person
who fixes the test. If the code needs refactoring, it’s a &lt;em&gt;bug&lt;/em&gt;, just
like any other bug, either functional or design. It has to be reported,
assigned and paid for. We must not do any code modifications, no matter
how good our intentions are, if they are not required &lt;em&gt;and paid for&lt;/em&gt;. Refactoring
after fixing the test is a frivolous violation of management and coordination
structure in a project.&lt;/p&gt;

&lt;!-- ************************************************************** --&gt;
&lt;p&gt;Robert Martin
(&lt;a href=&quot;https://twitter.com/unclebobmartin&quot;&gt;@unclebobmartin&lt;/a&gt;)
in &lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2014/04/30/When-tdd-does-not-work.html&quot;&gt;When TDD doesn’t work&lt;/a&gt;
(April 2014):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You don’t have to write tests for Test Doubles because
  the actual unit tests and the production code are
  the tests for those pieces of code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;red&quot;&gt;I disagree&lt;/span&gt;.
Test Doubles (also known as
&lt;a href=&quot;/2014/09/23/built-in-fake-objects.html&quot;&gt;fake objects&lt;/a&gt;)
are the tools that help us find our where the code is broken. If the tool
is unreliable, how can we test our code against it? This reminds me of an old
joke where a patient comes to the doctor and says “Help me doc, my body hurts anywhere
I touch it with my finger!”, and the doctor answers
“It’s just your finger — it’s broken!” A very similar situation occurs here:
If we test our production objects with broken Test Doubles, they will all look
broken.&lt;/p&gt;

&lt;!-- ************************************************************** --&gt;
&lt;p&gt;David Heinemeier Hansson
(&lt;a href=&quot;https://twitter.com/dhh&quot;&gt;@dhh&lt;/a&gt;)
in &lt;a href=&quot;https://signalvnoise.com/posts/3159-testing-like-the-tsa&quot;&gt;Testing like the TSA&lt;/a&gt;
(April 2012):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code-to-test ratios above 1:2 is a smell, above 1:3 is a stink.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;red&quot;&gt;I disagree&lt;/span&gt;.
I don’t know exactly what units of measurement were used to compare the
“code” and the “test”, but I can only assume Lines-of-Code. I was curious and
decided to calculate this ratio in a few projects of mine. First, I tried
&lt;a href=&quot;https://github.com/jcabi/jcabi-github&quot;&gt;jcabi-github&lt;/a&gt;,
an immutable GitHub Java API client. The numbers were:
9.8K LoC in production classes,
6.2K in built-in fake classes, and
16.2K in test classes.
Thus, the ratio was 9.8 to 22.4, which meant 1:2.3. Somewhere between
a “smell” and a “stink”, according to David. Then I calculated the ratio
for a few other projects of mine:
&lt;a href=&quot;https://github.com/jcabi/jcabi-http&quot;&gt;jcabi-http&lt;/a&gt; (1:1),
&lt;a href=&quot;https://github.com/yegor256/xembly&quot;&gt;xembly&lt;/a&gt; (1:0.92),
&lt;a href=&quot;https://github.com/yegor256/takes&quot;&gt;takes&lt;/a&gt; (1:0.91), and
&lt;a href=&quot;https://github.com/yegor256/rultor&quot;&gt;rultor&lt;/a&gt; (1:0.6). It seems that the higher
the ratio the higher my &lt;em&gt;confidence&lt;/em&gt; in the product’s quality. Thus, I don’t think that
it’s a smell or a stink. Instead, in a yummy-scented product the amount
of test code is a few times larger than its production counterpart.&lt;/p&gt;

&lt;!-- ************************************************************** --&gt;
&lt;p&gt;Kent Beck
(&lt;a href=&quot;https://twitter.com/kentbeck&quot;&gt;@kentbeck&lt;/a&gt;)
in
&lt;a href=&quot;http://stackoverflow.com/questions/153234/how-deep-are-your-unit-tests/153565#153565&quot;&gt;How deep are your unit tests?&lt;/a&gt;
(Sep 2008):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I get paid for code that works, not for tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;red&quot;&gt;I disagree&lt;/span&gt;.
Tests are not a separate product which either we are paid for or not.
Tests are part of the code. An instrument of its development, maintenance
and validation. Tests are similar to, say, file names. We don’t write
our code naming all the files &lt;code&gt;1.java&lt;/code&gt;, &lt;code&gt;2.java&lt;/code&gt;, &lt;code&gt;234.java&lt;/code&gt;, and then
say: “Now you pay me so that I can rename them properly.” That would be weird,
right? That’s how the statement “I’m not paid for writing tests” sounds
to me: weird. Do we really have to be paid to name files correctly? We just
do it, because it’s convenient for us. Because proper self-descriptive
file names make our code more readable and maintainable. It’s impossible to
imagine a modern maintainable code base without tests. I would actually
suggest changing that phrase to: “I get paid for code that is tested, not
just for code.”&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What do you do if a customer says: &amp;quot;I won&amp;#39;t pay for unit tests&amp;quot;? &lt;a href=&quot;https://twitter.com/hashtag/codeahead?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#codeahead&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1150321038674354176?ref_src=twsrc%5Etfw&quot;&gt;July 14, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;I will keep updating this post. If you know a “good” article about TDD,
please send it &lt;a href=&quot;mailto:tdd@yegor256.com&quot;&gt;my way&lt;/a&gt;; maybe I’ll find
something interesting to quote from it.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><summary type="html">While I was working with a previous article about Test-Driven Development (TDD) I read many blog posts and a few books on the subject and found out that I disagree with a few of them; even some that are pretty important. It seems that most software experts simply misunderstand how software development works. Maybe because they are not really programmers, but are instead book authors and conference speakers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/07/la-venus-a-la-fourrure.jpg" /></entry><entry><title type="html">SyncEm: Thread-Safe Decorators in Ruby</title><link href="https://www.yegor256.com/2019/06/26/syncem.html" rel="alternate" type="text/html" title="SyncEm: Thread-Safe Decorators in Ruby" /><published>2019-06-26T00:00:00+00:00</published><updated>2019-06-26T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/06/26/syncem</id><content type="html" xml:base="https://www.yegor256.com/2019/06/26/syncem.html">&lt;p&gt;I wrote some time ago about thread-safety in OOP and how it can
be achieved with &lt;a href=&quot;/2017/01/17/synchronized-decorators.html&quot;&gt;decorators&lt;/a&gt;.
It was also said that it’s very important to make sure objects are thread-safe
(&lt;a href=&quot;/2018/11/06/ruby-threads.html&quot;&gt;in Ruby&lt;/a&gt; and
&lt;a href=&quot;/2018/03/27/how-to-test-thread-safety.html&quot;&gt;in Java&lt;/a&gt;),
especially in web apps, which are multi-threaded (well, in most
cases anyway). Well, here is &lt;a href=&quot;https://github.com/yegor256/syncem&quot;&gt;SyncEm&lt;/a&gt;,
a primitive Ruby gem which makes the above possible with a single decorator.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Look at this simple Ruby web app, which increments the internal counter
on every web click:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:visits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Visits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/*&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your visit is no.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to count visits it uses class &lt;code&gt;Visits&lt;/code&gt;, which may be
defined this way (it keeps the counter in a file):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Visits&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;idx.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;idx.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;idx.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is not thread-safe. Try to run this app and you will see that,
if you make many concurrent HTTP requests to the front page,
the counter will not always return consecutive numbers.&lt;/p&gt;

&lt;p&gt;To make it thread-safe you can use &lt;a href=&quot;https://github.com/yegor256/syncem&quot;&gt;SyncEm&lt;/a&gt;,
a small Ruby gem, which I created just a few months ago. Here is how:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;syncem&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:visits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SyncEm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Visits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Same as above&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we just &lt;em&gt;decorate&lt;/em&gt; the object with a thread-safe decorator, which
intercepts all calls to all methods of an object and make them all
synchronized with a single encapsulated semaphore:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SyncEm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Visits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This mechanism will only work in Ruby or similar
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreted_language&quot;&gt;interpreted&lt;/a&gt; languages.
I would not be able to do the same in Java or C++. But in Ruby, Python,
PHP, JavaScript and many others, similar decorators may be very useful.&lt;/p&gt;

&lt;p&gt;I’m using it in &lt;a href=&quot;https://github.com/zold-io/wts.zold.io&quot;&gt;this web app&lt;/a&gt;, for example.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="ruby" /><summary type="html">I wrote some time ago about thread-safety in OOP and how it can be achieved with decorators. It was also said that it’s very important to make sure objects are thread-safe (in Ruby and in Java), especially in web apps, which are multi-threaded (well, in most cases anyway). Well, here is SyncEm, a primitive Ruby gem which makes the above possible with a single decorator.</summary></entry><entry><title type="html">How Much Do They Suffer?</title><link href="https://www.yegor256.com/2019/06/19/how-much-they-suffer.html" rel="alternate" type="text/html" title="How Much Do They Suffer?" /><published>2019-06-19T00:00:00+00:00</published><updated>2019-06-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/06/19/how-much-they-suffer</id><content type="html" xml:base="https://www.yegor256.com/2019/06/19/how-much-they-suffer.html">&lt;p&gt;Remember the famous article
&lt;a href=&quot;http://hbr.org/1999/11/management-time-whos-got-the-monkey/ar/1&quot;&gt;&lt;em&gt;Who’s Got the Monkey?&lt;/em&gt;&lt;/a&gt;
The gist of it is simple: good managers always make their subordinates
responsible for their own results. When they attempt to send the monkey back
to the manager’s shoulders by making excuses, the manager has to be on the alert and
not accept the monkey, always keeping workers fully accountable and responsible
for what they are doing. It’s a terrific principle, but it doesn’t work for most
managers. Here is why. Let me tell you a story.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Moonrise Kingdom (2012) by Wes Anderson&quot; src=&quot;/images/2019/06/moonrise-kingdom.jpg&quot; longdesc=&quot;#5255722e&quot; /&gt;&lt;figcaption id=&quot;5255722e&quot;&gt;Moonrise Kingdom (2012) by Wes Anderson&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;I was having dinner yesterday with a friend of mine, long after work hours,
when she suddenly exclaimed, “Damn, I forgot something!” and she ran away. When she
came back half an hour later I asked what had happened. She said that her marketing
team of two guys were at an expo in another country and had asked her
to help them upload some videos to their YouTube channel. They needed
those videos for the upcoming conference next morning and she was the only
one who had access to the channel. I didn’t get all the technical details, but
I asked her why she was worried about it so much. She said that if she didn’t
help them, they would not be able to complete their expo mission properly,
which would mean a failure for her, a co-founder of the startup. It sounded
like this, literally:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Me: “Why do you have to worry?” Her: “It’s my startup, duh!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is what happened in “monkey” terms:&lt;/p&gt;

&lt;p&gt;She &lt;em&gt;delegated&lt;/em&gt; the expo job and gave them the monkey (the responsibility). They
asked her to help them and sent the monkey &lt;em&gt;back&lt;/em&gt; to her. She was sitting
with the monkey on her shoulders while having dinner with me. It was only
a matter of luck that she even remembered it. If she hadn’t, the expo
job would have failed. Who would’ve been guilty? She would. They’d have the perfect
excuse: “We asked you for help and you forgot, don’t blame us!”&lt;/p&gt;

&lt;p&gt;I’ve seen many similar stories, haven’t you?&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Professional employees should always do everything possible to send monkeys back to their bosses.
&lt;/aside&gt;

&lt;p&gt;To be honest, professional employees should
&lt;a href=&quot;/2018/04/17/how-to-be-lazy.html&quot;&gt;always&lt;/a&gt; do everything possible to
send monkeys back to their bosses. Only those
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;slaves&lt;/a&gt; who are junior and incompetent
always try to do everything
&lt;a href=&quot;/2015/01/26/happy-boss-false-objective.html&quot;&gt;the boss says&lt;/a&gt;, making no attempts
to “fight back” and win some room for excuses. Seasoned experts
&lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;know how&lt;/a&gt;
to manage their &lt;del&gt;owners&lt;/del&gt; managers. Thus, those two expo guys did
everything right. The mistake was on the co-founder’s side:&lt;/p&gt;

&lt;p&gt;She didn’t make them worry &lt;em&gt;enough&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The result of the expo was very important for her and she was expecting it.
She hired two guys to attend the expo and bring back some leads, or whatever
else they had to bring back. She explained to them how important it was. Obviously,
however, it was not enough.&lt;/p&gt;

&lt;p&gt;They still worried &lt;em&gt;less&lt;/em&gt; than she did.&lt;/p&gt;

&lt;p&gt;That’s why they were not calling her every minute asking for the videos
they needed. That’s why they didn’t plan it all properly upfront and instead left
it till the last moment. That’s why she was the only one worrying.&lt;/p&gt;

&lt;p&gt;By “worry” I mean two things that go together: reward and punishment—even though some people
prefer to call them consequences. No matter what you call them, there are
both positive and negative things that happen if you succeed or fail. My friend,
the co-founder, knew very well what the reward would be if the expo went well,
and what the punishment would be, for her personally, if the expo failed. However,
she didn’t transfer these two things to her employees &lt;em&gt;proportionally&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As she explained to me, they were getting &lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;monthly salaries&lt;/a&gt;
and some bonuses for each lead they brought back. When I asked about the absolute
amounts, she told me that the bonuses are much smaller than the salary,
“&lt;em&gt;of course&lt;/em&gt;.” How can we expect them to worry about the leads, if we
clearly demonstrate our priorities: salary first, results second.&lt;/p&gt;

&lt;p&gt;This is what was wrong.&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Leaders decompose and delegate the scope of the work, but forget to decompose and delegate the consequences.
&lt;/aside&gt;

&lt;p&gt;The job of a &lt;em&gt;leader&lt;/em&gt; is to decompose a larger objective into smaller ones
and delegate them to subordinates. An objective means the &lt;em&gt;consequences&lt;/em&gt;
those subordinates will have to face when they either fail or succeed. However, what
happens in most cases? Leaders decompose and delegate the scope of the work, but forget
to decompose and delegate the consequences. A monthly salary is &lt;em&gt;not&lt;/em&gt; the
right way to delegate consequences. Moreover, it is a particularly bad way, because
it sends a &lt;a href=&quot;/2019/05/28/trust-or-not.html&quot;&gt;false message&lt;/a&gt; to subordinates:
you are doing great until I fire you, and there is nothing in the middle.&lt;/p&gt;

&lt;p&gt;Most likely they won’t be fired for the missed video. Instead they have
a good excuse: “We asked you to help us and you forgot; where are our paychecks?”&lt;/p&gt;

&lt;p&gt;Simply put, good managers know how to make the suffering of their
subordinates more hurtful to them than the mistakes they make are
hurtful to the project. The same is true about the rewards.&lt;/p&gt;

&lt;p&gt;Of course it’s impossible to put the blame for the entire business failure
on a single employee, just like it’s impossible to reward a single
employee for the overall success of the company. But it’s necessary to make
all team members win and lose &lt;em&gt;proportionally&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, it’s not a team.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What will your boss do if you miss a deadline? &lt;a href=&quot;https://twitter.com/hashtag/xdsd?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#xdsd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1147796639983263744?ref_src=twsrc%5Etfw&quot;&gt;July 7, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Remember the famous article Who’s Got the Monkey? The gist of it is simple: good managers always make their subordinates responsible for their own results. When they attempt to send the monkey back to the manager’s shoulders by making excuses, the manager has to be on the alert and not accept the monkey, always keeping workers fully accountable and responsible for what they are doing. It’s a terrific principle, but it doesn’t work for most managers. Here is why. Let me tell you a story.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/06/moonrise-kingdom.jpg" /></entry><entry><title type="html">Where Do You Seek Help First?</title><link href="https://www.yegor256.com/2019/06/11/where-do-you-seek-help.html" rel="alternate" type="text/html" title="Where Do You Seek Help First?" /><published>2019-06-11T00:00:00+00:00</published><updated>2019-06-11T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/06/11/where-do-you-seek-help</id><content type="html" xml:base="https://www.yegor256.com/2019/06/11/where-do-you-seek-help.html">&lt;p&gt;Just a few days ago a friend of mine, who is not a developer but a
co-founder of a software startup, asked me to help his programmers with
a technical problem they got stuck with. I said “Why not?” and asked
them what was going on. They told me that their PostgreSQL server was running
slow because it was doing this and that, and when they restarted it
it was repeating this and that… Long story short, I had no idea what they were talking about,
even though I was a user of PostgreSQL for many years. My first reaction was:
“Have you posted a question on StackOverflow yet?” They answered:
“We still &lt;em&gt;hope&lt;/em&gt; that that won’t be necessary.” I replied, surprised: “Huh?”&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Tribe (2014) by Myroslav Slaboshpytskyi&quot; src=&quot;/images/2019/06/the-tribe.jpg&quot; longdesc=&quot;#80dd8b8a&quot; /&gt;&lt;figcaption id=&quot;80dd8b8a&quot;&gt;The Tribe (2014) by Myroslav Slaboshpytskyi&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Why was &lt;a href=&quot;https://stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt; their last resort? They didn’t explain, but I believe
I know the answer: they would feel ashamed. For them StackOverflow is a place
for losers who can’t solve problems by themselves. It is a place
for those who are not worth the money their &lt;del&gt;owners&lt;/del&gt; bosses pay
them. It is a place where lazy programmers ask questions and expect answers
instead of working hard in their offices and resolving everything on their own.&lt;/p&gt;

&lt;p&gt;This is the mentality of a &lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;slave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the mentality of someone who is paid
&lt;a href=&quot;/2015/07/21/hourly-pay-modern-slavery.html&quot;&gt;for the time&lt;/a&gt; they spend in the office
or in front of the computer, not for the results they deliver. It is only logical
that if they are paid for &lt;em&gt;being programmers&lt;/em&gt;, seeking help at StackOverflow
is a declaration of incompetence. You do it once, you will be excused, you do
it twice, your boss will &lt;a href=&quot;/2015/09/22/micromanagement.html&quot;&gt;start wondering&lt;/a&gt;
whether you are the right resource
to be spending money on. But if you do it regularly—you will
&lt;a href=&quot;/2016/01/05/how-to-punish-employees.html&quot;&gt;definitely&lt;/a&gt;
be &lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;fired&lt;/a&gt;.
Thus, a good slave doesn’t do that. A good slave does everything
possible to &lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;&lt;em&gt;look&lt;/em&gt;&lt;/a&gt;
busy and competent.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=_4pk5GNUySg&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/_4pk5GNUySg/mqdefault.jpg&quot; alt=&quot;YouTube video #_4pk5GNUySg&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M91: Full-timers want to look smart, freelancers want to deliver results;
        11 June 2019.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Are you a slave?&lt;/p&gt;

&lt;p&gt;Now, to the contrary, someone who is paid &lt;a href=&quot;https://www.zerocracy.com&quot;&gt;for the results delivered&lt;/a&gt;
has a completely
&lt;a href=&quot;/2018/04/17/how-to-be-lazy.html&quot;&gt;different&lt;/a&gt; mindset.
Why would StackOverflow be a &lt;em&gt;last resort&lt;/em&gt; for a freelancer,
who is paid for the problems they manage to solve, no matter how much time they
spend on them nor where they seek help? Moreover, the
&lt;a href=&quot;/2015/01/15/how-to-cut-corners.html&quot;&gt;faster&lt;/a&gt; such a freelancer
can &lt;a href=&quot;/2018/01/23/sociotech-skills.html&quot;&gt;find help&lt;/a&gt;,
the better an engineer he or she is.&lt;/p&gt;

&lt;p&gt;In the story above, my friend had the right mindset. The moment he found
out that his team couldn’t solve the problem, he came to me, and a few other
people. He was not a software developer, that’s why he didn’t know about
StackOverflow. But he was seeking help everywhere &lt;em&gt;around&lt;/em&gt; his team, while
his &lt;del&gt;slaves&lt;/del&gt; programmers were trying to find a solution by themselves.&lt;/p&gt;

&lt;p&gt;Maybe that’s why he is a co-founder and they are his employees?&lt;/p&gt;

&lt;p&gt;Now, here is my short list of places &lt;em&gt;you&lt;/em&gt; should
seek help when you don’t know what to do with your PostgreSQL and you have no time.
The list is ordered. The places where you &lt;em&gt;start&lt;/em&gt; are at the top,
the last resort is at the bottom:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Search in Google&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Post to StackOverflow&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read books&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ask friends&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep trying&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me emphasize again: it depends on who you are. If you are a slave on
a payroll and feel happy about that, you should not listen to the advice in this
blog post. It will only ruin your &lt;a href=&quot;/2017/01/24/career-advice.html&quot;&gt;career&lt;/a&gt;.
However, if you are a freelancer, stop being embarrassed for not knowing something!&lt;/p&gt;

&lt;aside class=&quot;quote&quot;&gt;Your job is not to know or to be smart. Your jobs is to find solutions and fix problems.
&lt;/aside&gt;

&lt;p&gt;Your job is &lt;a href=&quot;/2015/02/16/it-is-not-a-school.html&quot;&gt;not&lt;/a&gt;
&lt;em&gt;to know&lt;/em&gt; or &lt;em&gt;to be smart&lt;/em&gt;. Your jobs is to find solutions
and fix problems. How you do that is your &lt;em&gt;own business&lt;/em&gt;. It’s not the
business of your boss, your &lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project manager&lt;/a&gt;,
or your product owner.&lt;/p&gt;

&lt;p&gt;Each &lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;(micro-)task&lt;/a&gt;
you resolve has a &lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;budget&lt;/a&gt;
and you are &lt;a href=&quot;/2014/04/15/definition-of-done.html&quot;&gt;fully responsible&lt;/a&gt; for
it while it is assigned to you. You solve it the way &lt;em&gt;you&lt;/em&gt; want it to be solved.&lt;/p&gt;

&lt;p&gt;Don’t be ashamed of asking for help, just like my friend was not ashamed
of telling me that his team couldn’t fix the PostgreSQL issue. He was thinking
about his business results, not about what I would think about him and his
team. He didn’t care about that. He needed the bloody PostgreSQL to work!&lt;/p&gt;

&lt;p&gt;Do the same. Be a business man, not a slave.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">Just a few days ago a friend of mine, who is not a developer but a co-founder of a software startup, asked me to help his programmers with a technical problem they got stuck with. I said “Why not?” and asked them what was going on. They told me that their PostgreSQL server was running slow because it was doing this and that, and when they restarted it it was repeating this and that… Long story short, I had no idea what they were talking about, even though I was a user of PostgreSQL for many years. My first reaction was: “Have you posted a question on StackOverflow yet?” They answered: “We still hope that that won’t be necessary.” I replied, surprised: “Huh?”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/06/the-tribe.jpg" /></entry><entry><title type="html">Trust Them to Get the Job Done, Not!</title><link href="https://www.yegor256.com/2019/05/28/trust-or-not.html" rel="alternate" type="text/html" title="Trust Them to Get the Job Done, Not!" /><published>2019-05-28T00:00:00+00:00</published><updated>2019-05-28T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/05/28/trust-or-not</id><content type="html" xml:base="https://www.yegor256.com/2019/05/28/trust-or-not.html">&lt;p&gt;There are &lt;a href=&quot;/2016/07/11/mistakes-in-agile-manifesto.html&quot;&gt;twelve&lt;/a&gt;
principles in the &lt;a href=&quot;http://agilemanifesto.org/principles.html&quot;&gt;Agile Manifesto&lt;/a&gt;.
The fifth one says: “Build projects around motivated individuals.
Give them the environment and support they need,
and trust them to get the job done.”
I disagree. Strongly. This formula suggests treating people in a binary way: they
are either motivated and trusted or … what? They have to be let go?
This mindset is very typical, according to my observations, and leads
to &lt;a href=&quot;/2017/11/21/trust-pay-lose.html&quot;&gt;poor management&lt;/a&gt; and project failures.
Instead, our people management must be more &lt;em&gt;iterative&lt;/em&gt; and much less &lt;em&gt;rigid&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Metro Manila (2013) by Sean Ellis&quot; src=&quot;/images/2019/05/metro-manila.jpg&quot; longdesc=&quot;#14b89672&quot; /&gt;&lt;figcaption id=&quot;14b89672&quot;&gt;Metro Manila (2013) by Sean Ellis&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Just a few days ago I posted a &lt;a href=&quot;https://www.instagram.com/p/Bx6gJAngsT5/&quot;&gt;quote&lt;/a&gt; from
&lt;a href=&quot;/code-ahead.html&quot;&gt;&lt;em&gt;Code Ahead&lt;/em&gt;&lt;/a&gt;, my recent book about
software engineering, on Instagram. I’ve got an interesting and very typical
response from one of my readers (polished a bit):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why should I get punished in the first place;
  if my mistake is unforgiven they should fire me, and I believe this
  is less humiliating than getting punished and then staying with them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what I hear almost always when I start talking about rewards and
punishment in a software team. I hear that it is &lt;em&gt;humiliating&lt;/em&gt; and
programmers should &lt;em&gt;never&lt;/em&gt; be punished. Instead, as &lt;a href=&quot;https://www.instagram.com/samir.bouazza.2017/&quot;&gt;Samir&lt;/a&gt;
suggested, they should be fired when they make
an &lt;em&gt;unforgiven&lt;/em&gt; mistake. Thus, we either trust them 100% or, when a mistake
happens, we … fire the bloody bastard, he was useless anyway!&lt;/p&gt;

&lt;p&gt;Well, maybe this is part of human nature: First we love, then we hate, and
&lt;a href=&quot;https://drhurd.com/2018/04/29/stronger-love-stronger-hate/&quot;&gt;the stronger we love, the stronger we hate&lt;/a&gt;.
But what do these emotions have to do with professional
&lt;a href=&quot;/2016/05/24/who-is-project-manager.html&quot;&gt;project management&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://en.wikipedia.org/wiki/W._Edwards_Deming&quot;&gt;William Edwards Deming&lt;/a&gt;
suggested many years ago, good management is always about a simple
&lt;a href=&quot;https://en.wikipedia.org/wiki/PDCA&quot;&gt;Plan-Do-Check-Act&lt;/a&gt; cycle.
No matter what and who we manage, we have to &lt;em&gt;plan&lt;/em&gt; first,
let ourselves and our people &lt;em&gt;do&lt;/em&gt; the work, then &lt;em&gt;check&lt;/em&gt; what the results look like, comparing
them with our plans, and finally &lt;em&gt;act&lt;/em&gt; according to the findings, correcting
the plans. Then, we go back to the planning part and the cycle starts
over again:&lt;/p&gt;

&lt;figure class=&quot;unprintable&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/4/42/PDCA-Multi-Loop.png&quot; itemprop=&quot;image&quot; style=&quot;width:600px;max-width:100%;&quot; alt=&quot;The figure&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;We all know that this is how software has to be developed. Many years ago
we all realized that a &lt;a href=&quot;https://en.wikipedia.org/wiki/Waterfall_model&quot;&gt;Waterfall model&lt;/a&gt;,
where everything was planned upfront
and then implemented according to the plans, which didn’t change during the
course of the project, was a bad idea. A much better idea is to deliver
the software &lt;a href=&quot;https://en.wikipedia.org/wiki/Incremental_build_model&quot;&gt;incrementally&lt;/a&gt;,
making changes to the plans and specifications
after each iteration. This &lt;a href=&quot;https://en.wikipedia.org/wiki/Iterative_and_incremental_development&quot;&gt;guarantees&lt;/a&gt;
higher quality, faster reaction to mistakes,
and a much better predictability. It’s obvious, right?&lt;/p&gt;

&lt;p&gt;Why don’t we do the same with people? Why do we motivate them upfront
and then trust them … until they turn out to be completely &lt;em&gt;untrustworthy&lt;/em&gt;?
Can’t we regularly check
how they are performing and correct our &lt;em&gt;trust&lt;/em&gt; accordingly? Why are they
either “great” for us or “useless”? Why can’t we grade them after each
iteration, according to both mistakes &lt;em&gt;and&lt;/em&gt; achievements they make?&lt;/p&gt;

&lt;p&gt;Let’s see how the formula that Agile suggests can be applied to the
PDCA continuum:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Plan: Find individuals and motivate them&lt;/li&gt;
  &lt;li&gt;Do: Trust them and they get the job done&lt;/li&gt;
  &lt;li&gt;Check: —&lt;/li&gt;
  &lt;li&gt;Act: —&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems that two important pieces are missing. We don’t check whether
we can still trust them, whether they are still motivated, whether they are
interested in getting the job done, and whether it’s time to
&lt;a href=&quot;/2015/09/16/how-to-fire-someone-right.html&quot;&gt;replace&lt;/a&gt;
some of them.&lt;/p&gt;

&lt;p&gt;Why so? What are we afraid of?&lt;/p&gt;

&lt;p&gt;Moreover, why do programmers find it humiliating when their results are being
regularly checked, leading to micro rewards and penalties, while at the same
time they find it totally OK to be fired for a single “unforgiven” mistake?&lt;/p&gt;

&lt;p&gt;I have an answer.&lt;/p&gt;

&lt;p&gt;Because their managers are &lt;a href=&quot;/2017/08/01/how-to-manage-a-manager.html&quot;&gt;weak and stupid&lt;/a&gt;,
in most cases. They simply
don’t know how to reward and penalize programmers incrementally. They don’t
know how to measure the progress of people, incrementally. Their control instruments
are based on guilt and fear: They put programmers together,
&lt;del&gt;brainwash&lt;/del&gt; &lt;a href=&quot;/2016/12/06/how-to-pay-programmers-less.html&quot;&gt;motivate&lt;/a&gt;
them, and then make them scared of making an unforgivable mistake.&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=KPbKqTXfZwA&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/KPbKqTXfZwA/mqdefault.jpg&quot; alt=&quot;YouTube video #KPbKqTXfZwA&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M89: Deliver your trust continuously, not discrete;
        29 May 2019.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;What exactly that mistake is, nobody really knows—it’s
a personal decision of a manager. It could be a broken unit test,
a missed &lt;a href=&quot;/2015/07/13/meetings-are-legalized-robbery.html&quot;&gt;meeting&lt;/a&gt;,
a rude email, or drinking in the office. The scale is
very wide and at which point the programmer will be fired, nobody
knows either. Even the manager can’t explain it. The decision in most cases is
&lt;a href=&quot;/2015/10/06/how-to-be-good-office-slave.html&quot;&gt;emotional and personal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You know that a very typical mistake in scope management is treating
large tasks with the 0/100 completeness rule: they are either “not even started”
or “fully complete,” and nothing in the middle. You can do that with
&lt;a href=&quot;/2017/11/28/microtasking.html&quot;&gt;small tasks&lt;/a&gt;,
but never with large ones, because it will lead to lack of control
and much higher risk of more expensive failures. You must break your scope
into smaller pieces and then apply the 0/100 rule.&lt;/p&gt;

&lt;p&gt;The same is true about people. You can’t &lt;a href=&quot;/2017/11/21/trust-pay-lose.html&quot;&gt;trust&lt;/a&gt;
them 0/100: either you trust
them fully or you fire them. This is too risky. You have to &lt;em&gt;decompose&lt;/em&gt;
their trustworthiness and their motivation into smaller pieces and deliver your
satisfaction and frustration incrementally. How do you do that? Via
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;micro-bonuses&lt;/a&gt; and
&lt;a href=&quot;/2018/01/09/micro-budgeting.html&quot;&gt;micro-penalties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How else?&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How to not hire a bad programmer? &lt;a href=&quot;https://twitter.com/hashtag/management?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#management&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1140200517555146753?ref_src=twsrc%5Etfw&quot;&gt;June 16, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="agile" /><summary type="html">There are twelve principles in the Agile Manifesto. The fifth one says: “Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.” I disagree. Strongly. This formula suggests treating people in a binary way: they are either motivated and trusted or … what? They have to be let go? This mindset is very typical, according to my observations, and leads to poor management and project failures. Instead, our people management must be more iterative and much less rigid.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/05/metro-manila.jpg" /></entry><entry><title type="html">Please, Don’t Improvise</title><link href="https://www.yegor256.com/2019/05/21/dont-improvise.html" rel="alternate" type="text/html" title="Please, Don't Improvise" /><published>2019-05-21T00:00:00+00:00</published><updated>2019-05-21T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/05/21/dont-improvise</id><content type="html" xml:base="https://www.yegor256.com/2019/05/21/dont-improvise.html">&lt;p&gt;We all know what happens when a programmer decides how a web site
or a mobile app should look. It ends up looking ugly. And why is that? I don’t know exactly,
but my best bet is on the &lt;a href=&quot;https://www.linkedin.com/pulse/left-brain-vs-right-brain-developers-warren-gwartney/&quot;&gt;left-brained nature&lt;/a&gt;
of programmers, who mostly are rigid and logical mathematicians. UI design, to the contrary,
requires creativity and intuition, which reside in the right side of our brain.
Some &lt;a href=&quot;https://www.fastcompany.com/3029364/this-is-your-brain-on-code-according-to-functional-mri-imaging&quot;&gt;recent studies&lt;/a&gt;
are skeptical about that, but my personal experience tells me that you should never expect
a programmer to make a user interface right.
Moreover, &lt;em&gt;I’m&lt;/em&gt; one of those programmers: No matter what I draw, it’s either
&lt;a href=&quot;/paintings.html&quot;&gt;black-and-white&lt;/a&gt;, or ugly.
But I still have to design my &lt;a href=&quot;/pets.html&quot;&gt;pet projects&lt;/a&gt;.
Here is a list of the top lessons I learned for myself, which help me survive
with my left-sided brain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;Big Eyes (2014) by Tim Burton&quot; src=&quot;/images/2019/05/big-eyes.jpg&quot; longdesc=&quot;#b71ede0a&quot; /&gt;&lt;figcaption id=&quot;b71ede0a&quot;&gt;Big Eyes (2014) by Tim Burton&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Leaders&lt;/strong&gt;.
I look at the things that big and famous companies are doing. I check the websites
I’m using every day to see what is “good” in modern web design:
&lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow&lt;/a&gt;,
&lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;,
&lt;a href=&quot;https://www.apple.com&quot;&gt;apple&lt;/a&gt;,
&lt;a href=&quot;https://www.amazon.com&quot;&gt;amazon&lt;/a&gt;,
&lt;a href=&quot;https://www.craigslist.org/&quot;&gt;craigslist&lt;/a&gt; (no kidding), etc.
I actually pay attention to fewer than ten websites.
They make buttons flat? I make them flat. They make fonts larger? I make
fonts larger. They make the background white, I make it white too.
I just copy them. They know better anyway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frameworks&lt;/strong&gt;.
There are &lt;a href=&quot;https://github.com/troxler/awesome-css-frameworks&quot;&gt;many&lt;/a&gt; of them for
the web. I tend to pick the simplest one and use it. Well, I even created my own one
a few years ago: &lt;a href=&quot;/2015/04/13/tacit-css-framework-for-dummies.html&quot;&gt;&lt;em&gt;Tacit, a CSS Framework Without Classes&lt;/em&gt;&lt;/a&gt;.
I always try to “design” as little as possible and follow the
conventions forced by the framework’s authors. If they want me to have my
buttons blue, they will be blue. I don’t try to be creative but just follow
the rules of the frameworks I use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defaults&lt;/strong&gt;.
There is always a big temptation to align the content “nicely,”
centering it or placing it in some multi-column grids. I try not to do
that, despite the temptation. I just don’t know how to do it right,
which is why the content “flows” from the top to the bottom, element
by element, aligned &lt;em&gt;left&lt;/em&gt;. Well, unless it’s a set of tabular data.
Sometimes there is also a temptation to add or remove spacing between
elements, either via an extra &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; or a &lt;code&gt;margin&lt;/code&gt;. I don’t do this.
The elements will be placed the way my framework places them by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colors&lt;/strong&gt;.
Choosing the right colors is a huge problem for me—I don’t know how to do that right.
I don’t know which red matches which green. That’s why I use
&lt;a href=&quot;https://coolors.co/app&quot;&gt;Coolors&lt;/a&gt;. I just click “space” multiple times and they
offer me a combination of five colors, which match each
other. I find the most attractive combination and call it a day. Five colors
are always enough for any web app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bold, Italic, Underscore, and All Caps&lt;/strong&gt;.
It’s simple—don’t use them. Never. Well,
&lt;a href=&quot;https://practicaltypography.com/bold-or-italic.html&quot;&gt;as little as possible&lt;/a&gt;.
You definitely shouldn’t use them in order to make a visual element more visible. You’ve got
fonts for that. If you want your caption to catch the eye, make the
font larger. But don’t use italic, bold, or, God forbid, all caps. I use
them sometimes, very rarely, but only in order to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Emphasis_%28typography%29&quot;&gt;emphasize&lt;/a&gt;
a word in a sentence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fonts&lt;/strong&gt;.
I try to stick to defaults, which are
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serif&quot;&gt;Serif&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sans-serif&quot;&gt;Sans-serif&lt;/a&gt;,
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monospaced_font&quot;&gt;Monospace&lt;/a&gt;.
If I can’t, I use &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;,
but very carefully. Of course, I use one font per system.
Do I know which two fonts are compatible? I don’t. Do you?
Don’t even try to make that decision right. Just one font and
&lt;a href=&quot;https://www.quora.com/How-many-different-fonts-should-you-use-in-your-website&quot;&gt;that’s it&lt;/a&gt;.
And I always try to make them as large as possible. This seems to be a
&lt;a href=&quot;https://blog.marvelapp.com/body-text-small/&quot;&gt;trend&lt;/a&gt;
now, most probably because screens are getting bigger.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Images&lt;/strong&gt;.
I do everything I can to avoid them, to be honest. I always attempt to
replace them with text or &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Unicode_characters&quot;&gt;Unicode symbols&lt;/a&gt;,
if necessary. When it’s absolutely necessary, I use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;SVG&lt;/a&gt; vector graphics.
PNG/JPEG raster-graphics is my last resort.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Artists&lt;/strong&gt;.
I pay absolutely no attention to what modern web artists are doing.
They create beautiful things, but I don’t even need to know about them.
They only annoy me, because I can’t create anything similar. When someone
shows me a website with new CSS tricks, I close it immediately. This is not for
me. My CSS has to be as &lt;em&gt;short&lt;/em&gt; and &lt;em&gt;primitive&lt;/em&gt; as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compliance&lt;/strong&gt;.
W3C has a number of validators for
&lt;a href=&quot;https://validator.w3.org/&quot;&gt;HTML&lt;/a&gt; and
&lt;a href=&quot;https://jigsaw.w3.org/css-validator/&quot;&gt;CSS&lt;/a&gt;, which can tell what’s
wrong with a website, statically analyzing it. This is similar to what
&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt;
does for our Java code. I rely on their recommendations, always.
Sometimes they sound too strict, but they tell me what the expectations are
of those who know web design way better than I do.  In HTML5,
for example, we are supposed to have &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; in our &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, or the &lt;code&gt;alt&lt;/code&gt; attribute
in all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements. I always try to follow these and other rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive&lt;/strong&gt;.
The design has to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Responsive_web_design&quot;&gt;mobile friendly&lt;/a&gt;.
Always.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To summarize, I would suggest: don’t improvise, don’t try to be
creative, don’t think that you understand what is beautiful and what’s not.
You don’t. Me neither. Just be as &lt;em&gt;minimalistic&lt;/em&gt; and &lt;em&gt;traditional&lt;/em&gt; as possible
and you will do yourself and your users a big favor.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How to make a UI look yummy? &lt;a href=&quot;https://twitter.com/hashtag/graphicdesigning?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#graphicdesigning&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yegor Bugayenko (@yegor256) &lt;a href=&quot;https://twitter.com/yegor256/status/1132522579674173441?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="graphics" /><summary type="html">We all know what happens when a programmer decides how a web site or a mobile app should look. It ends up looking ugly. And why is that? I don’t know exactly, but my best bet is on the left-brained nature of programmers, who mostly are rigid and logical mathematicians. UI design, to the contrary, requires creativity and intuition, which reside in the right side of our brain. Some recent studies are skeptical about that, but my personal experience tells me that you should never expect a programmer to make a user interface right. Moreover, I’m one of those programmers: No matter what I draw, it’s either black-and-white, or ugly. But I still have to design my pet projects. Here is a list of the top lessons I learned for myself, which help me survive with my left-sided brain.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/05/big-eyes.jpg" /></entry><entry><title type="html">0rsk.com: Cause + Risk + Effect</title><link href="https://www.yegor256.com/2019/05/14/cause-risk-effect.html" rel="alternate" type="text/html" title="0rsk.com: Cause + Risk + Effect" /><published>2019-05-14T00:00:00+00:00</published><updated>2019-05-14T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/05/14/cause-risk-effect</id><content type="html" xml:base="https://www.yegor256.com/2019/05/14/cause-risk-effect.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;http://www.0rsk.com&quot;&gt;&lt;img src=&quot;https://www.0rsk.com/logo.svg&quot; style=&quot;width:64px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;“A project manager’s work should not focus on dealing with problems;
it should focus on preventing them,”—this is how
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rita_Mulcahy&quot;&gt;Rita Mulcahy&lt;/a&gt; started
a chapter about Risk Management in her great book
&lt;a href=&quot;http://amzn.to/266pAYB&quot;&gt;&lt;em&gt;PMP Exam Prep&lt;/em&gt;&lt;/a&gt;. Sounds smart, but how does
a project manager know about the problems which are supposed to be
prevented? This is what that chapter and
&lt;a href=&quot;https://amzn.to/2V5b0wp&quot;&gt;&lt;em&gt;Risk Management Tricks of the Trade for Project Managers&lt;/em&gt;&lt;/a&gt;
(yet another great book by the same author) are dedicated to. What I learned
from these books, and from my multi-year &lt;a href=&quot;http://www.technoparkcorp.com/process/risk/risk/&quot;&gt;experience&lt;/a&gt;
of identifying, analyzing and dealing with risks, is that the best
format for specifying them consists of three parts: cause, risk, and effect.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Departed (2006) by Martin Scorsese&quot; src=&quot;/images/2019/05/the-departed.jpg&quot; longdesc=&quot;#93f6e7fe&quot; /&gt;&lt;figcaption id=&quot;93f6e7fe&quot;&gt;The Departed (2006) by Martin Scorsese&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s start with a simple example. I developed &lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;Sibit&lt;/a&gt;,
a simple Ruby gem, just &lt;a href=&quot;https://youtu.be/jeflGHMpfDc&quot;&gt;a few weeks ago&lt;/a&gt;,
which is a command line &lt;a href=&quot;https://bitcointalk.org/index.php?topic=5130324&quot;&gt;Bitcoin client&lt;/a&gt;.
You can check your Bitcoin address balance with it, and send a payment to another address, in just
a single command line call. It works just fine, but it does all its operations
via the &lt;a href=&quot;https://www.blockchain.com/api&quot;&gt;Blockchain API&lt;/a&gt; over HTTP.&lt;/p&gt;

&lt;p&gt;This means that if one day the API gets changed, the gem will stop working. It’s
a &lt;em&gt;risk&lt;/em&gt;. It not yet an &lt;em&gt;issue&lt;/em&gt;, since now the API works exactly as the gem expects it
to work, but it’s a very much &lt;em&gt;anticipated&lt;/em&gt; problem. When it happens, the
gem will stop working, its users will not understand why and will simply
stop using it. They will also think of me as the creator of some garbage that
is not maintained well and doesn’t work. Not really good for my reputation, right?&lt;/p&gt;

&lt;aside class=&quot;youtube&quot;&gt;
        &lt;a href=&quot;https://www.youtube.com/watch?v=WlI6IZ6M7vY&quot;&gt;&lt;div class=&quot;box&quot;&gt;
        &lt;img src=&quot;https://i.ytimg.com/vi/WlI6IZ6M7vY/mqdefault.jpg&quot; alt=&quot;YouTube video #WlI6IZ6M7vY&quot; /&gt;
        &lt;div class=&quot;play&quot;&gt;&lt;i class=&quot;icon icon-play&quot;&gt;&lt;/i&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/a&gt;
        &lt;div&gt;M74: If your project doesn't have a formal Risk List, you are doing management wrong;
        18 April 2019.&lt;/div&gt;&lt;/aside&gt;

&lt;p&gt;Just like Rita Mulcahy suggested above, I shouldn’t just wait until
a very disappointed user emails me. I should &lt;em&gt;pro-actively&lt;/em&gt; deal with this risk somehow.
How? Well, I can do a few things. First, I can create a few integration tests
to check whether the API still supports the protocol I’m expecting, and
make sure my CI runs the build, say, once a day. Once the build goes
red, I should get an email and react accordingly by fixing the gem before
its users notice the problem. Second, I can manually check the repo every
week, for example, to make sure it’s still in a good shape and works against
the API.&lt;/p&gt;

&lt;p&gt;Now, let’s turn this story into formal risk management. I took the titles
of the subsections below from the
&lt;a href=&quot;https://www.pmi.org/pmbok-guide-standards&quot;&gt;PMBOK&lt;/a&gt;
Risk Management chapter.&lt;/p&gt;

&lt;h2 id=&quot;identify-risks&quot;&gt;Identify Risks&lt;/h2&gt;

&lt;p&gt;First, we &lt;em&gt;identify&lt;/em&gt; the risk. It will consist of &lt;em&gt;three&lt;/em&gt; parts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Cause #1: Sibit works by using the Blockchain API
Risk #1: The API may be changed without notice
Effect #1: Users will be disappointed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;em&gt;cause&lt;/em&gt; is something that we have and which is a fact. The &lt;em&gt;risk&lt;/em&gt; is the
anticipated &lt;em&gt;event&lt;/em&gt;, which may happen or may not. The &lt;em&gt;effect&lt;/em&gt; is
what will happen if the risk occurs. Why do we need to split it in
three parts? Technically, if we put them together, here is how it will sound:
“Since Sibit uses the Blockchain API and the API may be changed without notice
users will be disappointed.” But it’s better to clearly
define cause/risk/effect components, because, guess what … we may
have different combinations of risks, effects and causes.
For example, how about identifying an additional risk for an existing cause:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Risk #2: The API may go out of the market&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s a different risk from the one we had before. The API will not change,
but will disappear entirely from the market. Is it possible? Pretty much.
What will be the effect of this risk? The same—users will be disappointed,
since Sibit, my Ruby gem, will stop working. Maybe there will be some
other effects? Well, let’s think. If the entire API is shut down, I will
have to spend a decent amount of time on finding a new one, studying it,
understanding how it works, and making a lot of changes in my gem in order
to make it understand the new API. I may even fail to do so, if the new API
has a significantly different design. In other words, the effect of
risk #2 will be something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Effect #2: It will take time to connect to a new API&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, the moment the API gets out of the market,
there will be an &lt;em&gt;opportunity&lt;/em&gt; on the market for a similar API. If we know
about it at the right moment of time, we could &lt;em&gt;exploit&lt;/em&gt; that opportunity
and create a similar API for other users, right? Thus, risk #2 has
an additional effect:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Effect #3: There will be an opportunity to create a similar API&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a &lt;em&gt;positive&lt;/em&gt; effect, while the effects we had before were &lt;em&gt;negative&lt;/em&gt; ones.
The job of a project manager is not only to identify negative effects, but
to find a similar amount of positive effects for most risks and causes.&lt;/p&gt;

&lt;p&gt;To summarize, this is what we have now:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1 → E1
   → R2 → E2
        → E3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Get the diagram? The cause &lt;code&gt;C1&lt;/code&gt; leads to the risks &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt;, which have
a number of effects each: &lt;code&gt;E1&lt;/code&gt;, &lt;code&gt;E2&lt;/code&gt;, and &lt;code&gt;E3&lt;/code&gt;. In order to be able to define
such a multi-level diagram and avoid duplication of text
we need to split each anticipated event into three parts.&lt;/p&gt;

&lt;p&gt;There are some rules I learned for myself about those three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Does&lt;/strong&gt;.
The cause should always sound like a statement in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Present_tense&quot;&gt;the present tense&lt;/a&gt;,
since it states a fact that exists right now, e.g.
“we use Hibernate,”
“Java 6 is not supported anymore,”
“70% of our users are on Android,”
“payments are sent via PayPal,”
“GitHub is the sole maintainer of our repository,”
and so on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;May&lt;/strong&gt;.
The Risk statement should use the word “may”,
since it is something that hasn’t happened yet, but is only anticipated, e.g.
“we may lose the customer,”
“the architect may quit,”
“Apple Store may delay in reviewing our app,”
“the investor may pull out,”
etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Will&lt;/strong&gt;.
The Effect should be in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Future_tense&quot;&gt;the future tense&lt;/a&gt;, explicitly
stating the outcome we will experience in the future if the risk occurs, e.g.
“we will go bankrupt,”
“we will have to rewrite the entire module,”
“we will spend another $10,000 for hardware,”
and so on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Needless to say, the shorter the statements the better. A properly
defined cause, risk, and effect should include up to 20 words each. Longer
statements mean only one thing: the author is not clear about what’s going on
and needs to spend more time investigating the situation.&lt;/p&gt;

&lt;h2 id=&quot;qualitative-analysis&quot;&gt;Qualitative Analysis&lt;/h2&gt;

&lt;p&gt;Not all risks and effects are equally likely, as you can see. It is very
unlikely that the entire Blockchain API will die, but it’s very likely
that it may change its HTTP protocol. It would be silly to pay
equal attention to all risks, since some of them are &lt;em&gt;primary&lt;/em&gt;, while
others are &lt;em&gt;secondary&lt;/em&gt;. How do we know which one is which? We assign
numbers. Here is how.&lt;/p&gt;

&lt;p&gt;First, we analyze all risks and assign a &lt;em&gt;probability&lt;/em&gt; to each of them,
where 1 means that the risk will most likely never occur and 9
means that the risk will undoubtedly happen:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1:7 → E1
   → R2:2 → E2
          → E3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I assigned 7 and 2 to the risks above. It was my &lt;em&gt;expert judgment&lt;/em&gt;. No math here.
I just took a look at the risks and made my personal decision,
as an owner/manager of the project.&lt;/p&gt;

&lt;p&gt;Then, we assign an &lt;em&gt;impact&lt;/em&gt; to each effect, again within the &lt;code&gt;[1..9]&lt;/code&gt; range.
Here, 1 means that the consequences we are expecting won’t hurt anyone
and won’t really help anyone either, while 9 means that the effect is crucial
(either in a negative or a positive way):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1:7 → E1↓:3
   → R2:2 → E2↓:8
          → E3↑:3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, I chose the numbers according to my expert judgement. Changing the gem
according to a slightly changed API is one thing (the impact is 3), while
re-writing it for an entirely new API is a completely different amount
of work (hence the impact is 8).&lt;/p&gt;

&lt;p&gt;The final step is to multiply them: probability × impact. We will get this
list of risks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1:7 → E1↓:3 ⇢ 7×3 = 21
C1 → R2:2 → E2↓:8 ⇢ 2×8 = 16
C1 → R2:2 → E3↑:3 ⇢ 2×3 =  6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now see what is what in our list. Even though the consequences of the
second line in the list are more serious, the probability is lower and,
in the overall map of the risks, this line is less important.&lt;/p&gt;

&lt;p&gt;What we just did is called qualitative risk analysis: we determined
which risks are more important and need to be addressed immediately, and
which are less important and can simply be ignored for a while.&lt;/p&gt;

&lt;h2 id=&quot;quantitative-analysis&quot;&gt;Quantitative Analysis&lt;/h2&gt;

&lt;p&gt;I will skip this section. I don’t think it’s important or feasible
for a small software project. According to Rita Mulcahy:
“As a project manager, you should always do qualitative risk analysis
but quantitative risk analysis is not required for all projects or for all
risks and may be skipped in favor of moving on to risk response planning.”&lt;/p&gt;

&lt;h2 id=&quot;plan-risk-responses&quot;&gt;Plan Risk Responses&lt;/h2&gt;

&lt;p&gt;Now it’s time to put my &lt;em&gt;response plans&lt;/em&gt; in place. There are basically
two options for me in each &lt;em&gt;positive&lt;/em&gt; line of my &lt;em&gt;Risk List&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Avoid&lt;/strong&gt;.
I can do something to lower the probability of the risk. Take risk &lt;code&gt;R2&lt;/code&gt;—can
I do something to make sure the Blockchain API stays on the market for
longer and doesn’t die? Well, I can tweet about it, promote it, or maybe
even donate some money to it. But I doubt any of that will really help.
So &lt;em&gt;avoiding&lt;/em&gt; is not the right strategy here. I simply can’t lower the probability, no matter what I do.
If the Risk &lt;code&gt;R2&lt;/code&gt; has to occur, it will occur. The same it true about
the Risk &lt;code&gt;R1&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mitigate&lt;/strong&gt;.
The second possible risk response &lt;em&gt;strategy&lt;/em&gt; is &lt;em&gt;mitigation&lt;/em&gt; of the impact
of the effect. Take a look at the effect &lt;code&gt;E1&lt;/code&gt;. As discussed above, it will
be wise to do two things. First, create integration tests and configure
the CI to send me an email when the API is changed. Second, regularly
check the repo for consistency and minimize the amount of time the repo
will stay out of sync with the API, right after the API is changed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, there are other options like &lt;em&gt;accepting&lt;/em&gt; (do nothing and just wait)
or &lt;em&gt;transferring&lt;/em&gt; (find a scape goat to blame when things go south), but they
are less practical.&lt;/p&gt;

&lt;p&gt;There are two options for a &lt;em&gt;good&lt;/em&gt; risk (E1/R2/E3) too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Exploit&lt;/strong&gt;.
I may do something to expedite the quick death of Blockchain API,
thus making the risk &lt;code&gt;R2&lt;/code&gt; happen faster, right? Well, this may sound
like a joke in this case, but very often we may choose to push things
forward with a positive risk. This strategy is called &lt;em&gt;exploiting&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enhance&lt;/strong&gt;.
I may do something to increase the positive impact of the effect &lt;code&gt;E3&lt;/code&gt;. For
example, I may prepare a similar API and make it market ready. When the
Blockchain API dies, I immediately launch mine and start promoting it
with “Hey, those guys are dead, switch here now!” I’m kidding, but you
get the idea.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, simply put, we can have a plan attached either to a risk or to an effect.
We can either do something with the probability or with the impact. Well, we
can do something with the cause too. For example, I can eliminate the entire
list of risks if I just delete my gem and kill the project, right? There will
be no trouble anymore. No frustrated users, no risks, no opportunities. This
may also be a solution in some cases (though not in this one).&lt;/p&gt;

&lt;p&gt;The bottom line is that a plan may be attached to either a cause, a risk,
or an effect. I would define three plans, all mitigating the impact
of &lt;code&gt;E1&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;P1→E1: Create integration tests (once)
P2→E1: Configure CI (once)
P3→E1: Check the repo for compliance with API (weekly)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first two are one-time actions, which I have to perform ASAP. Once
completed they will lower the impact of &lt;code&gt;E1&lt;/code&gt;. The plan &lt;code&gt;P3&lt;/code&gt; should
be performed every week, in order to lower the impact of &lt;code&gt;E1&lt;/code&gt; too.
Here is how my Risk List looks, together with the plans:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;C1 → R1:7 → E1↓:3 ⇢ 7×3 = 21
  P1, P2, P3
C1 → R2:2 → E2↓:8 ⇢ 2×8 = 16
  No plans
C1 → R2:2 → E3↑:3 ⇢ 2×3 =  6
  No plans&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sense?
I hope so. I definitely recommend you read
&lt;a href=&quot;https://amzn.to/2V5b0wp&quot;&gt;&lt;em&gt;Risk Management Tricks of the Trade for Project Managers&lt;/em&gt;&lt;/a&gt;.
It explains it all in much more detail and it’s fun to read.&lt;/p&gt;

&lt;p&gt;I created a simple web project, which makes it possible to put exactly
this type of risk structure in writing: &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk.com&lt;/a&gt;
(it’s in the &lt;a href=&quot;https://www.zerocracy.com&quot;&gt;Zerocracy&lt;/a&gt; product family, that’s why
the name starts with zero). You just
login there, create a new project, and “add” your risks. Try it out.
Then, when the risks are registered, you attach response plans to them.
The interface is pretty intuitive, so you should have no issues. If there are any
difficulties, don’t hesitate to &lt;a href=&quot;https://github.com/yegor256/0rsk/issues&quot;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implement-risk-responses&quot;&gt;Implement Risk Responses&lt;/h2&gt;

&lt;p&gt;Now it’s time to do what was planned, to &lt;em&gt;implement&lt;/em&gt; the plans. &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; turns
plans into &lt;em&gt;tasks&lt;/em&gt;, when the time comes. The tasks are explicit instructions
for you, the project manager. Then you do them yourself or delegate to your
project members.&lt;/p&gt;

&lt;p&gt;In the near future &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; &lt;a href=&quot;https://github.com/yegor256/0rsk/issues/21&quot;&gt;will integrate&lt;/a&gt;
with GitHub and other task trackers, to drop new tasks there and monitor
their execution. Stay tuned, there will be more features soon.&lt;/p&gt;

&lt;p&gt;There is also a Telegram integration. Every time a new plan has to be executed,
&lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; pings me in Telegram, reminding that it’s time to work on that. Try
it out, the bot is here: &lt;a href=&quot;https://t.me/zerorsk_bot&quot;&gt;@zerorsk_bot&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Honestly, I find this risk-driven way of managing my scope of work very
productive and results focused. First, I identify what the most important
situations are in my project (which could be people, resources, bank accounts,
software products, assets, etc), then I think about risks and I do this regularly,
creating a few new risks every day, together with effects. Then, I plan
what I can do in order to minimize their probabilities and react to their
impacts. Finally, the Telegram bot starts telling me what to do every day.&lt;/p&gt;

&lt;p&gt;Thanks to all of this, I don’t miss the overall scope—it is defined by the
cause-risk-effect-plan structure in my &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; project—and I stay
focused on what matters, every day.&lt;/p&gt;

&lt;p&gt;Now I don’t react to problems, I prevent them, just like Rita Mulcahy suggested.&lt;/p&gt;

&lt;p&gt;You can do too, &lt;a href=&quot;https://www.0rsk.com&quot;&gt;0rsk&lt;/a&gt; is free for all.&lt;/p&gt;

&lt;p&gt;P.S. There is a curated list of causes, risks, and effects, where you can
pick your the one most revelant to your case: &lt;a href=&quot;https://github.com/yegor256/awesome-risks&quot;&gt;yegor256/awesome-risks&lt;/a&gt;.
You can even add your ideas there.&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><summary type="html">“A project manager’s work should not focus on dealing with problems; it should focus on preventing them,”—this is how Rita Mulcahy started a chapter about Risk Management in her great book PMP Exam Prep. Sounds smart, but how does a project manager know about the problems which are supposed to be prevented? This is what that chapter and Risk Management Tricks of the Trade for Project Managers (yet another great book by the same author) are dedicated to. What I learned from these books, and from my multi-year experience of identifying, analyzing and dealing with risks, is that the best format for specifying them consists of three parts: cause, risk, and effect.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/05/the-departed.jpg" /></entry><entry><title type="html">Sibit Demonstrates How Bitcoin Works</title><link href="https://www.yegor256.com/2019/05/07/sibit-bitcoin-command-line-client.html" rel="alternate" type="text/html" title="Sibit Demonstrates How Bitcoin Works" /><published>2019-05-07T00:00:00+00:00</published><updated>2019-05-07T00:00:00+00:00</updated><id>https://www.yegor256.com/2019/05/07/sibit-bitcoin-command-line-client</id><content type="html" xml:base="https://www.yegor256.com/2019/05/07/sibit-bitcoin-command-line-client.html">&lt;figure class=&quot;badge&quot;&gt;&lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;&lt;img src=&quot;https://github.com/yegor256/sibit/raw/master/logo.svg&quot; style=&quot;width:64px;max-width:100%;&quot; alt=&quot;badge&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bitcoin.org&quot;&gt;Bitcoin&lt;/a&gt; was a big technical mystery for me. All the articles I’d read
about it sounded extremely complex and absolutely indigestible. Until
I got stuck with a task: I had to integrate &lt;a href=&quot;https://www.zold.io&quot;&gt;Zold&lt;/a&gt;, our
experimental non-Blockchain cryptocurrency, with Bitcoin. I had to study
the architecture of Bitcoin and I found this short and simple
&lt;a href=&quot;https://www.youtube.com/watch?v=IV9pRBq5A4g&quot;&gt;video&lt;/a&gt; (I highly recommend you
watch it). I managed to implement the integration and understand how
Blockchain works. Here is my short summary. I hope it will be helpful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;jb_picture&quot;&gt;&lt;img itemprop=&quot;image&quot; alt=&quot;The Invention of Lying (2009) by Ricky Gervais et al.&quot; src=&quot;/images/2019/05/the-invention-of-lying.jpg&quot; longdesc=&quot;#c8bec95b&quot; /&gt;&lt;figcaption id=&quot;c8bec95b&quot;&gt;The Invention of Lying (2009) by Ricky Gervais et al.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;First, there is a &lt;a href=&quot;https://en.bitcoin.it/wiki/Private_key&quot;&gt;private key&lt;/a&gt;,
which is a short piece of text, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;c93a36feb31712c390a78b37337cb85d45d3b2f9f6e55108bde32477cbabac5f&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How did I generate it? It’s random. You can generate one too. Install
&lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;Sibit&lt;/a&gt;, my Ruby gem, and run the following
(it’s a command line tool):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ sibit generate
c93a36feb31712c390a78b37337cb85d45d3b2f9f6e55108bde32477cbabac5f&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every time you call &lt;code&gt;sibit generate&lt;/code&gt; you will get a new private key. It is
just a random piece of text (well, a large hex number).
Then, you create an &lt;a href=&quot;https://en.bitcoin.it/wiki/Address&quot;&gt;address&lt;/a&gt;
from your private key. Each private key has exactly one address.
Here is how you create it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ sibit create c93a36feb31712c390a78b37337cb85d45d3b2f9f6e55108bde32477cbabac5f
1K3JgsdRbbUDUgTGo4gvUXUzRZjBse1TYe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You give it to someone who wants to send you a payment. A transaction in Bitcoin is not what
you’re used to thinking about when you imagine a bank transaction. A Bitcoin
&lt;a href=&quot;https://en.bitcoin.it/wiki/Transaction&quot;&gt;transaction&lt;/a&gt;
has a number of &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; addresses. Say, three inputs of 10 BTC each
and two outputs of 25 BTC and 5 BTC. The sum of all inputs must be equal to the
sum of all outputs.&lt;/p&gt;

&lt;p&gt;Thus, in one transaction you can move a lot of digital money between addresses.
You can take a hundred input addresses and send them to another hundred
output addresses. This is what surprised me a bit when I discovered it. The
transactions could be pretty large in size. And the sizes matter. They are
calculated in bytes. A transaction with one input and one output will consume
&lt;a href=&quot;https://bitcoin.stackexchange.com/questions/1195/&quot;&gt;about&lt;/a&gt; 220 bytes.
Keep this number in mind, we will get back to it soon.&lt;/p&gt;

&lt;p&gt;As you can imagine already, in order to calculate how much money you have
&lt;em&gt;on&lt;/em&gt; your address you just go through all the transactions in the entire
database (there are
&lt;a href=&quot;https://www.blockchain.com/en/charts/n-transactions-total&quot;&gt;over 400 million&lt;/a&gt; already)
and see how many transactions had your address as their outputs (your inputs). Then you
deduct any transactions that were your outputs and someone else’s inputs. You get
the balance. There are many public and free web services which can do this
work for you. You don’t need to search the entire database yourself,
just use &lt;a href=&quot;https://www.blockchain.com/api/blockchain_api&quot;&gt;Blockchain API&lt;/a&gt;
(for example) and they will provide you with the information
about any Bitcoin address. Try this address, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ sibit balance 1MUhYhaBqzgpwL1focqJNhTymdXbyky9UY
20000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is in &lt;a href=&quot;https://en.bitcoin.it/wiki/Satoshi_%28unit%29&quot;&gt;satoshi&lt;/a&gt;,
which is 0.2 BTC. Click &lt;a href=&quot;https://www.blockchain.com/btc/address/1MUhYhaBqzgpwL1focqJNhTymdXbyky9UY&quot;&gt;here&lt;/a&gt;
and you will
see the inputs and outputs of this address. There is only one transaction
that mentioned this address. That transaction had a single input and two
outputs. One of its outputs was mine. I got 0.2 bitcoins and they are still
here, since there are no transactions which &lt;em&gt;move&lt;/em&gt; them somewhere else.&lt;/p&gt;

&lt;p&gt;Thus, simply put, the Blockchain database is a large list of transactions
with inputs and outputs in each of them. Once a new transaction gets into
this database, the balance of a few addresses change. The database only
grows and no previous transactions can be deleted or modified. Thus, once
your transaction gets in, the money is moved from address to address.&lt;/p&gt;

&lt;p&gt;To create a transaction you need to know all the input addresses, their private keys,
and all the output addresses. You need multiple inputs if you want to send
an amount that is larger than you have in a single address. There is something
known as a &lt;a href=&quot;https://www.bitcoin.com/bitcoin-wallet-directory&quot;&gt;wallet&lt;/a&gt;
in Bitcoin, which is a piece of software, like &lt;a href=&quot;https://electrum.org/&quot;&gt;Electrum&lt;/a&gt;, which keeps track of all your
addresses and knows how to create a transaction, combining a number of
addresses and using them as inputs. That’s all.&lt;/p&gt;

&lt;p&gt;So, you know the inputs, you specify the outputs and you are expected to leave a small amount
unspent. Let’s say your inputs have 10,000 satoshi and you specify an output
for 8,000. You leave the residual 2,000 unspent. They are called
&lt;a href=&quot;https://en.bitcoin.it/wiki/Miner_fees&quot;&gt;miner fees&lt;/a&gt;.
You send your transaction to all Bitcoin nodes, they place it in their
memory pool, and attempt to combine a few thousand transactions in a
&lt;a href=&quot;https://en.bitcoin.it/wiki/Block&quot;&gt;block&lt;/a&gt;.
They all attempt together and only one of them manages to do it,
&lt;a href=&quot;https://bitcoin.stackexchange.com/questions/8823&quot;&gt;approximately&lt;/a&gt;
once every ten minutes. Once a winner manages to &lt;a href=&quot;https://en.bitcoin.it/wiki/Mining&quot;&gt;solve&lt;/a&gt;
a block, it wins that 2,000 you left untouched in your transaction. Every transaction in the
block pays that winner some small fee.&lt;/p&gt;

&lt;p&gt;Is it possible to pay nothing?
&lt;a href=&quot;https://bitcointalk.org/index.php?topic=245552&quot;&gt;Yes&lt;/a&gt;. However, the smaller the
fee you leave in your transaction, the lower the chances that your
transaction will go into the next block. Each miner wants to make the maximum
out of each block and puts the most “generous” transactions in the block,
when trying to &lt;a href=&quot;https://en.bitcoin.it/wiki/Mining&quot;&gt;mine&lt;/a&gt; it.&lt;/p&gt;

&lt;p&gt;The fee depends on the size of the transaction in bytes. Since any transaction
may include many inputs and outputs, its size is the only thing that matters.
For example, the fee I paid in
&lt;a href=&quot;https://www.blockchain.com/btc/tx/eede4bb2ad4e3c21a09cf238a282b08daab66937c726dce8fe07ab55793c4c51&quot;&gt;this transaction&lt;/a&gt;
was 8,971 satoshi, which is approximately 40 satoshi per byte, since
my transaction included 225 bytes.&lt;/p&gt;

&lt;p&gt;To send your transaction to all Bitcoin nodes you have two options. The first
one is to start your own &lt;a href=&quot;https://en.bitcoin.it/wiki/Full_node&quot;&gt;full node&lt;/a&gt;,
which will communicate with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitcoin_network&quot;&gt;other nodes&lt;/a&gt;
through the Bitcoin &lt;a href=&quot;https://en.bitcoin.it/wiki/Protocol_documentation&quot;&gt;protocol&lt;/a&gt;.
The second option is to use one of the HTTP relays, where you
just post your transaction in a POST HTTP request and the relay sends it to all
Bitcoin nodes; &lt;a href=&quot;https://www.blockchain.com/btc/pushtx&quot;&gt;this is&lt;/a&gt; one of them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;Sibit&lt;/a&gt; automates this process. You just say:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;$ sibit pay 200000 L \
  1K3J...se1TYe:c93a36feb3...e55108bde32477cbabac5f \
  153dF1xKyVX5X8brBDroaqKkPmcB8kLtDB \
  1K3JgsdRbbUDUgTGo4gvUXUzRZjBse1TYe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the first argument is the amount you are sending. The second one
is the fee you want to leave untouched. I made it easier for you, to help
you avoid calculations. Just say &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; or &lt;code&gt;XL&lt;/code&gt; and the fee will be calculated
more or less correctly. The third argument is a list of addresses
and their private keys, separated by a colon.
The fourth argument is the target address (&lt;a href=&quot;https://github.com/yegor256/sibit&quot;&gt;Sibit&lt;/a&gt;
makes it possible to send to only one address). The last argument is the
address where the &lt;a href=&quot;https://en.bitcoin.it/wiki/Change&quot;&gt;change&lt;/a&gt; will be sent.&lt;/p&gt;

&lt;p&gt;If you have 50,000 satoshi in your inputs and you want to send 15,000 satoshi
to a friend, you have to find a place where the other 35,000 will be
sent—well, minus the miner fee. You just provide your own address and
the change will arrive there.&lt;/p&gt;

&lt;p&gt;This is pretty much all you need to know about Bitcoin and Blockchain,
in order to use it. What did I miss?&lt;/p&gt;</content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="crypto" /><summary type="html">Bitcoin was a big technical mystery for me. All the articles I’d read about it sounded extremely complex and absolutely indigestible. Until I got stuck with a task: I had to integrate Zold, our experimental non-Blockchain cryptocurrency, with Bitcoin. I had to study the architecture of Bitcoin and I found this short and simple video (I highly recommend you watch it). I managed to implement the integration and understand how Blockchain works. Here is my short summary. I hope it will be helpful.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2019/05/the-invention-of-lying.jpg" /></entry></feed>